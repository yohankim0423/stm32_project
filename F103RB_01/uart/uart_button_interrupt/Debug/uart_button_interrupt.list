
uart_button_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000324c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003358  08003358  00004358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033dc  080033dc  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080033dc  080033dc  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080033dc  080033dc  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033dc  080033dc  000043dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033e0  080033e0  000043e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080033e4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  0800344c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800344c  0000526c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007b39  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001884  00000000  00000000  0000cbca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0000e450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000059c  00000000  00000000  0000ebb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180a5  00000000  00000000  0000f154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000892a  00000000  00000000  000271f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084ed7  00000000  00000000  0002fb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b49fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002468  00000000  00000000  000b4a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000b6ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003340 	.word	0x08003340

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003340 	.word	0x08003340

0800014c <_write>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
  if (file == STDOUT_FILENO || file == STDERR_FILENO)
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	2b01      	cmp	r3, #1
 800015c:	d002      	beq.n	8000164 <_write+0x18>
 800015e:	68fb      	ldr	r3, [r7, #12]
 8000160:	2b02      	cmp	r3, #2
 8000162:	d109      	bne.n	8000178 <_write+0x2c>
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	b29a      	uxth	r2, r3
 8000168:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800016c:	68b9      	ldr	r1, [r7, #8]
 800016e:	4805      	ldr	r0, [pc, #20]	@ (8000184 <_write+0x38>)
 8000170:	f001 fb38 	bl	80017e4 <HAL_UART_Transmit>
	  return len;
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	e001      	b.n	800017c <_write+0x30>
  }
  return -1;
 8000178:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff

}
 800017c:	4618      	mov	r0, r3
 800017e:	3710      	adds	r7, #16
 8000180:	46bd      	mov	sp, r7
 8000182:	bd80      	pop	{r7, pc}
 8000184:	20000084 	.word	0x20000084

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f000 faf4 	bl	8000778 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f812 	bl	80001b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 f8aa 	bl	80002ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000198:	f000 f87e 	bl	8000298 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800019c:	f000 f852 	bl	8000244 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80001a0:	2201      	movs	r2, #1
 80001a2:	4903      	ldr	r1, [pc, #12]	@ (80001b0 <main+0x28>)
 80001a4:	4803      	ldr	r0, [pc, #12]	@ (80001b4 <main+0x2c>)
 80001a6:	f001 fba8 	bl	80018fa <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001aa:	bf00      	nop
 80001ac:	e7fd      	b.n	80001aa <main+0x22>
 80001ae:	bf00      	nop
 80001b0:	20000114 	.word	0x20000114
 80001b4:	20000084 	.word	0x20000084

080001b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b090      	sub	sp, #64	@ 0x40
 80001bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001be:	f107 0318 	add.w	r3, r7, #24
 80001c2:	2228      	movs	r2, #40	@ 0x28
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f002 fa58 	bl	800267c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001cc:	1d3b      	adds	r3, r7, #4
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
 80001d2:	605a      	str	r2, [r3, #4]
 80001d4:	609a      	str	r2, [r3, #8]
 80001d6:	60da      	str	r2, [r3, #12]
 80001d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001da:	2301      	movs	r3, #1
 80001dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e8:	2301      	movs	r3, #1
 80001ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ec:	2302      	movs	r3, #2
 80001ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fc:	f107 0318 	add.w	r3, r7, #24
 8000200:	4618      	mov	r0, r3
 8000202:	f000 fe8f 	bl	8000f24 <HAL_RCC_OscConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800020c:	f000 f90e 	bl	800042c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000210:	230f      	movs	r3, #15
 8000212:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000214:	2302      	movs	r3, #2
 8000216:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000220:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	2102      	movs	r1, #2
 800022a:	4618      	mov	r0, r3
 800022c:	f001 f8fc 	bl	8001428 <HAL_RCC_ClockConfig>
 8000230:	4603      	mov	r3, r0
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000236:	f000 f8f9 	bl	800042c <Error_Handler>
  }
}
 800023a:	bf00      	nop
 800023c:	3740      	adds	r7, #64	@ 0x40
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
	...

08000244 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000248:	4b11      	ldr	r3, [pc, #68]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 800024a:	4a12      	ldr	r2, [pc, #72]	@ (8000294 <MX_USART1_UART_Init+0x50>)
 800024c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800024e:	4b10      	ldr	r3, [pc, #64]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 8000250:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000254:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000256:	4b0e      	ldr	r3, [pc, #56]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 8000258:	2200      	movs	r2, #0
 800025a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800025c:	4b0c      	ldr	r3, [pc, #48]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 800025e:	2200      	movs	r2, #0
 8000260:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000262:	4b0b      	ldr	r3, [pc, #44]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 8000264:	2200      	movs	r2, #0
 8000266:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000268:	4b09      	ldr	r3, [pc, #36]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 800026a:	220c      	movs	r2, #12
 800026c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800026e:	4b08      	ldr	r3, [pc, #32]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 8000270:	2200      	movs	r2, #0
 8000272:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000274:	4b06      	ldr	r3, [pc, #24]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 8000276:	2200      	movs	r2, #0
 8000278:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800027a:	4805      	ldr	r0, [pc, #20]	@ (8000290 <MX_USART1_UART_Init+0x4c>)
 800027c:	f001 fa62 	bl	8001744 <HAL_UART_Init>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000286:	f000 f8d1 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000084 	.word	0x20000084
 8000294:	40013800 	.word	0x40013800

08000298 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800029c:	4b11      	ldr	r3, [pc, #68]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 800029e:	4a12      	ldr	r2, [pc, #72]	@ (80002e8 <MX_USART2_UART_Init+0x50>)
 80002a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002a2:	4b10      	ldr	r3, [pc, #64]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002b0:	4b0c      	ldr	r3, [pc, #48]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002b6:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002bc:	4b09      	ldr	r3, [pc, #36]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002be:	220c      	movs	r2, #12
 80002c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c2:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c8:	4b06      	ldr	r3, [pc, #24]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002ce:	4805      	ldr	r0, [pc, #20]	@ (80002e4 <MX_USART2_UART_Init+0x4c>)
 80002d0:	f001 fa38 	bl	8001744 <HAL_UART_Init>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002da:	f000 f8a7 	bl	800042c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	200000cc 	.word	0x200000cc
 80002e8:	40004400 	.word	0x40004400

080002ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002f2:	f107 0310 	add.w	r3, r7, #16
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000300:	4b2d      	ldr	r3, [pc, #180]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	4a2c      	ldr	r2, [pc, #176]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 8000306:	f043 0310 	orr.w	r3, r3, #16
 800030a:	6193      	str	r3, [r2, #24]
 800030c:	4b2a      	ldr	r3, [pc, #168]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	f003 0310 	and.w	r3, r3, #16
 8000314:	60fb      	str	r3, [r7, #12]
 8000316:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000318:	4b27      	ldr	r3, [pc, #156]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	4a26      	ldr	r2, [pc, #152]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 800031e:	f043 0320 	orr.w	r3, r3, #32
 8000322:	6193      	str	r3, [r2, #24]
 8000324:	4b24      	ldr	r3, [pc, #144]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	f003 0320 	and.w	r3, r3, #32
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000330:	4b21      	ldr	r3, [pc, #132]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	4a20      	ldr	r2, [pc, #128]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 8000336:	f043 0304 	orr.w	r3, r3, #4
 800033a:	6193      	str	r3, [r2, #24]
 800033c:	4b1e      	ldr	r3, [pc, #120]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	f003 0304 	and.w	r3, r3, #4
 8000344:	607b      	str	r3, [r7, #4]
 8000346:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000348:	4b1b      	ldr	r3, [pc, #108]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	4a1a      	ldr	r2, [pc, #104]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 800034e:	f043 0308 	orr.w	r3, r3, #8
 8000352:	6193      	str	r3, [r2, #24]
 8000354:	4b18      	ldr	r3, [pc, #96]	@ (80003b8 <MX_GPIO_Init+0xcc>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	f003 0308 	and.w	r3, r3, #8
 800035c:	603b      	str	r3, [r7, #0]
 800035e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2120      	movs	r1, #32
 8000364:	4815      	ldr	r0, [pc, #84]	@ (80003bc <MX_GPIO_Init+0xd0>)
 8000366:	f000 fdad 	bl	8000ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800036a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800036e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000370:	4b13      	ldr	r3, [pc, #76]	@ (80003c0 <MX_GPIO_Init+0xd4>)
 8000372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000374:	2300      	movs	r3, #0
 8000376:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000378:	f107 0310 	add.w	r3, r7, #16
 800037c:	4619      	mov	r1, r3
 800037e:	4811      	ldr	r0, [pc, #68]	@ (80003c4 <MX_GPIO_Init+0xd8>)
 8000380:	f000 fc1c 	bl	8000bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000384:	2320      	movs	r3, #32
 8000386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000388:	2301      	movs	r3, #1
 800038a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038c:	2300      	movs	r3, #0
 800038e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000390:	2302      	movs	r3, #2
 8000392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	4619      	mov	r1, r3
 800039a:	4808      	ldr	r0, [pc, #32]	@ (80003bc <MX_GPIO_Init+0xd0>)
 800039c:	f000 fc0e 	bl	8000bbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003a0:	2200      	movs	r2, #0
 80003a2:	2100      	movs	r1, #0
 80003a4:	2028      	movs	r0, #40	@ 0x28
 80003a6:	f000 fb20 	bl	80009ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003aa:	2028      	movs	r0, #40	@ 0x28
 80003ac:	f000 fb39 	bl	8000a22 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003b0:	bf00      	nop
 80003b2:	3720      	adds	r7, #32
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010800 	.word	0x40010800
 80003c0:	10110000 	.word	0x10110000
 80003c4:	40011000 	.word	0x40011000

080003c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BTN_Pin)
 80003d2:	88fb      	ldrh	r3, [r7, #6]
 80003d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003d8:	d102      	bne.n	80003e0 <HAL_GPIO_EXTI_Callback+0x18>
	{
		printf("Button Pressed\r\n");
 80003da:	4803      	ldr	r0, [pc, #12]	@ (80003e8 <HAL_GPIO_EXTI_Callback+0x20>)
 80003dc:	f002 f946 	bl	800266c <puts>
	}
}
 80003e0:	bf00      	nop
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	08003358 	.word	0x08003358

080003ec <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a08      	ldr	r2, [pc, #32]	@ (800041c <HAL_UART_RxCpltCallback+0x30>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d10a      	bne.n	8000414 <HAL_UART_RxCpltCallback+0x28>
	{
		printf("Key Pressed: %c\r\n", rx_data);
 80003fe:	4b08      	ldr	r3, [pc, #32]	@ (8000420 <HAL_UART_RxCpltCallback+0x34>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	4619      	mov	r1, r3
 8000404:	4807      	ldr	r0, [pc, #28]	@ (8000424 <HAL_UART_RxCpltCallback+0x38>)
 8000406:	f002 f8c9 	bl	800259c <iprintf>
		HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800040a:	2201      	movs	r2, #1
 800040c:	4904      	ldr	r1, [pc, #16]	@ (8000420 <HAL_UART_RxCpltCallback+0x34>)
 800040e:	4806      	ldr	r0, [pc, #24]	@ (8000428 <HAL_UART_RxCpltCallback+0x3c>)
 8000410:	f001 fa73 	bl	80018fa <HAL_UART_Receive_IT>

	}
}
 8000414:	bf00      	nop
 8000416:	3708      	adds	r7, #8
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40013800 	.word	0x40013800
 8000420:	20000114 	.word	0x20000114
 8000424:	08003368 	.word	0x08003368
 8000428:	20000084 	.word	0x20000084

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
}
 8000432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000434:	bf00      	nop
 8000436:	e7fd      	b.n	8000434 <Error_Handler+0x8>

08000438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043e:	4b15      	ldr	r3, [pc, #84]	@ (8000494 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a14      	ldr	r2, [pc, #80]	@ (8000494 <HAL_MspInit+0x5c>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6193      	str	r3, [r2, #24]
 800044a:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <HAL_MspInit+0x5c>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	4b0f      	ldr	r3, [pc, #60]	@ (8000494 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a0e      	ldr	r2, [pc, #56]	@ (8000494 <HAL_MspInit+0x5c>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000460:	61d3      	str	r3, [r2, #28]
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <HAL_MspInit+0x5c>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046e:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <HAL_MspInit+0x60>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	4a04      	ldr	r2, [pc, #16]	@ (8000498 <HAL_MspInit+0x60>)
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800048a:	bf00      	nop
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000
 8000498:	40010000 	.word	0x40010000

0800049c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08a      	sub	sp, #40	@ 0x28
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	f107 0318 	add.w	r3, r7, #24
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a35      	ldr	r2, [pc, #212]	@ (800058c <HAL_UART_MspInit+0xf0>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d13a      	bne.n	8000532 <HAL_UART_MspInit+0x96>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004bc:	4b34      	ldr	r3, [pc, #208]	@ (8000590 <HAL_UART_MspInit+0xf4>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a33      	ldr	r2, [pc, #204]	@ (8000590 <HAL_UART_MspInit+0xf4>)
 80004c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b31      	ldr	r3, [pc, #196]	@ (8000590 <HAL_UART_MspInit+0xf4>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004d0:	617b      	str	r3, [r7, #20]
 80004d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000590 <HAL_UART_MspInit+0xf4>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	4a2d      	ldr	r2, [pc, #180]	@ (8000590 <HAL_UART_MspInit+0xf4>)
 80004da:	f043 0304 	orr.w	r3, r3, #4
 80004de:	6193      	str	r3, [r2, #24]
 80004e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000590 <HAL_UART_MspInit+0xf4>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	f003 0304 	and.w	r3, r3, #4
 80004e8:	613b      	str	r3, [r7, #16]
 80004ea:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f2:	2302      	movs	r3, #2
 80004f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f6:	2303      	movs	r3, #3
 80004f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fa:	f107 0318 	add.w	r3, r7, #24
 80004fe:	4619      	mov	r1, r3
 8000500:	4824      	ldr	r0, [pc, #144]	@ (8000594 <HAL_UART_MspInit+0xf8>)
 8000502:	f000 fb5b 	bl	8000bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800050a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800050c:	2300      	movs	r3, #0
 800050e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000510:	2300      	movs	r3, #0
 8000512:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000514:	f107 0318 	add.w	r3, r7, #24
 8000518:	4619      	mov	r1, r3
 800051a:	481e      	ldr	r0, [pc, #120]	@ (8000594 <HAL_UART_MspInit+0xf8>)
 800051c:	f000 fb4e 	bl	8000bbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000520:	2200      	movs	r2, #0
 8000522:	2100      	movs	r1, #0
 8000524:	2025      	movs	r0, #37	@ 0x25
 8000526:	f000 fa60 	bl	80009ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800052a:	2025      	movs	r0, #37	@ 0x25
 800052c:	f000 fa79 	bl	8000a22 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000530:	e028      	b.n	8000584 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4a18      	ldr	r2, [pc, #96]	@ (8000598 <HAL_UART_MspInit+0xfc>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d123      	bne.n	8000584 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800053c:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <HAL_UART_MspInit+0xf4>)
 800053e:	69db      	ldr	r3, [r3, #28]
 8000540:	4a13      	ldr	r2, [pc, #76]	@ (8000590 <HAL_UART_MspInit+0xf4>)
 8000542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000546:	61d3      	str	r3, [r2, #28]
 8000548:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <HAL_UART_MspInit+0xf4>)
 800054a:	69db      	ldr	r3, [r3, #28]
 800054c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000554:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <HAL_UART_MspInit+0xf4>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	4a0d      	ldr	r2, [pc, #52]	@ (8000590 <HAL_UART_MspInit+0xf4>)
 800055a:	f043 0304 	orr.w	r3, r3, #4
 800055e:	6193      	str	r3, [r2, #24]
 8000560:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <HAL_UART_MspInit+0xf4>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	f003 0304 	and.w	r3, r3, #4
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800056c:	230c      	movs	r3, #12
 800056e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000570:	2302      	movs	r3, #2
 8000572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	2302      	movs	r3, #2
 8000576:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000578:	f107 0318 	add.w	r3, r7, #24
 800057c:	4619      	mov	r1, r3
 800057e:	4805      	ldr	r0, [pc, #20]	@ (8000594 <HAL_UART_MspInit+0xf8>)
 8000580:	f000 fb1c 	bl	8000bbc <HAL_GPIO_Init>
}
 8000584:	bf00      	nop
 8000586:	3728      	adds	r7, #40	@ 0x28
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40013800 	.word	0x40013800
 8000590:	40021000 	.word	0x40021000
 8000594:	40010800 	.word	0x40010800
 8000598:	40004400 	.word	0x40004400

0800059c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005a0:	bf00      	nop
 80005a2:	e7fd      	b.n	80005a0 <NMI_Handler+0x4>

080005a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <HardFault_Handler+0x4>

080005ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <MemManage_Handler+0x4>

080005b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <BusFault_Handler+0x4>

080005bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <UsageFault_Handler+0x4>

080005c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr

080005d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005ec:	f000 f90a 	bl	8000804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80005f8:	4802      	ldr	r0, [pc, #8]	@ (8000604 <USART1_IRQHandler+0x10>)
 80005fa:	f001 f9a3 	bl	8001944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80005fe:	bf00      	nop
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000084 	.word	0x20000084

08000608 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 800060c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000610:	f000 fc70 	bl	8000ef4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}

08000618 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	e00a      	b.n	8000640 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800062a:	f3af 8000 	nop.w
 800062e:	4601      	mov	r1, r0
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	1c5a      	adds	r2, r3, #1
 8000634:	60ba      	str	r2, [r7, #8]
 8000636:	b2ca      	uxtb	r2, r1
 8000638:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	3301      	adds	r3, #1
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697a      	ldr	r2, [r7, #20]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	429a      	cmp	r2, r3
 8000646:	dbf0      	blt.n	800062a <_read+0x12>
  }

  return len;
 8000648:	687b      	ldr	r3, [r7, #4]
}
 800064a:	4618      	mov	r0, r3
 800064c:	3718      	adds	r7, #24
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}

08000652 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000652:	b480      	push	{r7}
 8000654:	b083      	sub	sp, #12
 8000656:	af00      	add	r7, sp, #0
 8000658:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800065a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800065e:	4618      	mov	r0, r3
 8000660:	370c      	adds	r7, #12
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000678:	605a      	str	r2, [r3, #4]
  return 0;
 800067a:	2300      	movs	r3, #0
}
 800067c:	4618      	mov	r0, r3
 800067e:	370c      	adds	r7, #12
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr

08000686 <_isatty>:

int _isatty(int file)
{
 8000686:	b480      	push	{r7}
 8000688:	b083      	sub	sp, #12
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800068e:	2301      	movs	r3, #1
}
 8000690:	4618      	mov	r0, r3
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr

0800069a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800069a:	b480      	push	{r7}
 800069c:	b085      	sub	sp, #20
 800069e:	af00      	add	r7, sp, #0
 80006a0:	60f8      	str	r0, [r7, #12]
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
	...

080006b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006bc:	4a14      	ldr	r2, [pc, #80]	@ (8000710 <_sbrk+0x5c>)
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <_sbrk+0x60>)
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006c8:	4b13      	ldr	r3, [pc, #76]	@ (8000718 <_sbrk+0x64>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d102      	bne.n	80006d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006d0:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <_sbrk+0x64>)
 80006d2:	4a12      	ldr	r2, [pc, #72]	@ (800071c <_sbrk+0x68>)
 80006d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <_sbrk+0x64>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	4413      	add	r3, r2
 80006de:	693a      	ldr	r2, [r7, #16]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d207      	bcs.n	80006f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006e4:	f001 ffd2 	bl	800268c <__errno>
 80006e8:	4603      	mov	r3, r0
 80006ea:	220c      	movs	r2, #12
 80006ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006f2:	e009      	b.n	8000708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006fa:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <_sbrk+0x64>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	4a05      	ldr	r2, [pc, #20]	@ (8000718 <_sbrk+0x64>)
 8000704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000706:	68fb      	ldr	r3, [r7, #12]
}
 8000708:	4618      	mov	r0, r3
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20005000 	.word	0x20005000
 8000714:	00000400 	.word	0x00000400
 8000718:	20000118 	.word	0x20000118
 800071c:	20000270 	.word	0x20000270

08000720 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800072c:	f7ff fff8 	bl	8000720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000730:	480b      	ldr	r0, [pc, #44]	@ (8000760 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000732:	490c      	ldr	r1, [pc, #48]	@ (8000764 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000734:	4a0c      	ldr	r2, [pc, #48]	@ (8000768 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000738:	e002      	b.n	8000740 <LoopCopyDataInit>

0800073a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800073c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073e:	3304      	adds	r3, #4

08000740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000744:	d3f9      	bcc.n	800073a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000746:	4a09      	ldr	r2, [pc, #36]	@ (800076c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000748:	4c09      	ldr	r4, [pc, #36]	@ (8000770 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800074a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800074c:	e001      	b.n	8000752 <LoopFillZerobss>

0800074e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000750:	3204      	adds	r2, #4

08000752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000754:	d3fb      	bcc.n	800074e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000756:	f001 ff9f 	bl	8002698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800075a:	f7ff fd15 	bl	8000188 <main>
  bx lr
 800075e:	4770      	bx	lr
  ldr r0, =_sdata
 8000760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000764:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000768:	080033e4 	.word	0x080033e4
  ldr r2, =_sbss
 800076c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000770:	2000026c 	.word	0x2000026c

08000774 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC1_2_IRQHandler>
	...

08000778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800077c:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <HAL_Init+0x28>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a07      	ldr	r2, [pc, #28]	@ (80007a0 <HAL_Init+0x28>)
 8000782:	f043 0310 	orr.w	r3, r3, #16
 8000786:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000788:	2003      	movs	r0, #3
 800078a:	f000 f923 	bl	80009d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800078e:	2000      	movs	r0, #0
 8000790:	f000 f808 	bl	80007a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000794:	f7ff fe50 	bl	8000438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40022000 	.word	0x40022000

080007a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <HAL_InitTick+0x54>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <HAL_InitTick+0x58>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80007be:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f93b 	bl	8000a3e <HAL_SYSTICK_Config>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e00e      	b.n	80007f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b0f      	cmp	r3, #15
 80007d6:	d80a      	bhi.n	80007ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d8:	2200      	movs	r2, #0
 80007da:	6879      	ldr	r1, [r7, #4]
 80007dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007e0:	f000 f903 	bl	80009ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007e4:	4a06      	ldr	r2, [pc, #24]	@ (8000800 <HAL_InitTick+0x5c>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000000 	.word	0x20000000
 80007fc:	20000008 	.word	0x20000008
 8000800:	20000004 	.word	0x20000004

08000804 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000808:	4b05      	ldr	r3, [pc, #20]	@ (8000820 <HAL_IncTick+0x1c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <HAL_IncTick+0x20>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4413      	add	r3, r2
 8000814:	4a03      	ldr	r2, [pc, #12]	@ (8000824 <HAL_IncTick+0x20>)
 8000816:	6013      	str	r3, [r2, #0]
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000008 	.word	0x20000008
 8000824:	2000011c 	.word	0x2000011c

08000828 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return uwTick;
 800082c:	4b02      	ldr	r3, [pc, #8]	@ (8000838 <HAL_GetTick+0x10>)
 800082e:	681b      	ldr	r3, [r3, #0]
}
 8000830:	4618      	mov	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	bc80      	pop	{r7}
 8000836:	4770      	bx	lr
 8000838:	2000011c 	.word	0x2000011c

0800083c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f003 0307 	and.w	r3, r3, #7
 800084a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000852:	68ba      	ldr	r2, [r7, #8]
 8000854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000858:	4013      	ands	r3, r2
 800085a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000864:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800086c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086e:	4a04      	ldr	r2, [pc, #16]	@ (8000880 <__NVIC_SetPriorityGrouping+0x44>)
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	60d3      	str	r3, [r2, #12]
}
 8000874:	bf00      	nop
 8000876:	3714      	adds	r7, #20
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000ed00 	.word	0xe000ed00

08000884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000888:	4b04      	ldr	r3, [pc, #16]	@ (800089c <__NVIC_GetPriorityGrouping+0x18>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	0a1b      	lsrs	r3, r3, #8
 800088e:	f003 0307 	and.w	r3, r3, #7
}
 8000892:	4618      	mov	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	db0b      	blt.n	80008ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	f003 021f 	and.w	r2, r3, #31
 80008b8:	4906      	ldr	r1, [pc, #24]	@ (80008d4 <__NVIC_EnableIRQ+0x34>)
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	095b      	lsrs	r3, r3, #5
 80008c0:	2001      	movs	r0, #1
 80008c2:	fa00 f202 	lsl.w	r2, r0, r2
 80008c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bc80      	pop	{r7}
 80008d2:	4770      	bx	lr
 80008d4:	e000e100 	.word	0xe000e100

080008d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	db0a      	blt.n	8000902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	490c      	ldr	r1, [pc, #48]	@ (8000924 <__NVIC_SetPriority+0x4c>)
 80008f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f6:	0112      	lsls	r2, r2, #4
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	440b      	add	r3, r1
 80008fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000900:	e00a      	b.n	8000918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b2da      	uxtb	r2, r3
 8000906:	4908      	ldr	r1, [pc, #32]	@ (8000928 <__NVIC_SetPriority+0x50>)
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	3b04      	subs	r3, #4
 8000910:	0112      	lsls	r2, r2, #4
 8000912:	b2d2      	uxtb	r2, r2
 8000914:	440b      	add	r3, r1
 8000916:	761a      	strb	r2, [r3, #24]
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000e100 	.word	0xe000e100
 8000928:	e000ed00 	.word	0xe000ed00

0800092c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800092c:	b480      	push	{r7}
 800092e:	b089      	sub	sp, #36	@ 0x24
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	f003 0307 	and.w	r3, r3, #7
 800093e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	f1c3 0307 	rsb	r3, r3, #7
 8000946:	2b04      	cmp	r3, #4
 8000948:	bf28      	it	cs
 800094a:	2304      	movcs	r3, #4
 800094c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	3304      	adds	r3, #4
 8000952:	2b06      	cmp	r3, #6
 8000954:	d902      	bls.n	800095c <NVIC_EncodePriority+0x30>
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3b03      	subs	r3, #3
 800095a:	e000      	b.n	800095e <NVIC_EncodePriority+0x32>
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000960:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	401a      	ands	r2, r3
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000974:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	fa01 f303 	lsl.w	r3, r1, r3
 800097e:	43d9      	mvns	r1, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	4313      	orrs	r3, r2
         );
}
 8000986:	4618      	mov	r0, r3
 8000988:	3724      	adds	r7, #36	@ 0x24
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3b01      	subs	r3, #1
 800099c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009a0:	d301      	bcc.n	80009a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009a2:	2301      	movs	r3, #1
 80009a4:	e00f      	b.n	80009c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <SysTick_Config+0x40>)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ae:	210f      	movs	r1, #15
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009b4:	f7ff ff90 	bl	80008d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009b8:	4b05      	ldr	r3, [pc, #20]	@ (80009d0 <SysTick_Config+0x40>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009be:	4b04      	ldr	r3, [pc, #16]	@ (80009d0 <SysTick_Config+0x40>)
 80009c0:	2207      	movs	r2, #7
 80009c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009c4:	2300      	movs	r3, #0
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	e000e010 	.word	0xe000e010

080009d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff2d 	bl	800083c <__NVIC_SetPriorityGrouping>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b086      	sub	sp, #24
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	4603      	mov	r3, r0
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009fc:	f7ff ff42 	bl	8000884 <__NVIC_GetPriorityGrouping>
 8000a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	68b9      	ldr	r1, [r7, #8]
 8000a06:	6978      	ldr	r0, [r7, #20]
 8000a08:	f7ff ff90 	bl	800092c <NVIC_EncodePriority>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff5f 	bl	80008d8 <__NVIC_SetPriority>
}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff35 	bl	80008a0 <__NVIC_EnableIRQ>
}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f7ff ffa2 	bl	8000990 <SysTick_Config>
 8000a4c:	4603      	mov	r3, r0
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000a56:	b480      	push	{r7}
 8000a58:	b085      	sub	sp, #20
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d008      	beq.n	8000a80 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2204      	movs	r2, #4
 8000a72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e020      	b.n	8000ac2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f022 020e 	bic.w	r2, r2, #14
 8000a8e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f022 0201 	bic.w	r2, r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000aae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2200      	movs	r2, #0
 8000abc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	2b02      	cmp	r3, #2
 8000ae2:	d005      	beq.n	8000af0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2204      	movs	r2, #4
 8000ae8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	73fb      	strb	r3, [r7, #15]
 8000aee:	e051      	b.n	8000b94 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	f022 020e 	bic.w	r2, r2, #14
 8000afe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f022 0201 	bic.w	r2, r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a22      	ldr	r2, [pc, #136]	@ (8000ba0 <HAL_DMA_Abort_IT+0xd4>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d029      	beq.n	8000b6e <HAL_DMA_Abort_IT+0xa2>
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a21      	ldr	r2, [pc, #132]	@ (8000ba4 <HAL_DMA_Abort_IT+0xd8>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d022      	beq.n	8000b6a <HAL_DMA_Abort_IT+0x9e>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba8 <HAL_DMA_Abort_IT+0xdc>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d01a      	beq.n	8000b64 <HAL_DMA_Abort_IT+0x98>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a1e      	ldr	r2, [pc, #120]	@ (8000bac <HAL_DMA_Abort_IT+0xe0>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d012      	beq.n	8000b5e <HAL_DMA_Abort_IT+0x92>
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000bb0 <HAL_DMA_Abort_IT+0xe4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d00a      	beq.n	8000b58 <HAL_DMA_Abort_IT+0x8c>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a1b      	ldr	r2, [pc, #108]	@ (8000bb4 <HAL_DMA_Abort_IT+0xe8>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d102      	bne.n	8000b52 <HAL_DMA_Abort_IT+0x86>
 8000b4c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000b50:	e00e      	b.n	8000b70 <HAL_DMA_Abort_IT+0xa4>
 8000b52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000b56:	e00b      	b.n	8000b70 <HAL_DMA_Abort_IT+0xa4>
 8000b58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b5c:	e008      	b.n	8000b70 <HAL_DMA_Abort_IT+0xa4>
 8000b5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b62:	e005      	b.n	8000b70 <HAL_DMA_Abort_IT+0xa4>
 8000b64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b68:	e002      	b.n	8000b70 <HAL_DMA_Abort_IT+0xa4>
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	e000      	b.n	8000b70 <HAL_DMA_Abort_IT+0xa4>
 8000b6e:	2301      	movs	r3, #1
 8000b70:	4a11      	ldr	r2, [pc, #68]	@ (8000bb8 <HAL_DMA_Abort_IT+0xec>)
 8000b72:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2201      	movs	r2, #1
 8000b78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d003      	beq.n	8000b94 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b90:	6878      	ldr	r0, [r7, #4]
 8000b92:	4798      	blx	r3
    } 
  }
  return status;
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40020008 	.word	0x40020008
 8000ba4:	4002001c 	.word	0x4002001c
 8000ba8:	40020030 	.word	0x40020030
 8000bac:	40020044 	.word	0x40020044
 8000bb0:	40020058 	.word	0x40020058
 8000bb4:	4002006c 	.word	0x4002006c
 8000bb8:	40020000 	.word	0x40020000

08000bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b08b      	sub	sp, #44	@ 0x2c
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bce:	e169      	b.n	8000ea4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	69fa      	ldr	r2, [r7, #28]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000be4:	69ba      	ldr	r2, [r7, #24]
 8000be6:	69fb      	ldr	r3, [r7, #28]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	f040 8158 	bne.w	8000e9e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	4a9a      	ldr	r2, [pc, #616]	@ (8000e5c <HAL_GPIO_Init+0x2a0>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d05e      	beq.n	8000cb6 <HAL_GPIO_Init+0xfa>
 8000bf8:	4a98      	ldr	r2, [pc, #608]	@ (8000e5c <HAL_GPIO_Init+0x2a0>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d875      	bhi.n	8000cea <HAL_GPIO_Init+0x12e>
 8000bfe:	4a98      	ldr	r2, [pc, #608]	@ (8000e60 <HAL_GPIO_Init+0x2a4>)
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d058      	beq.n	8000cb6 <HAL_GPIO_Init+0xfa>
 8000c04:	4a96      	ldr	r2, [pc, #600]	@ (8000e60 <HAL_GPIO_Init+0x2a4>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d86f      	bhi.n	8000cea <HAL_GPIO_Init+0x12e>
 8000c0a:	4a96      	ldr	r2, [pc, #600]	@ (8000e64 <HAL_GPIO_Init+0x2a8>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d052      	beq.n	8000cb6 <HAL_GPIO_Init+0xfa>
 8000c10:	4a94      	ldr	r2, [pc, #592]	@ (8000e64 <HAL_GPIO_Init+0x2a8>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d869      	bhi.n	8000cea <HAL_GPIO_Init+0x12e>
 8000c16:	4a94      	ldr	r2, [pc, #592]	@ (8000e68 <HAL_GPIO_Init+0x2ac>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d04c      	beq.n	8000cb6 <HAL_GPIO_Init+0xfa>
 8000c1c:	4a92      	ldr	r2, [pc, #584]	@ (8000e68 <HAL_GPIO_Init+0x2ac>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d863      	bhi.n	8000cea <HAL_GPIO_Init+0x12e>
 8000c22:	4a92      	ldr	r2, [pc, #584]	@ (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d046      	beq.n	8000cb6 <HAL_GPIO_Init+0xfa>
 8000c28:	4a90      	ldr	r2, [pc, #576]	@ (8000e6c <HAL_GPIO_Init+0x2b0>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d85d      	bhi.n	8000cea <HAL_GPIO_Init+0x12e>
 8000c2e:	2b12      	cmp	r3, #18
 8000c30:	d82a      	bhi.n	8000c88 <HAL_GPIO_Init+0xcc>
 8000c32:	2b12      	cmp	r3, #18
 8000c34:	d859      	bhi.n	8000cea <HAL_GPIO_Init+0x12e>
 8000c36:	a201      	add	r2, pc, #4	@ (adr r2, 8000c3c <HAL_GPIO_Init+0x80>)
 8000c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3c:	08000cb7 	.word	0x08000cb7
 8000c40:	08000c91 	.word	0x08000c91
 8000c44:	08000ca3 	.word	0x08000ca3
 8000c48:	08000ce5 	.word	0x08000ce5
 8000c4c:	08000ceb 	.word	0x08000ceb
 8000c50:	08000ceb 	.word	0x08000ceb
 8000c54:	08000ceb 	.word	0x08000ceb
 8000c58:	08000ceb 	.word	0x08000ceb
 8000c5c:	08000ceb 	.word	0x08000ceb
 8000c60:	08000ceb 	.word	0x08000ceb
 8000c64:	08000ceb 	.word	0x08000ceb
 8000c68:	08000ceb 	.word	0x08000ceb
 8000c6c:	08000ceb 	.word	0x08000ceb
 8000c70:	08000ceb 	.word	0x08000ceb
 8000c74:	08000ceb 	.word	0x08000ceb
 8000c78:	08000ceb 	.word	0x08000ceb
 8000c7c:	08000ceb 	.word	0x08000ceb
 8000c80:	08000c99 	.word	0x08000c99
 8000c84:	08000cad 	.word	0x08000cad
 8000c88:	4a79      	ldr	r2, [pc, #484]	@ (8000e70 <HAL_GPIO_Init+0x2b4>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d013      	beq.n	8000cb6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000c8e:	e02c      	b.n	8000cea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	623b      	str	r3, [r7, #32]
          break;
 8000c96:	e029      	b.n	8000cec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	623b      	str	r3, [r7, #32]
          break;
 8000ca0:	e024      	b.n	8000cec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	3308      	adds	r3, #8
 8000ca8:	623b      	str	r3, [r7, #32]
          break;
 8000caa:	e01f      	b.n	8000cec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	330c      	adds	r3, #12
 8000cb2:	623b      	str	r3, [r7, #32]
          break;
 8000cb4:	e01a      	b.n	8000cec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d102      	bne.n	8000cc4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000cbe:	2304      	movs	r3, #4
 8000cc0:	623b      	str	r3, [r7, #32]
          break;
 8000cc2:	e013      	b.n	8000cec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	689b      	ldr	r3, [r3, #8]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d105      	bne.n	8000cd8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ccc:	2308      	movs	r3, #8
 8000cce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	69fa      	ldr	r2, [r7, #28]
 8000cd4:	611a      	str	r2, [r3, #16]
          break;
 8000cd6:	e009      	b.n	8000cec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	615a      	str	r2, [r3, #20]
          break;
 8000ce2:	e003      	b.n	8000cec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
          break;
 8000ce8:	e000      	b.n	8000cec <HAL_GPIO_Init+0x130>
          break;
 8000cea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	2bff      	cmp	r3, #255	@ 0xff
 8000cf0:	d801      	bhi.n	8000cf6 <HAL_GPIO_Init+0x13a>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	e001      	b.n	8000cfa <HAL_GPIO_Init+0x13e>
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	2bff      	cmp	r3, #255	@ 0xff
 8000d00:	d802      	bhi.n	8000d08 <HAL_GPIO_Init+0x14c>
 8000d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	e002      	b.n	8000d0e <HAL_GPIO_Init+0x152>
 8000d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0a:	3b08      	subs	r3, #8
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	210f      	movs	r1, #15
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	fa01 f303 	lsl.w	r3, r1, r3
 8000d1c:	43db      	mvns	r3, r3
 8000d1e:	401a      	ands	r2, r3
 8000d20:	6a39      	ldr	r1, [r7, #32]
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	431a      	orrs	r2, r3
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 80b1 	beq.w	8000e9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d3c:	4b4d      	ldr	r3, [pc, #308]	@ (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a4c      	ldr	r2, [pc, #304]	@ (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b4a      	ldr	r3, [pc, #296]	@ (8000e74 <HAL_GPIO_Init+0x2b8>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	60bb      	str	r3, [r7, #8]
 8000d52:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000d54:	4a48      	ldr	r2, [pc, #288]	@ (8000e78 <HAL_GPIO_Init+0x2bc>)
 8000d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	3302      	adds	r3, #2
 8000d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d60:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	009b      	lsls	r3, r3, #2
 8000d6a:	220f      	movs	r2, #15
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	4013      	ands	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a40      	ldr	r2, [pc, #256]	@ (8000e7c <HAL_GPIO_Init+0x2c0>)
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d013      	beq.n	8000da8 <HAL_GPIO_Init+0x1ec>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a3f      	ldr	r2, [pc, #252]	@ (8000e80 <HAL_GPIO_Init+0x2c4>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d00d      	beq.n	8000da4 <HAL_GPIO_Init+0x1e8>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	4a3e      	ldr	r2, [pc, #248]	@ (8000e84 <HAL_GPIO_Init+0x2c8>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d007      	beq.n	8000da0 <HAL_GPIO_Init+0x1e4>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a3d      	ldr	r2, [pc, #244]	@ (8000e88 <HAL_GPIO_Init+0x2cc>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d101      	bne.n	8000d9c <HAL_GPIO_Init+0x1e0>
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e006      	b.n	8000daa <HAL_GPIO_Init+0x1ee>
 8000d9c:	2304      	movs	r3, #4
 8000d9e:	e004      	b.n	8000daa <HAL_GPIO_Init+0x1ee>
 8000da0:	2302      	movs	r3, #2
 8000da2:	e002      	b.n	8000daa <HAL_GPIO_Init+0x1ee>
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <HAL_GPIO_Init+0x1ee>
 8000da8:	2300      	movs	r3, #0
 8000daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000dac:	f002 0203 	and.w	r2, r2, #3
 8000db0:	0092      	lsls	r2, r2, #2
 8000db2:	4093      	lsls	r3, r2
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000dba:	492f      	ldr	r1, [pc, #188]	@ (8000e78 <HAL_GPIO_Init+0x2bc>)
 8000dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dbe:	089b      	lsrs	r3, r3, #2
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d006      	beq.n	8000de2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000dd6:	689a      	ldr	r2, [r3, #8]
 8000dd8:	492c      	ldr	r1, [pc, #176]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	608b      	str	r3, [r1, #8]
 8000de0:	e006      	b.n	8000df0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000de2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000de4:	689a      	ldr	r2, [r3, #8]
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	43db      	mvns	r3, r3
 8000dea:	4928      	ldr	r1, [pc, #160]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d006      	beq.n	8000e0a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dfc:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	4922      	ldr	r1, [pc, #136]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	60cb      	str	r3, [r1, #12]
 8000e08:	e006      	b.n	8000e18 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e0a:	4b20      	ldr	r3, [pc, #128]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e0c:	68da      	ldr	r2, [r3, #12]
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	491e      	ldr	r1, [pc, #120]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e14:	4013      	ands	r3, r2
 8000e16:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d006      	beq.n	8000e32 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e24:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	4918      	ldr	r1, [pc, #96]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e2a:	69bb      	ldr	r3, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	604b      	str	r3, [r1, #4]
 8000e30:	e006      	b.n	8000e40 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	4914      	ldr	r1, [pc, #80]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d021      	beq.n	8000e90 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	490e      	ldr	r1, [pc, #56]	@ (8000e8c <HAL_GPIO_Init+0x2d0>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	600b      	str	r3, [r1, #0]
 8000e58:	e021      	b.n	8000e9e <HAL_GPIO_Init+0x2e2>
 8000e5a:	bf00      	nop
 8000e5c:	10320000 	.word	0x10320000
 8000e60:	10310000 	.word	0x10310000
 8000e64:	10220000 	.word	0x10220000
 8000e68:	10210000 	.word	0x10210000
 8000e6c:	10120000 	.word	0x10120000
 8000e70:	10110000 	.word	0x10110000
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010000 	.word	0x40010000
 8000e7c:	40010800 	.word	0x40010800
 8000e80:	40010c00 	.word	0x40010c00
 8000e84:	40011000 	.word	0x40011000
 8000e88:	40011400 	.word	0x40011400
 8000e8c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e90:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	4909      	ldr	r1, [pc, #36]	@ (8000ec0 <HAL_GPIO_Init+0x304>)
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f47f ae8e 	bne.w	8000bd0 <HAL_GPIO_Init+0x14>
  }
}
 8000eb4:	bf00      	nop
 8000eb6:	bf00      	nop
 8000eb8:	372c      	adds	r7, #44	@ 0x2c
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	40010400 	.word	0x40010400

08000ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	807b      	strh	r3, [r7, #2]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed4:	787b      	ldrb	r3, [r7, #1]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d003      	beq.n	8000ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000eda:	887a      	ldrh	r2, [r7, #2]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ee0:	e003      	b.n	8000eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ee2:	887b      	ldrh	r3, [r7, #2]
 8000ee4:	041a      	lsls	r2, r3, #16
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	611a      	str	r2, [r3, #16]
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000efe:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f00:	695a      	ldr	r2, [r3, #20]
 8000f02:	88fb      	ldrh	r3, [r7, #6]
 8000f04:	4013      	ands	r3, r2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f0a:	4a05      	ldr	r2, [pc, #20]	@ (8000f20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fa58 	bl	80003c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f18:	bf00      	nop
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40010400 	.word	0x40010400

08000f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d101      	bne.n	8000f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e272      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 8087 	beq.w	8001052 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f44:	4b92      	ldr	r3, [pc, #584]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 030c 	and.w	r3, r3, #12
 8000f4c:	2b04      	cmp	r3, #4
 8000f4e:	d00c      	beq.n	8000f6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f50:	4b8f      	ldr	r3, [pc, #572]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 030c 	and.w	r3, r3, #12
 8000f58:	2b08      	cmp	r3, #8
 8000f5a:	d112      	bne.n	8000f82 <HAL_RCC_OscConfig+0x5e>
 8000f5c:	4b8c      	ldr	r3, [pc, #560]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f68:	d10b      	bne.n	8000f82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6a:	4b89      	ldr	r3, [pc, #548]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d06c      	beq.n	8001050 <HAL_RCC_OscConfig+0x12c>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d168      	bne.n	8001050 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e24c      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f8a:	d106      	bne.n	8000f9a <HAL_RCC_OscConfig+0x76>
 8000f8c:	4b80      	ldr	r3, [pc, #512]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a7f      	ldr	r2, [pc, #508]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	e02e      	b.n	8000ff8 <HAL_RCC_OscConfig+0xd4>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d10c      	bne.n	8000fbc <HAL_RCC_OscConfig+0x98>
 8000fa2:	4b7b      	ldr	r3, [pc, #492]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a7a      	ldr	r2, [pc, #488]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	4b78      	ldr	r3, [pc, #480]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a77      	ldr	r2, [pc, #476]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	e01d      	b.n	8000ff8 <HAL_RCC_OscConfig+0xd4>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fc4:	d10c      	bne.n	8000fe0 <HAL_RCC_OscConfig+0xbc>
 8000fc6:	4b72      	ldr	r3, [pc, #456]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a71      	ldr	r2, [pc, #452]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	4b6f      	ldr	r3, [pc, #444]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a6e      	ldr	r2, [pc, #440]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fdc:	6013      	str	r3, [r2, #0]
 8000fde:	e00b      	b.n	8000ff8 <HAL_RCC_OscConfig+0xd4>
 8000fe0:	4b6b      	ldr	r3, [pc, #428]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a6a      	ldr	r2, [pc, #424]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b68      	ldr	r3, [pc, #416]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a67      	ldr	r2, [pc, #412]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ff6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d013      	beq.n	8001028 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fc12 	bl	8000828 <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001008:	f7ff fc0e 	bl	8000828 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b64      	cmp	r3, #100	@ 0x64
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e200      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101a:	4b5d      	ldr	r3, [pc, #372]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d0f0      	beq.n	8001008 <HAL_RCC_OscConfig+0xe4>
 8001026:	e014      	b.n	8001052 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001028:	f7ff fbfe 	bl	8000828 <HAL_GetTick>
 800102c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800102e:	e008      	b.n	8001042 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001030:	f7ff fbfa 	bl	8000828 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b64      	cmp	r3, #100	@ 0x64
 800103c:	d901      	bls.n	8001042 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	e1ec      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001042:	4b53      	ldr	r3, [pc, #332]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d1f0      	bne.n	8001030 <HAL_RCC_OscConfig+0x10c>
 800104e:	e000      	b.n	8001052 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d063      	beq.n	8001126 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800105e:	4b4c      	ldr	r3, [pc, #304]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00b      	beq.n	8001082 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800106a:	4b49      	ldr	r3, [pc, #292]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f003 030c 	and.w	r3, r3, #12
 8001072:	2b08      	cmp	r3, #8
 8001074:	d11c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x18c>
 8001076:	4b46      	ldr	r3, [pc, #280]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d116      	bne.n	80010b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001082:	4b43      	ldr	r3, [pc, #268]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0302 	and.w	r3, r3, #2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <HAL_RCC_OscConfig+0x176>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	691b      	ldr	r3, [r3, #16]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d001      	beq.n	800109a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e1c0      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109a:	4b3d      	ldr	r3, [pc, #244]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4939      	ldr	r1, [pc, #228]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ae:	e03a      	b.n	8001126 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d020      	beq.n	80010fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010b8:	4b36      	ldr	r3, [pc, #216]	@ (8001194 <HAL_RCC_OscConfig+0x270>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010be:	f7ff fbb3 	bl	8000828 <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010c6:	f7ff fbaf 	bl	8000828 <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e1a1      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0f0      	beq.n	80010c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	4927      	ldr	r1, [pc, #156]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	4313      	orrs	r3, r2
 80010f6:	600b      	str	r3, [r1, #0]
 80010f8:	e015      	b.n	8001126 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010fa:	4b26      	ldr	r3, [pc, #152]	@ (8001194 <HAL_RCC_OscConfig+0x270>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001100:	f7ff fb92 	bl	8000828 <HAL_GetTick>
 8001104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001106:	e008      	b.n	800111a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001108:	f7ff fb8e 	bl	8000828 <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d901      	bls.n	800111a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001116:	2303      	movs	r3, #3
 8001118:	e180      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111a:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1f0      	bne.n	8001108 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0308 	and.w	r3, r3, #8
 800112e:	2b00      	cmp	r3, #0
 8001130:	d03a      	beq.n	80011a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d019      	beq.n	800116e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <HAL_RCC_OscConfig+0x274>)
 800113c:	2201      	movs	r2, #1
 800113e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001140:	f7ff fb72 	bl	8000828 <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001148:	f7ff fb6e 	bl	8000828 <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e160      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115a:	4b0d      	ldr	r3, [pc, #52]	@ (8001190 <HAL_RCC_OscConfig+0x26c>)
 800115c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f000 face 	bl	8001708 <RCC_Delay>
 800116c:	e01c      	b.n	80011a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <HAL_RCC_OscConfig+0x274>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001174:	f7ff fb58 	bl	8000828 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117a:	e00f      	b.n	800119c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117c:	f7ff fb54 	bl	8000828 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d908      	bls.n	800119c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e146      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000
 8001194:	42420000 	.word	0x42420000
 8001198:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119c:	4b92      	ldr	r3, [pc, #584]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800119e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e9      	bne.n	800117c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80a6 	beq.w	8001302 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ba:	4b8b      	ldr	r3, [pc, #556]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10d      	bne.n	80011e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	4b88      	ldr	r3, [pc, #544]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a87      	ldr	r2, [pc, #540]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b85      	ldr	r3, [pc, #532]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011de:	2301      	movs	r3, #1
 80011e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e2:	4b82      	ldr	r3, [pc, #520]	@ (80013ec <HAL_RCC_OscConfig+0x4c8>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d118      	bne.n	8001220 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ee:	4b7f      	ldr	r3, [pc, #508]	@ (80013ec <HAL_RCC_OscConfig+0x4c8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a7e      	ldr	r2, [pc, #504]	@ (80013ec <HAL_RCC_OscConfig+0x4c8>)
 80011f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011fa:	f7ff fb15 	bl	8000828 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001202:	f7ff fb11 	bl	8000828 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b64      	cmp	r3, #100	@ 0x64
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e103      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001214:	4b75      	ldr	r3, [pc, #468]	@ (80013ec <HAL_RCC_OscConfig+0x4c8>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x312>
 8001228:	4b6f      	ldr	r3, [pc, #444]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4a6e      	ldr	r2, [pc, #440]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	6213      	str	r3, [r2, #32]
 8001234:	e02d      	b.n	8001292 <HAL_RCC_OscConfig+0x36e>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10c      	bne.n	8001258 <HAL_RCC_OscConfig+0x334>
 800123e:	4b6a      	ldr	r3, [pc, #424]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	4a69      	ldr	r2, [pc, #420]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001244:	f023 0301 	bic.w	r3, r3, #1
 8001248:	6213      	str	r3, [r2, #32]
 800124a:	4b67      	ldr	r3, [pc, #412]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4a66      	ldr	r2, [pc, #408]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001250:	f023 0304 	bic.w	r3, r3, #4
 8001254:	6213      	str	r3, [r2, #32]
 8001256:	e01c      	b.n	8001292 <HAL_RCC_OscConfig+0x36e>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b05      	cmp	r3, #5
 800125e:	d10c      	bne.n	800127a <HAL_RCC_OscConfig+0x356>
 8001260:	4b61      	ldr	r3, [pc, #388]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	4a60      	ldr	r2, [pc, #384]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6213      	str	r3, [r2, #32]
 800126c:	4b5e      	ldr	r3, [pc, #376]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	6a1b      	ldr	r3, [r3, #32]
 8001270:	4a5d      	ldr	r2, [pc, #372]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	6213      	str	r3, [r2, #32]
 8001278:	e00b      	b.n	8001292 <HAL_RCC_OscConfig+0x36e>
 800127a:	4b5b      	ldr	r3, [pc, #364]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	6a1b      	ldr	r3, [r3, #32]
 800127e:	4a5a      	ldr	r2, [pc, #360]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001280:	f023 0301 	bic.w	r3, r3, #1
 8001284:	6213      	str	r3, [r2, #32]
 8001286:	4b58      	ldr	r3, [pc, #352]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	6a1b      	ldr	r3, [r3, #32]
 800128a:	4a57      	ldr	r2, [pc, #348]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	f023 0304 	bic.w	r3, r3, #4
 8001290:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d015      	beq.n	80012c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129a:	f7ff fac5 	bl	8000828 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a0:	e00a      	b.n	80012b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012a2:	f7ff fac1 	bl	8000828 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e0b1      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b8:	4b4b      	ldr	r3, [pc, #300]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0ee      	beq.n	80012a2 <HAL_RCC_OscConfig+0x37e>
 80012c4:	e014      	b.n	80012f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c6:	f7ff faaf 	bl	8000828 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012cc:	e00a      	b.n	80012e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ce:	f7ff faab 	bl	8000828 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012dc:	4293      	cmp	r3, r2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e09b      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e4:	4b40      	ldr	r3, [pc, #256]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1ee      	bne.n	80012ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d105      	bne.n	8001302 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012f6:	4b3c      	ldr	r3, [pc, #240]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	4a3b      	ldr	r2, [pc, #236]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80012fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001300:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8087 	beq.w	800141a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800130c:	4b36      	ldr	r3, [pc, #216]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b08      	cmp	r3, #8
 8001316:	d061      	beq.n	80013dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	69db      	ldr	r3, [r3, #28]
 800131c:	2b02      	cmp	r3, #2
 800131e:	d146      	bne.n	80013ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001320:	4b33      	ldr	r3, [pc, #204]	@ (80013f0 <HAL_RCC_OscConfig+0x4cc>)
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001326:	f7ff fa7f 	bl	8000828 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800132e:	f7ff fa7b 	bl	8000828 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e06d      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001340:	4b29      	ldr	r3, [pc, #164]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f0      	bne.n	800132e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001354:	d108      	bne.n	8001368 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001356:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	4921      	ldr	r1, [pc, #132]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001368:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a19      	ldr	r1, [r3, #32]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001378:	430b      	orrs	r3, r1
 800137a:	491b      	ldr	r1, [pc, #108]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001380:	4b1b      	ldr	r3, [pc, #108]	@ (80013f0 <HAL_RCC_OscConfig+0x4cc>)
 8001382:	2201      	movs	r2, #1
 8001384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001386:	f7ff fa4f 	bl	8000828 <HAL_GetTick>
 800138a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800138c:	e008      	b.n	80013a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800138e:	f7ff fa4b 	bl	8000828 <HAL_GetTick>
 8001392:	4602      	mov	r2, r0
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d901      	bls.n	80013a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800139c:	2303      	movs	r3, #3
 800139e:	e03d      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a0:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0f0      	beq.n	800138e <HAL_RCC_OscConfig+0x46a>
 80013ac:	e035      	b.n	800141a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <HAL_RCC_OscConfig+0x4cc>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b4:	f7ff fa38 	bl	8000828 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013bc:	f7ff fa34 	bl	8000828 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e026      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_RCC_OscConfig+0x4c4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x498>
 80013da:	e01e      	b.n	800141a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d107      	bne.n	80013f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e019      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
 80013e8:	40021000 	.word	0x40021000
 80013ec:	40007000 	.word	0x40007000
 80013f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80013f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001424 <HAL_RCC_OscConfig+0x500>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	429a      	cmp	r2, r3
 8001406:	d106      	bne.n	8001416 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	429a      	cmp	r2, r3
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e000      	b.n	800141c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021000 	.word	0x40021000

08001428 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e0d0      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800143c:	4b6a      	ldr	r3, [pc, #424]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d910      	bls.n	800146c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144a:	4b67      	ldr	r3, [pc, #412]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f023 0207 	bic.w	r2, r3, #7
 8001452:	4965      	ldr	r1, [pc, #404]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800145a:	4b63      	ldr	r3, [pc, #396]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	683a      	ldr	r2, [r7, #0]
 8001464:	429a      	cmp	r2, r3
 8001466:	d001      	beq.n	800146c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e0b8      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d020      	beq.n	80014ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001484:	4b59      	ldr	r3, [pc, #356]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4a58      	ldr	r2, [pc, #352]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 800148a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800148e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0308 	and.w	r3, r3, #8
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800149c:	4b53      	ldr	r3, [pc, #332]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a52      	ldr	r2, [pc, #328]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a8:	4b50      	ldr	r3, [pc, #320]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	494d      	ldr	r1, [pc, #308]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d040      	beq.n	8001548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d107      	bne.n	80014de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ce:	4b47      	ldr	r3, [pc, #284]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d115      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e07f      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014e6:	4b41      	ldr	r3, [pc, #260]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d109      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e073      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f6:	4b3d      	ldr	r3, [pc, #244]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e06b      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001506:	4b39      	ldr	r3, [pc, #228]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f023 0203 	bic.w	r2, r3, #3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4936      	ldr	r1, [pc, #216]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001518:	f7ff f986 	bl	8000828 <HAL_GetTick>
 800151c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800151e:	e00a      	b.n	8001536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001520:	f7ff f982 	bl	8000828 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800152e:	4293      	cmp	r3, r2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e053      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001536:	4b2d      	ldr	r3, [pc, #180]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 020c 	and.w	r2, r3, #12
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	429a      	cmp	r2, r3
 8001546:	d1eb      	bne.n	8001520 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001548:	4b27      	ldr	r3, [pc, #156]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	429a      	cmp	r2, r3
 8001554:	d210      	bcs.n	8001578 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001556:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f023 0207 	bic.w	r2, r3, #7
 800155e:	4922      	ldr	r1, [pc, #136]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	4313      	orrs	r3, r2
 8001564:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	683a      	ldr	r2, [r7, #0]
 8001570:	429a      	cmp	r2, r3
 8001572:	d001      	beq.n	8001578 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e032      	b.n	80015de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001584:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4916      	ldr	r1, [pc, #88]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d009      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015a2:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	00db      	lsls	r3, r3, #3
 80015b0:	490e      	ldr	r1, [pc, #56]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015b6:	f000 f821 	bl	80015fc <HAL_RCC_GetSysClockFreq>
 80015ba:	4602      	mov	r2, r0
 80015bc:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <HAL_RCC_ClockConfig+0x1c4>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	490a      	ldr	r1, [pc, #40]	@ (80015f0 <HAL_RCC_ClockConfig+0x1c8>)
 80015c8:	5ccb      	ldrb	r3, [r1, r3]
 80015ca:	fa22 f303 	lsr.w	r3, r2, r3
 80015ce:	4a09      	ldr	r2, [pc, #36]	@ (80015f4 <HAL_RCC_ClockConfig+0x1cc>)
 80015d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015d2:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <HAL_RCC_ClockConfig+0x1d0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff f8e4 	bl	80007a4 <HAL_InitTick>

  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40022000 	.word	0x40022000
 80015ec:	40021000 	.word	0x40021000
 80015f0:	0800337c 	.word	0x0800337c
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000004 	.word	0x20000004

080015fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b087      	sub	sp, #28
 8001600:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001616:	4b1e      	ldr	r3, [pc, #120]	@ (8001690 <HAL_RCC_GetSysClockFreq+0x94>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b04      	cmp	r3, #4
 8001624:	d002      	beq.n	800162c <HAL_RCC_GetSysClockFreq+0x30>
 8001626:	2b08      	cmp	r3, #8
 8001628:	d003      	beq.n	8001632 <HAL_RCC_GetSysClockFreq+0x36>
 800162a:	e027      	b.n	800167c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800162c:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x98>)
 800162e:	613b      	str	r3, [r7, #16]
      break;
 8001630:	e027      	b.n	8001682 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	0c9b      	lsrs	r3, r3, #18
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	4a17      	ldr	r2, [pc, #92]	@ (8001698 <HAL_RCC_GetSysClockFreq+0x9c>)
 800163c:	5cd3      	ldrb	r3, [r2, r3]
 800163e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d010      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800164a:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <HAL_RCC_GetSysClockFreq+0x94>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	0c5b      	lsrs	r3, r3, #17
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	4a11      	ldr	r2, [pc, #68]	@ (800169c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001656:	5cd3      	ldrb	r3, [r2, r3]
 8001658:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a0d      	ldr	r2, [pc, #52]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x98>)
 800165e:	fb03 f202 	mul.w	r2, r3, r2
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	fbb2 f3f3 	udiv	r3, r2, r3
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e004      	b.n	8001676 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a0c      	ldr	r2, [pc, #48]	@ (80016a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001670:	fb02 f303 	mul.w	r3, r2, r3
 8001674:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	613b      	str	r3, [r7, #16]
      break;
 800167a:	e002      	b.n	8001682 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800167c:	4b05      	ldr	r3, [pc, #20]	@ (8001694 <HAL_RCC_GetSysClockFreq+0x98>)
 800167e:	613b      	str	r3, [r7, #16]
      break;
 8001680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001682:	693b      	ldr	r3, [r7, #16]
}
 8001684:	4618      	mov	r0, r3
 8001686:	371c      	adds	r7, #28
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	007a1200 	.word	0x007a1200
 8001698:	08003394 	.word	0x08003394
 800169c:	080033a4 	.word	0x080033a4
 80016a0:	003d0900 	.word	0x003d0900

080016a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016a8:	4b02      	ldr	r3, [pc, #8]	@ (80016b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	20000000 	.word	0x20000000

080016b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016bc:	f7ff fff2 	bl	80016a4 <HAL_RCC_GetHCLKFreq>
 80016c0:	4602      	mov	r2, r0
 80016c2:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	0a1b      	lsrs	r3, r3, #8
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	4903      	ldr	r1, [pc, #12]	@ (80016dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80016ce:	5ccb      	ldrb	r3, [r1, r3]
 80016d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000
 80016dc:	0800338c 	.word	0x0800338c

080016e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016e4:	f7ff ffde 	bl	80016a4 <HAL_RCC_GetHCLKFreq>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	0adb      	lsrs	r3, r3, #11
 80016f0:	f003 0307 	and.w	r3, r3, #7
 80016f4:	4903      	ldr	r1, [pc, #12]	@ (8001704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016f6:	5ccb      	ldrb	r3, [r1, r3]
 80016f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40021000 	.word	0x40021000
 8001704:	0800338c 	.word	0x0800338c

08001708 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001710:	4b0a      	ldr	r3, [pc, #40]	@ (800173c <RCC_Delay+0x34>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <RCC_Delay+0x38>)
 8001716:	fba2 2303 	umull	r2, r3, r2, r3
 800171a:	0a5b      	lsrs	r3, r3, #9
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001724:	bf00      	nop
  }
  while (Delay --);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	60fa      	str	r2, [r7, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f9      	bne.n	8001724 <RCC_Delay+0x1c>
}
 8001730:	bf00      	nop
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	20000000 	.word	0x20000000
 8001740:	10624dd3 	.word	0x10624dd3

08001744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e042      	b.n	80017dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d106      	bne.n	8001770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7fe fe96 	bl	800049c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2224      	movs	r2, #36	@ 0x24
 8001774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	68da      	ldr	r2, [r3, #12]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 fdb7 	bl	80022fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	691a      	ldr	r2, [r3, #16]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800179c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80017ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80017bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2220      	movs	r2, #32
 80017c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2220      	movs	r2, #32
 80017d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08a      	sub	sp, #40	@ 0x28
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	4613      	mov	r3, r2
 80017f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b20      	cmp	r3, #32
 8001802:	d175      	bne.n	80018f0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <HAL_UART_Transmit+0x2c>
 800180a:	88fb      	ldrh	r3, [r7, #6]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e06e      	b.n	80018f2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2221      	movs	r2, #33	@ 0x21
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001822:	f7ff f801 	bl	8000828 <HAL_GetTick>
 8001826:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	88fa      	ldrh	r2, [r7, #6]
 800182c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	88fa      	ldrh	r2, [r7, #6]
 8001832:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800183c:	d108      	bne.n	8001850 <HAL_UART_Transmit+0x6c>
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d104      	bne.n	8001850 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	e003      	b.n	8001858 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001854:	2300      	movs	r3, #0
 8001856:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001858:	e02e      	b.n	80018b8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2200      	movs	r2, #0
 8001862:	2180      	movs	r1, #128	@ 0x80
 8001864:	68f8      	ldr	r0, [r7, #12]
 8001866:	f000 fb1c 	bl	8001ea2 <UART_WaitOnFlagUntilTimeout>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2220      	movs	r2, #32
 8001874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e03a      	b.n	80018f2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10b      	bne.n	800189a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	461a      	mov	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001890:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	3302      	adds	r3, #2
 8001896:	61bb      	str	r3, [r7, #24]
 8001898:	e007      	b.n	80018aa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	781a      	ldrb	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	3301      	adds	r3, #1
 80018a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3b01      	subs	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80018bc:	b29b      	uxth	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1cb      	bne.n	800185a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2200      	movs	r2, #0
 80018ca:	2140      	movs	r1, #64	@ 0x40
 80018cc:	68f8      	ldr	r0, [r7, #12]
 80018ce:	f000 fae8 	bl	8001ea2 <UART_WaitOnFlagUntilTimeout>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d005      	beq.n	80018e4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2220      	movs	r2, #32
 80018dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e006      	b.n	80018f2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2220      	movs	r2, #32
 80018e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e000      	b.n	80018f2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80018f0:	2302      	movs	r3, #2
  }
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3720      	adds	r7, #32
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b084      	sub	sp, #16
 80018fe:	af00      	add	r7, sp, #0
 8001900:	60f8      	str	r0, [r7, #12]
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	4613      	mov	r3, r2
 8001906:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b20      	cmp	r3, #32
 8001912:	d112      	bne.n	800193a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <HAL_UART_Receive_IT+0x26>
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e00b      	b.n	800193c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	461a      	mov	r2, r3
 800192e:	68b9      	ldr	r1, [r7, #8]
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 fb0f 	bl	8001f54 <UART_Start_Receive_IT>
 8001936:	4603      	mov	r3, r0
 8001938:	e000      	b.n	800193c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800193a:	2302      	movs	r3, #2
  }
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b0ba      	sub	sp, #232	@ 0xe8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
 8001966:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001982:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10f      	bne.n	80019aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800198a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800198e:	f003 0320 	and.w	r3, r3, #32
 8001992:	2b00      	cmp	r3, #0
 8001994:	d009      	beq.n	80019aa <HAL_UART_IRQHandler+0x66>
 8001996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800199a:	f003 0320 	and.w	r3, r3, #32
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fbec 	bl	8002180 <UART_Receive_IT>
      return;
 80019a8:	e25b      	b.n	8001e62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80019aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80de 	beq.w	8001b70 <HAL_UART_IRQHandler+0x22c>
 80019b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d106      	bne.n	80019ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80019c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80019c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80d1 	beq.w	8001b70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80019ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_UART_IRQHandler+0xae>
 80019da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80019de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	f043 0201 	orr.w	r2, r3, #1
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80019f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <HAL_UART_IRQHandler+0xd2>
 80019fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001a02:	f003 0301 	and.w	r3, r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d005      	beq.n	8001a16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	f043 0202 	orr.w	r2, r3, #2
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00b      	beq.n	8001a3a <HAL_UART_IRQHandler+0xf6>
 8001a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	f043 0204 	orr.w	r2, r3, #4
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d011      	beq.n	8001a6a <HAL_UART_IRQHandler+0x126>
 8001a46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001a52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d005      	beq.n	8001a6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	f043 0208 	orr.w	r2, r3, #8
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 81f2 	beq.w	8001e58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <HAL_UART_IRQHandler+0x14e>
 8001a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 fb77 	bl	8002180 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf14      	ite	ne
 8001aa0:	2301      	movne	r3, #1
 8001aa2:	2300      	moveq	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d103      	bne.n	8001abe <HAL_UART_IRQHandler+0x17a>
 8001ab6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d04f      	beq.n	8001b5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fa81 	bl	8001fc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d041      	beq.n	8001b56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	3314      	adds	r3, #20
 8001ad8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001adc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001ae0:	e853 3f00 	ldrex	r3, [r3]
 8001ae4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001ae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001aec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001af0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	3314      	adds	r3, #20
 8001afa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001afe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001b02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001b0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001b0e:	e841 2300 	strex	r3, r2, [r1]
 8001b12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001b16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d1d9      	bne.n	8001ad2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d013      	beq.n	8001b4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d24 <HAL_UART_IRQHandler+0x3e0>)
 8001b2c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe ffca 	bl	8000acc <HAL_DMA_Abort_IT>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d016      	beq.n	8001b6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b4c:	e00e      	b.n	8001b6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f993 	bl	8001e7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b54:	e00a      	b.n	8001b6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f98f 	bl	8001e7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b5c:	e006      	b.n	8001b6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f98b 	bl	8001e7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001b6a:	e175      	b.n	8001e58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b6c:	bf00      	nop
    return;
 8001b6e:	e173      	b.n	8001e58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	f040 814f 	bne.w	8001e18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8148 	beq.w	8001e18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 8141 	beq.w	8001e18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	f000 80b6 	beq.w	8001d28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001bc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 8145 	beq.w	8001e5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001bd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	f080 813e 	bcs.w	8001e5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001be6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b20      	cmp	r3, #32
 8001bf0:	f000 8088 	beq.w	8001d04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	330c      	adds	r3, #12
 8001bfa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c02:	e853 3f00 	ldrex	r3, [r3]
 8001c06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001c0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001c0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	330c      	adds	r3, #12
 8001c1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001c20:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001c24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c28:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001c2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001c30:	e841 2300 	strex	r3, r2, [r1]
 8001c34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1d9      	bne.n	8001bf4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	3314      	adds	r3, #20
 8001c46:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c4a:	e853 3f00 	ldrex	r3, [r3]
 8001c4e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001c50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001c52:	f023 0301 	bic.w	r3, r3, #1
 8001c56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3314      	adds	r3, #20
 8001c60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001c64:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001c68:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c6a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001c6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001c70:	e841 2300 	strex	r3, r2, [r1]
 8001c74:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001c76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1e1      	bne.n	8001c40 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3314      	adds	r3, #20
 8001c82:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c86:	e853 3f00 	ldrex	r3, [r3]
 8001c8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001c8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001c92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	3314      	adds	r3, #20
 8001c9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001ca0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ca2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ca4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001ca6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001ca8:	e841 2300 	strex	r3, r2, [r1]
 8001cac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001cae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1e3      	bne.n	8001c7c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	330c      	adds	r3, #12
 8001cc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ccc:	e853 3f00 	ldrex	r3, [r3]
 8001cd0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001cd4:	f023 0310 	bic.w	r3, r3, #16
 8001cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	330c      	adds	r3, #12
 8001ce2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001ce6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001ce8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001cec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001cee:	e841 2300 	strex	r3, r2, [r1]
 8001cf2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001cf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1e3      	bne.n	8001cc2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fea9 	bl	8000a56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2202      	movs	r2, #2
 8001d08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f8b6 	bl	8001e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001d20:	e09c      	b.n	8001e5c <HAL_UART_IRQHandler+0x518>
 8001d22:	bf00      	nop
 8001d24:	0800208b 	.word	0x0800208b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	f000 808e 	beq.w	8001e60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001d44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 8089 	beq.w	8001e60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	330c      	adds	r3, #12
 8001d54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d58:	e853 3f00 	ldrex	r3, [r3]
 8001d5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	330c      	adds	r3, #12
 8001d6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001d72:	647a      	str	r2, [r7, #68]	@ 0x44
 8001d74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001d78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d7a:	e841 2300 	strex	r3, r2, [r1]
 8001d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1e3      	bne.n	8001d4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3314      	adds	r3, #20
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	e853 3f00 	ldrex	r3, [r3]
 8001d94:	623b      	str	r3, [r7, #32]
   return(result);
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	3314      	adds	r3, #20
 8001da6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001daa:	633a      	str	r2, [r7, #48]	@ 0x30
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001db0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001db2:	e841 2300 	strex	r3, r2, [r1]
 8001db6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1e3      	bne.n	8001d86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2220      	movs	r2, #32
 8001dc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	330c      	adds	r3, #12
 8001dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	e853 3f00 	ldrex	r3, [r3]
 8001dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f023 0310 	bic.w	r3, r3, #16
 8001de2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	330c      	adds	r3, #12
 8001dec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001df0:	61fa      	str	r2, [r7, #28]
 8001df2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001df4:	69b9      	ldr	r1, [r7, #24]
 8001df6:	69fa      	ldr	r2, [r7, #28]
 8001df8:	e841 2300 	strex	r3, r2, [r1]
 8001dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1e3      	bne.n	8001dcc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001e0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001e0e:	4619      	mov	r1, r3
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f83b 	bl	8001e8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001e16:	e023      	b.n	8001e60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d009      	beq.n	8001e38 <HAL_UART_IRQHandler+0x4f4>
 8001e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d003      	beq.n	8001e38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f000 f93e 	bl	80020b2 <UART_Transmit_IT>
    return;
 8001e36:	e014      	b.n	8001e62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00e      	beq.n	8001e62 <HAL_UART_IRQHandler+0x51e>
 8001e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f97d 	bl	8002150 <UART_EndTransmit_IT>
    return;
 8001e56:	e004      	b.n	8001e62 <HAL_UART_IRQHandler+0x51e>
    return;
 8001e58:	bf00      	nop
 8001e5a:	e002      	b.n	8001e62 <HAL_UART_IRQHandler+0x51e>
      return;
 8001e5c:	bf00      	nop
 8001e5e:	e000      	b.n	8001e62 <HAL_UART_IRQHandler+0x51e>
      return;
 8001e60:	bf00      	nop
  }
}
 8001e62:	37e8      	adds	r7, #232	@ 0xe8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	60f8      	str	r0, [r7, #12]
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eb2:	e03b      	b.n	8001f2c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eb4:	6a3b      	ldr	r3, [r7, #32]
 8001eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001eba:	d037      	beq.n	8001f2c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ebc:	f7fe fcb4 	bl	8000828 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	6a3a      	ldr	r2, [r7, #32]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d302      	bcc.n	8001ed2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001ecc:	6a3b      	ldr	r3, [r7, #32]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e03a      	b.n	8001f4c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d023      	beq.n	8001f2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	2b80      	cmp	r3, #128	@ 0x80
 8001ee8:	d020      	beq.n	8001f2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b40      	cmp	r3, #64	@ 0x40
 8001eee:	d01d      	beq.n	8001f2c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d116      	bne.n	8001f2c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 f856 	bl	8001fc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2208      	movs	r2, #8
 8001f1e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e00f      	b.n	8001f4c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	4013      	ands	r3, r2
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	bf0c      	ite	eq
 8001f3c:	2301      	moveq	r3, #1
 8001f3e:	2300      	movne	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	461a      	mov	r2, r3
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d0b4      	beq.n	8001eb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	88fa      	ldrh	r2, [r7, #6]
 8001f6c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	88fa      	ldrh	r2, [r7, #6]
 8001f72:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2222      	movs	r2, #34	@ 0x22
 8001f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d007      	beq.n	8001f9a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f98:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	695a      	ldr	r2, [r3, #20]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f042 0201 	orr.w	r2, r2, #1
 8001fa8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f042 0220 	orr.w	r2, r2, #32
 8001fb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b095      	sub	sp, #84	@ 0x54
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	330c      	adds	r3, #12
 8001fd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fd8:	e853 3f00 	ldrex	r3, [r3]
 8001fdc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fe0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001fe4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	330c      	adds	r3, #12
 8001fec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001fee:	643a      	str	r2, [r7, #64]	@ 0x40
 8001ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ff2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001ff4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001ff6:	e841 2300 	strex	r3, r2, [r1]
 8001ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1e5      	bne.n	8001fce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	3314      	adds	r3, #20
 8002008:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800200a:	6a3b      	ldr	r3, [r7, #32]
 800200c:	e853 3f00 	ldrex	r3, [r3]
 8002010:	61fb      	str	r3, [r7, #28]
   return(result);
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	64bb      	str	r3, [r7, #72]	@ 0x48
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3314      	adds	r3, #20
 8002020:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002022:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002024:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002026:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002028:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800202a:	e841 2300 	strex	r3, r2, [r1]
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1e5      	bne.n	8002002 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	2b01      	cmp	r3, #1
 800203c:	d119      	bne.n	8002072 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	330c      	adds	r3, #12
 8002044:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	e853 3f00 	ldrex	r3, [r3]
 800204c:	60bb      	str	r3, [r7, #8]
   return(result);
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	f023 0310 	bic.w	r3, r3, #16
 8002054:	647b      	str	r3, [r7, #68]	@ 0x44
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	330c      	adds	r3, #12
 800205c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800205e:	61ba      	str	r2, [r7, #24]
 8002060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002062:	6979      	ldr	r1, [r7, #20]
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	e841 2300 	strex	r3, r2, [r1]
 800206a:	613b      	str	r3, [r7, #16]
   return(result);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1e5      	bne.n	800203e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002080:	bf00      	nop
 8002082:	3754      	adds	r7, #84	@ 0x54
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b084      	sub	sp, #16
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002096:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2200      	movs	r2, #0
 80020a2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	f7ff fee8 	bl	8001e7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80020aa:	bf00      	nop
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b21      	cmp	r3, #33	@ 0x21
 80020c4:	d13e      	bne.n	8002144 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020ce:	d114      	bne.n	80020fa <UART_Transmit_IT+0x48>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d110      	bne.n	80020fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	461a      	mov	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	1c9a      	adds	r2, r3, #2
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	621a      	str	r2, [r3, #32]
 80020f8:	e008      	b.n	800210c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	1c59      	adds	r1, r3, #1
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6211      	str	r1, [r2, #32]
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002110:	b29b      	uxth	r3, r3
 8002112:	3b01      	subs	r3, #1
 8002114:	b29b      	uxth	r3, r3
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	4619      	mov	r1, r3
 800211a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10f      	bne.n	8002140 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800212e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800213e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002140:	2300      	movs	r3, #0
 8002142:	e000      	b.n	8002146 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002144:	2302      	movs	r3, #2
  }
}
 8002146:	4618      	mov	r0, r3
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002166:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fe79 	bl	8001e68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b08c      	sub	sp, #48	@ 0x30
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b22      	cmp	r3, #34	@ 0x22
 8002192:	f040 80ae 	bne.w	80022f2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800219e:	d117      	bne.n	80021d0 <UART_Receive_IT+0x50>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d113      	bne.n	80021d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021be:	b29a      	uxth	r2, r3
 80021c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c8:	1c9a      	adds	r2, r3, #2
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80021ce:	e026      	b.n	800221e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021e2:	d007      	beq.n	80021f4 <UART_Receive_IT+0x74>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <UART_Receive_IT+0x82>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d106      	bne.n	8002202 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021fe:	701a      	strb	r2, [r3, #0]
 8002200:	e008      	b.n	8002214 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	b2db      	uxtb	r3, r3
 800220a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800220e:	b2da      	uxtb	r2, r3
 8002210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002212:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29b      	uxth	r3, r3
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4619      	mov	r1, r3
 800222c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800222e:	2b00      	cmp	r3, #0
 8002230:	d15d      	bne.n	80022ee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68da      	ldr	r2, [r3, #12]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0220 	bic.w	r2, r2, #32
 8002240:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002250:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	695a      	ldr	r2, [r3, #20]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 0201 	bic.w	r2, r2, #1
 8002260:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2220      	movs	r2, #32
 8002266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002274:	2b01      	cmp	r3, #1
 8002276:	d135      	bne.n	80022e4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	330c      	adds	r3, #12
 8002284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	e853 3f00 	ldrex	r3, [r3]
 800228c:	613b      	str	r3, [r7, #16]
   return(result);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f023 0310 	bic.w	r3, r3, #16
 8002294:	627b      	str	r3, [r7, #36]	@ 0x24
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	330c      	adds	r3, #12
 800229c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800229e:	623a      	str	r2, [r7, #32]
 80022a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a2:	69f9      	ldr	r1, [r7, #28]
 80022a4:	6a3a      	ldr	r2, [r7, #32]
 80022a6:	e841 2300 	strex	r3, r2, [r1]
 80022aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1e5      	bne.n	800227e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0310 	and.w	r3, r3, #16
 80022bc:	2b10      	cmp	r3, #16
 80022be:	d10a      	bne.n	80022d6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80022da:	4619      	mov	r1, r3
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff fdd5 	bl	8001e8c <HAL_UARTEx_RxEventCallback>
 80022e2:	e002      	b.n	80022ea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7fe f881 	bl	80003ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	e002      	b.n	80022f4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
  }
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3730      	adds	r7, #48	@ 0x30
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002336:	f023 030c 	bic.w	r3, r3, #12
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	68b9      	ldr	r1, [r7, #8]
 8002340:	430b      	orrs	r3, r1
 8002342:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a2c      	ldr	r2, [pc, #176]	@ (8002410 <UART_SetConfig+0x114>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d103      	bne.n	800236c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002364:	f7ff f9bc 	bl	80016e0 <HAL_RCC_GetPCLK2Freq>
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	e002      	b.n	8002372 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800236c:	f7ff f9a4 	bl	80016b8 <HAL_RCC_GetPCLK1Freq>
 8002370:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	009a      	lsls	r2, r3, #2
 800237c:	441a      	add	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	4a22      	ldr	r2, [pc, #136]	@ (8002414 <UART_SetConfig+0x118>)
 800238a:	fba2 2303 	umull	r2, r3, r2, r3
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	0119      	lsls	r1, r3, #4
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	009a      	lsls	r2, r3, #2
 800239c:	441a      	add	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80023a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002414 <UART_SetConfig+0x118>)
 80023aa:	fba3 0302 	umull	r0, r3, r3, r2
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2064      	movs	r0, #100	@ 0x64
 80023b2:	fb00 f303 	mul.w	r3, r0, r3
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	3332      	adds	r3, #50	@ 0x32
 80023bc:	4a15      	ldr	r2, [pc, #84]	@ (8002414 <UART_SetConfig+0x118>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023c8:	4419      	add	r1, r3
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	009a      	lsls	r2, r3, #2
 80023d4:	441a      	add	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80023e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <UART_SetConfig+0x118>)
 80023e2:	fba3 0302 	umull	r0, r3, r3, r2
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	2064      	movs	r0, #100	@ 0x64
 80023ea:	fb00 f303 	mul.w	r3, r0, r3
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	3332      	adds	r3, #50	@ 0x32
 80023f4:	4a07      	ldr	r2, [pc, #28]	@ (8002414 <UART_SetConfig+0x118>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	f003 020f 	and.w	r2, r3, #15
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	440a      	add	r2, r1
 8002406:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002408:	bf00      	nop
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40013800 	.word	0x40013800
 8002414:	51eb851f 	.word	0x51eb851f

08002418 <std>:
 8002418:	2300      	movs	r3, #0
 800241a:	b510      	push	{r4, lr}
 800241c:	4604      	mov	r4, r0
 800241e:	e9c0 3300 	strd	r3, r3, [r0]
 8002422:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002426:	6083      	str	r3, [r0, #8]
 8002428:	8181      	strh	r1, [r0, #12]
 800242a:	6643      	str	r3, [r0, #100]	@ 0x64
 800242c:	81c2      	strh	r2, [r0, #14]
 800242e:	6183      	str	r3, [r0, #24]
 8002430:	4619      	mov	r1, r3
 8002432:	2208      	movs	r2, #8
 8002434:	305c      	adds	r0, #92	@ 0x5c
 8002436:	f000 f921 	bl	800267c <memset>
 800243a:	4b0d      	ldr	r3, [pc, #52]	@ (8002470 <std+0x58>)
 800243c:	6224      	str	r4, [r4, #32]
 800243e:	6263      	str	r3, [r4, #36]	@ 0x24
 8002440:	4b0c      	ldr	r3, [pc, #48]	@ (8002474 <std+0x5c>)
 8002442:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002444:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <std+0x60>)
 8002446:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002448:	4b0c      	ldr	r3, [pc, #48]	@ (800247c <std+0x64>)
 800244a:	6323      	str	r3, [r4, #48]	@ 0x30
 800244c:	4b0c      	ldr	r3, [pc, #48]	@ (8002480 <std+0x68>)
 800244e:	429c      	cmp	r4, r3
 8002450:	d006      	beq.n	8002460 <std+0x48>
 8002452:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002456:	4294      	cmp	r4, r2
 8002458:	d002      	beq.n	8002460 <std+0x48>
 800245a:	33d0      	adds	r3, #208	@ 0xd0
 800245c:	429c      	cmp	r4, r3
 800245e:	d105      	bne.n	800246c <std+0x54>
 8002460:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002468:	f000 b93a 	b.w	80026e0 <__retarget_lock_init_recursive>
 800246c:	bd10      	pop	{r4, pc}
 800246e:	bf00      	nop
 8002470:	08002f31 	.word	0x08002f31
 8002474:	08002f53 	.word	0x08002f53
 8002478:	08002f8b 	.word	0x08002f8b
 800247c:	08002faf 	.word	0x08002faf
 8002480:	20000120 	.word	0x20000120

08002484 <stdio_exit_handler>:
 8002484:	4a02      	ldr	r2, [pc, #8]	@ (8002490 <stdio_exit_handler+0xc>)
 8002486:	4903      	ldr	r1, [pc, #12]	@ (8002494 <stdio_exit_handler+0x10>)
 8002488:	4803      	ldr	r0, [pc, #12]	@ (8002498 <stdio_exit_handler+0x14>)
 800248a:	f000 b869 	b.w	8002560 <_fwalk_sglue>
 800248e:	bf00      	nop
 8002490:	2000000c 	.word	0x2000000c
 8002494:	08002ec9 	.word	0x08002ec9
 8002498:	2000001c 	.word	0x2000001c

0800249c <cleanup_stdio>:
 800249c:	6841      	ldr	r1, [r0, #4]
 800249e:	4b0c      	ldr	r3, [pc, #48]	@ (80024d0 <cleanup_stdio+0x34>)
 80024a0:	b510      	push	{r4, lr}
 80024a2:	4299      	cmp	r1, r3
 80024a4:	4604      	mov	r4, r0
 80024a6:	d001      	beq.n	80024ac <cleanup_stdio+0x10>
 80024a8:	f000 fd0e 	bl	8002ec8 <_fflush_r>
 80024ac:	68a1      	ldr	r1, [r4, #8]
 80024ae:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <cleanup_stdio+0x38>)
 80024b0:	4299      	cmp	r1, r3
 80024b2:	d002      	beq.n	80024ba <cleanup_stdio+0x1e>
 80024b4:	4620      	mov	r0, r4
 80024b6:	f000 fd07 	bl	8002ec8 <_fflush_r>
 80024ba:	68e1      	ldr	r1, [r4, #12]
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <cleanup_stdio+0x3c>)
 80024be:	4299      	cmp	r1, r3
 80024c0:	d004      	beq.n	80024cc <cleanup_stdio+0x30>
 80024c2:	4620      	mov	r0, r4
 80024c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024c8:	f000 bcfe 	b.w	8002ec8 <_fflush_r>
 80024cc:	bd10      	pop	{r4, pc}
 80024ce:	bf00      	nop
 80024d0:	20000120 	.word	0x20000120
 80024d4:	20000188 	.word	0x20000188
 80024d8:	200001f0 	.word	0x200001f0

080024dc <global_stdio_init.part.0>:
 80024dc:	b510      	push	{r4, lr}
 80024de:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <global_stdio_init.part.0+0x30>)
 80024e0:	4c0b      	ldr	r4, [pc, #44]	@ (8002510 <global_stdio_init.part.0+0x34>)
 80024e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002514 <global_stdio_init.part.0+0x38>)
 80024e4:	4620      	mov	r0, r4
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	2104      	movs	r1, #4
 80024ea:	2200      	movs	r2, #0
 80024ec:	f7ff ff94 	bl	8002418 <std>
 80024f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80024f4:	2201      	movs	r2, #1
 80024f6:	2109      	movs	r1, #9
 80024f8:	f7ff ff8e 	bl	8002418 <std>
 80024fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002500:	2202      	movs	r2, #2
 8002502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002506:	2112      	movs	r1, #18
 8002508:	f7ff bf86 	b.w	8002418 <std>
 800250c:	20000258 	.word	0x20000258
 8002510:	20000120 	.word	0x20000120
 8002514:	08002485 	.word	0x08002485

08002518 <__sfp_lock_acquire>:
 8002518:	4801      	ldr	r0, [pc, #4]	@ (8002520 <__sfp_lock_acquire+0x8>)
 800251a:	f000 b8e2 	b.w	80026e2 <__retarget_lock_acquire_recursive>
 800251e:	bf00      	nop
 8002520:	2000025d 	.word	0x2000025d

08002524 <__sfp_lock_release>:
 8002524:	4801      	ldr	r0, [pc, #4]	@ (800252c <__sfp_lock_release+0x8>)
 8002526:	f000 b8dd 	b.w	80026e4 <__retarget_lock_release_recursive>
 800252a:	bf00      	nop
 800252c:	2000025d 	.word	0x2000025d

08002530 <__sinit>:
 8002530:	b510      	push	{r4, lr}
 8002532:	4604      	mov	r4, r0
 8002534:	f7ff fff0 	bl	8002518 <__sfp_lock_acquire>
 8002538:	6a23      	ldr	r3, [r4, #32]
 800253a:	b11b      	cbz	r3, 8002544 <__sinit+0x14>
 800253c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002540:	f7ff bff0 	b.w	8002524 <__sfp_lock_release>
 8002544:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <__sinit+0x28>)
 8002546:	6223      	str	r3, [r4, #32]
 8002548:	4b04      	ldr	r3, [pc, #16]	@ (800255c <__sinit+0x2c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f5      	bne.n	800253c <__sinit+0xc>
 8002550:	f7ff ffc4 	bl	80024dc <global_stdio_init.part.0>
 8002554:	e7f2      	b.n	800253c <__sinit+0xc>
 8002556:	bf00      	nop
 8002558:	0800249d 	.word	0x0800249d
 800255c:	20000258 	.word	0x20000258

08002560 <_fwalk_sglue>:
 8002560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002564:	4607      	mov	r7, r0
 8002566:	4688      	mov	r8, r1
 8002568:	4614      	mov	r4, r2
 800256a:	2600      	movs	r6, #0
 800256c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002570:	f1b9 0901 	subs.w	r9, r9, #1
 8002574:	d505      	bpl.n	8002582 <_fwalk_sglue+0x22>
 8002576:	6824      	ldr	r4, [r4, #0]
 8002578:	2c00      	cmp	r4, #0
 800257a:	d1f7      	bne.n	800256c <_fwalk_sglue+0xc>
 800257c:	4630      	mov	r0, r6
 800257e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002582:	89ab      	ldrh	r3, [r5, #12]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d907      	bls.n	8002598 <_fwalk_sglue+0x38>
 8002588:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800258c:	3301      	adds	r3, #1
 800258e:	d003      	beq.n	8002598 <_fwalk_sglue+0x38>
 8002590:	4629      	mov	r1, r5
 8002592:	4638      	mov	r0, r7
 8002594:	47c0      	blx	r8
 8002596:	4306      	orrs	r6, r0
 8002598:	3568      	adds	r5, #104	@ 0x68
 800259a:	e7e9      	b.n	8002570 <_fwalk_sglue+0x10>

0800259c <iprintf>:
 800259c:	b40f      	push	{r0, r1, r2, r3}
 800259e:	b507      	push	{r0, r1, r2, lr}
 80025a0:	4906      	ldr	r1, [pc, #24]	@ (80025bc <iprintf+0x20>)
 80025a2:	ab04      	add	r3, sp, #16
 80025a4:	6808      	ldr	r0, [r1, #0]
 80025a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80025aa:	6881      	ldr	r1, [r0, #8]
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	f000 f8c1 	bl	8002734 <_vfiprintf_r>
 80025b2:	b003      	add	sp, #12
 80025b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80025b8:	b004      	add	sp, #16
 80025ba:	4770      	bx	lr
 80025bc:	20000018 	.word	0x20000018

080025c0 <_puts_r>:
 80025c0:	6a03      	ldr	r3, [r0, #32]
 80025c2:	b570      	push	{r4, r5, r6, lr}
 80025c4:	4605      	mov	r5, r0
 80025c6:	460e      	mov	r6, r1
 80025c8:	6884      	ldr	r4, [r0, #8]
 80025ca:	b90b      	cbnz	r3, 80025d0 <_puts_r+0x10>
 80025cc:	f7ff ffb0 	bl	8002530 <__sinit>
 80025d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80025d2:	07db      	lsls	r3, r3, #31
 80025d4:	d405      	bmi.n	80025e2 <_puts_r+0x22>
 80025d6:	89a3      	ldrh	r3, [r4, #12]
 80025d8:	0598      	lsls	r0, r3, #22
 80025da:	d402      	bmi.n	80025e2 <_puts_r+0x22>
 80025dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80025de:	f000 f880 	bl	80026e2 <__retarget_lock_acquire_recursive>
 80025e2:	89a3      	ldrh	r3, [r4, #12]
 80025e4:	0719      	lsls	r1, r3, #28
 80025e6:	d502      	bpl.n	80025ee <_puts_r+0x2e>
 80025e8:	6923      	ldr	r3, [r4, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d135      	bne.n	800265a <_puts_r+0x9a>
 80025ee:	4621      	mov	r1, r4
 80025f0:	4628      	mov	r0, r5
 80025f2:	f000 fd1f 	bl	8003034 <__swsetup_r>
 80025f6:	b380      	cbz	r0, 800265a <_puts_r+0x9a>
 80025f8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80025fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80025fe:	07da      	lsls	r2, r3, #31
 8002600:	d405      	bmi.n	800260e <_puts_r+0x4e>
 8002602:	89a3      	ldrh	r3, [r4, #12]
 8002604:	059b      	lsls	r3, r3, #22
 8002606:	d402      	bmi.n	800260e <_puts_r+0x4e>
 8002608:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800260a:	f000 f86b 	bl	80026e4 <__retarget_lock_release_recursive>
 800260e:	4628      	mov	r0, r5
 8002610:	bd70      	pop	{r4, r5, r6, pc}
 8002612:	2b00      	cmp	r3, #0
 8002614:	da04      	bge.n	8002620 <_puts_r+0x60>
 8002616:	69a2      	ldr	r2, [r4, #24]
 8002618:	429a      	cmp	r2, r3
 800261a:	dc17      	bgt.n	800264c <_puts_r+0x8c>
 800261c:	290a      	cmp	r1, #10
 800261e:	d015      	beq.n	800264c <_puts_r+0x8c>
 8002620:	6823      	ldr	r3, [r4, #0]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	6022      	str	r2, [r4, #0]
 8002626:	7019      	strb	r1, [r3, #0]
 8002628:	68a3      	ldr	r3, [r4, #8]
 800262a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800262e:	3b01      	subs	r3, #1
 8002630:	60a3      	str	r3, [r4, #8]
 8002632:	2900      	cmp	r1, #0
 8002634:	d1ed      	bne.n	8002612 <_puts_r+0x52>
 8002636:	2b00      	cmp	r3, #0
 8002638:	da11      	bge.n	800265e <_puts_r+0x9e>
 800263a:	4622      	mov	r2, r4
 800263c:	210a      	movs	r1, #10
 800263e:	4628      	mov	r0, r5
 8002640:	f000 fcb9 	bl	8002fb6 <__swbuf_r>
 8002644:	3001      	adds	r0, #1
 8002646:	d0d7      	beq.n	80025f8 <_puts_r+0x38>
 8002648:	250a      	movs	r5, #10
 800264a:	e7d7      	b.n	80025fc <_puts_r+0x3c>
 800264c:	4622      	mov	r2, r4
 800264e:	4628      	mov	r0, r5
 8002650:	f000 fcb1 	bl	8002fb6 <__swbuf_r>
 8002654:	3001      	adds	r0, #1
 8002656:	d1e7      	bne.n	8002628 <_puts_r+0x68>
 8002658:	e7ce      	b.n	80025f8 <_puts_r+0x38>
 800265a:	3e01      	subs	r6, #1
 800265c:	e7e4      	b.n	8002628 <_puts_r+0x68>
 800265e:	6823      	ldr	r3, [r4, #0]
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	6022      	str	r2, [r4, #0]
 8002664:	220a      	movs	r2, #10
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	e7ee      	b.n	8002648 <_puts_r+0x88>
	...

0800266c <puts>:
 800266c:	4b02      	ldr	r3, [pc, #8]	@ (8002678 <puts+0xc>)
 800266e:	4601      	mov	r1, r0
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	f7ff bfa5 	b.w	80025c0 <_puts_r>
 8002676:	bf00      	nop
 8002678:	20000018 	.word	0x20000018

0800267c <memset>:
 800267c:	4603      	mov	r3, r0
 800267e:	4402      	add	r2, r0
 8002680:	4293      	cmp	r3, r2
 8002682:	d100      	bne.n	8002686 <memset+0xa>
 8002684:	4770      	bx	lr
 8002686:	f803 1b01 	strb.w	r1, [r3], #1
 800268a:	e7f9      	b.n	8002680 <memset+0x4>

0800268c <__errno>:
 800268c:	4b01      	ldr	r3, [pc, #4]	@ (8002694 <__errno+0x8>)
 800268e:	6818      	ldr	r0, [r3, #0]
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	20000018 	.word	0x20000018

08002698 <__libc_init_array>:
 8002698:	b570      	push	{r4, r5, r6, lr}
 800269a:	2600      	movs	r6, #0
 800269c:	4d0c      	ldr	r5, [pc, #48]	@ (80026d0 <__libc_init_array+0x38>)
 800269e:	4c0d      	ldr	r4, [pc, #52]	@ (80026d4 <__libc_init_array+0x3c>)
 80026a0:	1b64      	subs	r4, r4, r5
 80026a2:	10a4      	asrs	r4, r4, #2
 80026a4:	42a6      	cmp	r6, r4
 80026a6:	d109      	bne.n	80026bc <__libc_init_array+0x24>
 80026a8:	f000 fe4a 	bl	8003340 <_init>
 80026ac:	2600      	movs	r6, #0
 80026ae:	4d0a      	ldr	r5, [pc, #40]	@ (80026d8 <__libc_init_array+0x40>)
 80026b0:	4c0a      	ldr	r4, [pc, #40]	@ (80026dc <__libc_init_array+0x44>)
 80026b2:	1b64      	subs	r4, r4, r5
 80026b4:	10a4      	asrs	r4, r4, #2
 80026b6:	42a6      	cmp	r6, r4
 80026b8:	d105      	bne.n	80026c6 <__libc_init_array+0x2e>
 80026ba:	bd70      	pop	{r4, r5, r6, pc}
 80026bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c0:	4798      	blx	r3
 80026c2:	3601      	adds	r6, #1
 80026c4:	e7ee      	b.n	80026a4 <__libc_init_array+0xc>
 80026c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80026ca:	4798      	blx	r3
 80026cc:	3601      	adds	r6, #1
 80026ce:	e7f2      	b.n	80026b6 <__libc_init_array+0x1e>
 80026d0:	080033dc 	.word	0x080033dc
 80026d4:	080033dc 	.word	0x080033dc
 80026d8:	080033dc 	.word	0x080033dc
 80026dc:	080033e0 	.word	0x080033e0

080026e0 <__retarget_lock_init_recursive>:
 80026e0:	4770      	bx	lr

080026e2 <__retarget_lock_acquire_recursive>:
 80026e2:	4770      	bx	lr

080026e4 <__retarget_lock_release_recursive>:
 80026e4:	4770      	bx	lr

080026e6 <__sfputc_r>:
 80026e6:	6893      	ldr	r3, [r2, #8]
 80026e8:	b410      	push	{r4}
 80026ea:	3b01      	subs	r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	6093      	str	r3, [r2, #8]
 80026f0:	da07      	bge.n	8002702 <__sfputc_r+0x1c>
 80026f2:	6994      	ldr	r4, [r2, #24]
 80026f4:	42a3      	cmp	r3, r4
 80026f6:	db01      	blt.n	80026fc <__sfputc_r+0x16>
 80026f8:	290a      	cmp	r1, #10
 80026fa:	d102      	bne.n	8002702 <__sfputc_r+0x1c>
 80026fc:	bc10      	pop	{r4}
 80026fe:	f000 bc5a 	b.w	8002fb6 <__swbuf_r>
 8002702:	6813      	ldr	r3, [r2, #0]
 8002704:	1c58      	adds	r0, r3, #1
 8002706:	6010      	str	r0, [r2, #0]
 8002708:	7019      	strb	r1, [r3, #0]
 800270a:	4608      	mov	r0, r1
 800270c:	bc10      	pop	{r4}
 800270e:	4770      	bx	lr

08002710 <__sfputs_r>:
 8002710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002712:	4606      	mov	r6, r0
 8002714:	460f      	mov	r7, r1
 8002716:	4614      	mov	r4, r2
 8002718:	18d5      	adds	r5, r2, r3
 800271a:	42ac      	cmp	r4, r5
 800271c:	d101      	bne.n	8002722 <__sfputs_r+0x12>
 800271e:	2000      	movs	r0, #0
 8002720:	e007      	b.n	8002732 <__sfputs_r+0x22>
 8002722:	463a      	mov	r2, r7
 8002724:	4630      	mov	r0, r6
 8002726:	f814 1b01 	ldrb.w	r1, [r4], #1
 800272a:	f7ff ffdc 	bl	80026e6 <__sfputc_r>
 800272e:	1c43      	adds	r3, r0, #1
 8002730:	d1f3      	bne.n	800271a <__sfputs_r+0xa>
 8002732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002734 <_vfiprintf_r>:
 8002734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002738:	460d      	mov	r5, r1
 800273a:	4614      	mov	r4, r2
 800273c:	4698      	mov	r8, r3
 800273e:	4606      	mov	r6, r0
 8002740:	b09d      	sub	sp, #116	@ 0x74
 8002742:	b118      	cbz	r0, 800274c <_vfiprintf_r+0x18>
 8002744:	6a03      	ldr	r3, [r0, #32]
 8002746:	b90b      	cbnz	r3, 800274c <_vfiprintf_r+0x18>
 8002748:	f7ff fef2 	bl	8002530 <__sinit>
 800274c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800274e:	07d9      	lsls	r1, r3, #31
 8002750:	d405      	bmi.n	800275e <_vfiprintf_r+0x2a>
 8002752:	89ab      	ldrh	r3, [r5, #12]
 8002754:	059a      	lsls	r2, r3, #22
 8002756:	d402      	bmi.n	800275e <_vfiprintf_r+0x2a>
 8002758:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800275a:	f7ff ffc2 	bl	80026e2 <__retarget_lock_acquire_recursive>
 800275e:	89ab      	ldrh	r3, [r5, #12]
 8002760:	071b      	lsls	r3, r3, #28
 8002762:	d501      	bpl.n	8002768 <_vfiprintf_r+0x34>
 8002764:	692b      	ldr	r3, [r5, #16]
 8002766:	b99b      	cbnz	r3, 8002790 <_vfiprintf_r+0x5c>
 8002768:	4629      	mov	r1, r5
 800276a:	4630      	mov	r0, r6
 800276c:	f000 fc62 	bl	8003034 <__swsetup_r>
 8002770:	b170      	cbz	r0, 8002790 <_vfiprintf_r+0x5c>
 8002772:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002774:	07dc      	lsls	r4, r3, #31
 8002776:	d504      	bpl.n	8002782 <_vfiprintf_r+0x4e>
 8002778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800277c:	b01d      	add	sp, #116	@ 0x74
 800277e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002782:	89ab      	ldrh	r3, [r5, #12]
 8002784:	0598      	lsls	r0, r3, #22
 8002786:	d4f7      	bmi.n	8002778 <_vfiprintf_r+0x44>
 8002788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800278a:	f7ff ffab 	bl	80026e4 <__retarget_lock_release_recursive>
 800278e:	e7f3      	b.n	8002778 <_vfiprintf_r+0x44>
 8002790:	2300      	movs	r3, #0
 8002792:	9309      	str	r3, [sp, #36]	@ 0x24
 8002794:	2320      	movs	r3, #32
 8002796:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800279a:	2330      	movs	r3, #48	@ 0x30
 800279c:	f04f 0901 	mov.w	r9, #1
 80027a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80027a4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002950 <_vfiprintf_r+0x21c>
 80027a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80027ac:	4623      	mov	r3, r4
 80027ae:	469a      	mov	sl, r3
 80027b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027b4:	b10a      	cbz	r2, 80027ba <_vfiprintf_r+0x86>
 80027b6:	2a25      	cmp	r2, #37	@ 0x25
 80027b8:	d1f9      	bne.n	80027ae <_vfiprintf_r+0x7a>
 80027ba:	ebba 0b04 	subs.w	fp, sl, r4
 80027be:	d00b      	beq.n	80027d8 <_vfiprintf_r+0xa4>
 80027c0:	465b      	mov	r3, fp
 80027c2:	4622      	mov	r2, r4
 80027c4:	4629      	mov	r1, r5
 80027c6:	4630      	mov	r0, r6
 80027c8:	f7ff ffa2 	bl	8002710 <__sfputs_r>
 80027cc:	3001      	adds	r0, #1
 80027ce:	f000 80a7 	beq.w	8002920 <_vfiprintf_r+0x1ec>
 80027d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80027d4:	445a      	add	r2, fp
 80027d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80027d8:	f89a 3000 	ldrb.w	r3, [sl]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 809f 	beq.w	8002920 <_vfiprintf_r+0x1ec>
 80027e2:	2300      	movs	r3, #0
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027ec:	f10a 0a01 	add.w	sl, sl, #1
 80027f0:	9304      	str	r3, [sp, #16]
 80027f2:	9307      	str	r3, [sp, #28]
 80027f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80027f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80027fa:	4654      	mov	r4, sl
 80027fc:	2205      	movs	r2, #5
 80027fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002802:	4853      	ldr	r0, [pc, #332]	@ (8002950 <_vfiprintf_r+0x21c>)
 8002804:	f000 fd46 	bl	8003294 <memchr>
 8002808:	9a04      	ldr	r2, [sp, #16]
 800280a:	b9d8      	cbnz	r0, 8002844 <_vfiprintf_r+0x110>
 800280c:	06d1      	lsls	r1, r2, #27
 800280e:	bf44      	itt	mi
 8002810:	2320      	movmi	r3, #32
 8002812:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002816:	0713      	lsls	r3, r2, #28
 8002818:	bf44      	itt	mi
 800281a:	232b      	movmi	r3, #43	@ 0x2b
 800281c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002820:	f89a 3000 	ldrb.w	r3, [sl]
 8002824:	2b2a      	cmp	r3, #42	@ 0x2a
 8002826:	d015      	beq.n	8002854 <_vfiprintf_r+0x120>
 8002828:	4654      	mov	r4, sl
 800282a:	2000      	movs	r0, #0
 800282c:	f04f 0c0a 	mov.w	ip, #10
 8002830:	9a07      	ldr	r2, [sp, #28]
 8002832:	4621      	mov	r1, r4
 8002834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002838:	3b30      	subs	r3, #48	@ 0x30
 800283a:	2b09      	cmp	r3, #9
 800283c:	d94b      	bls.n	80028d6 <_vfiprintf_r+0x1a2>
 800283e:	b1b0      	cbz	r0, 800286e <_vfiprintf_r+0x13a>
 8002840:	9207      	str	r2, [sp, #28]
 8002842:	e014      	b.n	800286e <_vfiprintf_r+0x13a>
 8002844:	eba0 0308 	sub.w	r3, r0, r8
 8002848:	fa09 f303 	lsl.w	r3, r9, r3
 800284c:	4313      	orrs	r3, r2
 800284e:	46a2      	mov	sl, r4
 8002850:	9304      	str	r3, [sp, #16]
 8002852:	e7d2      	b.n	80027fa <_vfiprintf_r+0xc6>
 8002854:	9b03      	ldr	r3, [sp, #12]
 8002856:	1d19      	adds	r1, r3, #4
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	9103      	str	r1, [sp, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	bfbb      	ittet	lt
 8002860:	425b      	neglt	r3, r3
 8002862:	f042 0202 	orrlt.w	r2, r2, #2
 8002866:	9307      	strge	r3, [sp, #28]
 8002868:	9307      	strlt	r3, [sp, #28]
 800286a:	bfb8      	it	lt
 800286c:	9204      	strlt	r2, [sp, #16]
 800286e:	7823      	ldrb	r3, [r4, #0]
 8002870:	2b2e      	cmp	r3, #46	@ 0x2e
 8002872:	d10a      	bne.n	800288a <_vfiprintf_r+0x156>
 8002874:	7863      	ldrb	r3, [r4, #1]
 8002876:	2b2a      	cmp	r3, #42	@ 0x2a
 8002878:	d132      	bne.n	80028e0 <_vfiprintf_r+0x1ac>
 800287a:	9b03      	ldr	r3, [sp, #12]
 800287c:	3402      	adds	r4, #2
 800287e:	1d1a      	adds	r2, r3, #4
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	9203      	str	r2, [sp, #12]
 8002884:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002888:	9305      	str	r3, [sp, #20]
 800288a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002954 <_vfiprintf_r+0x220>
 800288e:	2203      	movs	r2, #3
 8002890:	4650      	mov	r0, sl
 8002892:	7821      	ldrb	r1, [r4, #0]
 8002894:	f000 fcfe 	bl	8003294 <memchr>
 8002898:	b138      	cbz	r0, 80028aa <_vfiprintf_r+0x176>
 800289a:	2240      	movs	r2, #64	@ 0x40
 800289c:	9b04      	ldr	r3, [sp, #16]
 800289e:	eba0 000a 	sub.w	r0, r0, sl
 80028a2:	4082      	lsls	r2, r0
 80028a4:	4313      	orrs	r3, r2
 80028a6:	3401      	adds	r4, #1
 80028a8:	9304      	str	r3, [sp, #16]
 80028aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028ae:	2206      	movs	r2, #6
 80028b0:	4829      	ldr	r0, [pc, #164]	@ (8002958 <_vfiprintf_r+0x224>)
 80028b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80028b6:	f000 fced 	bl	8003294 <memchr>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	d03f      	beq.n	800293e <_vfiprintf_r+0x20a>
 80028be:	4b27      	ldr	r3, [pc, #156]	@ (800295c <_vfiprintf_r+0x228>)
 80028c0:	bb1b      	cbnz	r3, 800290a <_vfiprintf_r+0x1d6>
 80028c2:	9b03      	ldr	r3, [sp, #12]
 80028c4:	3307      	adds	r3, #7
 80028c6:	f023 0307 	bic.w	r3, r3, #7
 80028ca:	3308      	adds	r3, #8
 80028cc:	9303      	str	r3, [sp, #12]
 80028ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80028d0:	443b      	add	r3, r7
 80028d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80028d4:	e76a      	b.n	80027ac <_vfiprintf_r+0x78>
 80028d6:	460c      	mov	r4, r1
 80028d8:	2001      	movs	r0, #1
 80028da:	fb0c 3202 	mla	r2, ip, r2, r3
 80028de:	e7a8      	b.n	8002832 <_vfiprintf_r+0xfe>
 80028e0:	2300      	movs	r3, #0
 80028e2:	f04f 0c0a 	mov.w	ip, #10
 80028e6:	4619      	mov	r1, r3
 80028e8:	3401      	adds	r4, #1
 80028ea:	9305      	str	r3, [sp, #20]
 80028ec:	4620      	mov	r0, r4
 80028ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028f2:	3a30      	subs	r2, #48	@ 0x30
 80028f4:	2a09      	cmp	r2, #9
 80028f6:	d903      	bls.n	8002900 <_vfiprintf_r+0x1cc>
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0c6      	beq.n	800288a <_vfiprintf_r+0x156>
 80028fc:	9105      	str	r1, [sp, #20]
 80028fe:	e7c4      	b.n	800288a <_vfiprintf_r+0x156>
 8002900:	4604      	mov	r4, r0
 8002902:	2301      	movs	r3, #1
 8002904:	fb0c 2101 	mla	r1, ip, r1, r2
 8002908:	e7f0      	b.n	80028ec <_vfiprintf_r+0x1b8>
 800290a:	ab03      	add	r3, sp, #12
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	462a      	mov	r2, r5
 8002910:	4630      	mov	r0, r6
 8002912:	4b13      	ldr	r3, [pc, #76]	@ (8002960 <_vfiprintf_r+0x22c>)
 8002914:	a904      	add	r1, sp, #16
 8002916:	f3af 8000 	nop.w
 800291a:	4607      	mov	r7, r0
 800291c:	1c78      	adds	r0, r7, #1
 800291e:	d1d6      	bne.n	80028ce <_vfiprintf_r+0x19a>
 8002920:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002922:	07d9      	lsls	r1, r3, #31
 8002924:	d405      	bmi.n	8002932 <_vfiprintf_r+0x1fe>
 8002926:	89ab      	ldrh	r3, [r5, #12]
 8002928:	059a      	lsls	r2, r3, #22
 800292a:	d402      	bmi.n	8002932 <_vfiprintf_r+0x1fe>
 800292c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800292e:	f7ff fed9 	bl	80026e4 <__retarget_lock_release_recursive>
 8002932:	89ab      	ldrh	r3, [r5, #12]
 8002934:	065b      	lsls	r3, r3, #25
 8002936:	f53f af1f 	bmi.w	8002778 <_vfiprintf_r+0x44>
 800293a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800293c:	e71e      	b.n	800277c <_vfiprintf_r+0x48>
 800293e:	ab03      	add	r3, sp, #12
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	462a      	mov	r2, r5
 8002944:	4630      	mov	r0, r6
 8002946:	4b06      	ldr	r3, [pc, #24]	@ (8002960 <_vfiprintf_r+0x22c>)
 8002948:	a904      	add	r1, sp, #16
 800294a:	f000 f91f 	bl	8002b8c <_printf_i>
 800294e:	e7e4      	b.n	800291a <_vfiprintf_r+0x1e6>
 8002950:	080033a6 	.word	0x080033a6
 8002954:	080033ac 	.word	0x080033ac
 8002958:	080033b0 	.word	0x080033b0
 800295c:	00000000 	.word	0x00000000
 8002960:	08002711 	.word	0x08002711

08002964 <sbrk_aligned>:
 8002964:	b570      	push	{r4, r5, r6, lr}
 8002966:	4e0f      	ldr	r6, [pc, #60]	@ (80029a4 <sbrk_aligned+0x40>)
 8002968:	460c      	mov	r4, r1
 800296a:	6831      	ldr	r1, [r6, #0]
 800296c:	4605      	mov	r5, r0
 800296e:	b911      	cbnz	r1, 8002976 <sbrk_aligned+0x12>
 8002970:	f000 fc4c 	bl	800320c <_sbrk_r>
 8002974:	6030      	str	r0, [r6, #0]
 8002976:	4621      	mov	r1, r4
 8002978:	4628      	mov	r0, r5
 800297a:	f000 fc47 	bl	800320c <_sbrk_r>
 800297e:	1c43      	adds	r3, r0, #1
 8002980:	d103      	bne.n	800298a <sbrk_aligned+0x26>
 8002982:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002986:	4620      	mov	r0, r4
 8002988:	bd70      	pop	{r4, r5, r6, pc}
 800298a:	1cc4      	adds	r4, r0, #3
 800298c:	f024 0403 	bic.w	r4, r4, #3
 8002990:	42a0      	cmp	r0, r4
 8002992:	d0f8      	beq.n	8002986 <sbrk_aligned+0x22>
 8002994:	1a21      	subs	r1, r4, r0
 8002996:	4628      	mov	r0, r5
 8002998:	f000 fc38 	bl	800320c <_sbrk_r>
 800299c:	3001      	adds	r0, #1
 800299e:	d1f2      	bne.n	8002986 <sbrk_aligned+0x22>
 80029a0:	e7ef      	b.n	8002982 <sbrk_aligned+0x1e>
 80029a2:	bf00      	nop
 80029a4:	20000260 	.word	0x20000260

080029a8 <_malloc_r>:
 80029a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029ac:	1ccd      	adds	r5, r1, #3
 80029ae:	f025 0503 	bic.w	r5, r5, #3
 80029b2:	3508      	adds	r5, #8
 80029b4:	2d0c      	cmp	r5, #12
 80029b6:	bf38      	it	cc
 80029b8:	250c      	movcc	r5, #12
 80029ba:	2d00      	cmp	r5, #0
 80029bc:	4606      	mov	r6, r0
 80029be:	db01      	blt.n	80029c4 <_malloc_r+0x1c>
 80029c0:	42a9      	cmp	r1, r5
 80029c2:	d904      	bls.n	80029ce <_malloc_r+0x26>
 80029c4:	230c      	movs	r3, #12
 80029c6:	6033      	str	r3, [r6, #0]
 80029c8:	2000      	movs	r0, #0
 80029ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002aa4 <_malloc_r+0xfc>
 80029d2:	f000 faa1 	bl	8002f18 <__malloc_lock>
 80029d6:	f8d8 3000 	ldr.w	r3, [r8]
 80029da:	461c      	mov	r4, r3
 80029dc:	bb44      	cbnz	r4, 8002a30 <_malloc_r+0x88>
 80029de:	4629      	mov	r1, r5
 80029e0:	4630      	mov	r0, r6
 80029e2:	f7ff ffbf 	bl	8002964 <sbrk_aligned>
 80029e6:	1c43      	adds	r3, r0, #1
 80029e8:	4604      	mov	r4, r0
 80029ea:	d158      	bne.n	8002a9e <_malloc_r+0xf6>
 80029ec:	f8d8 4000 	ldr.w	r4, [r8]
 80029f0:	4627      	mov	r7, r4
 80029f2:	2f00      	cmp	r7, #0
 80029f4:	d143      	bne.n	8002a7e <_malloc_r+0xd6>
 80029f6:	2c00      	cmp	r4, #0
 80029f8:	d04b      	beq.n	8002a92 <_malloc_r+0xea>
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	4639      	mov	r1, r7
 80029fe:	4630      	mov	r0, r6
 8002a00:	eb04 0903 	add.w	r9, r4, r3
 8002a04:	f000 fc02 	bl	800320c <_sbrk_r>
 8002a08:	4581      	cmp	r9, r0
 8002a0a:	d142      	bne.n	8002a92 <_malloc_r+0xea>
 8002a0c:	6821      	ldr	r1, [r4, #0]
 8002a0e:	4630      	mov	r0, r6
 8002a10:	1a6d      	subs	r5, r5, r1
 8002a12:	4629      	mov	r1, r5
 8002a14:	f7ff ffa6 	bl	8002964 <sbrk_aligned>
 8002a18:	3001      	adds	r0, #1
 8002a1a:	d03a      	beq.n	8002a92 <_malloc_r+0xea>
 8002a1c:	6823      	ldr	r3, [r4, #0]
 8002a1e:	442b      	add	r3, r5
 8002a20:	6023      	str	r3, [r4, #0]
 8002a22:	f8d8 3000 	ldr.w	r3, [r8]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	bb62      	cbnz	r2, 8002a84 <_malloc_r+0xdc>
 8002a2a:	f8c8 7000 	str.w	r7, [r8]
 8002a2e:	e00f      	b.n	8002a50 <_malloc_r+0xa8>
 8002a30:	6822      	ldr	r2, [r4, #0]
 8002a32:	1b52      	subs	r2, r2, r5
 8002a34:	d420      	bmi.n	8002a78 <_malloc_r+0xd0>
 8002a36:	2a0b      	cmp	r2, #11
 8002a38:	d917      	bls.n	8002a6a <_malloc_r+0xc2>
 8002a3a:	1961      	adds	r1, r4, r5
 8002a3c:	42a3      	cmp	r3, r4
 8002a3e:	6025      	str	r5, [r4, #0]
 8002a40:	bf18      	it	ne
 8002a42:	6059      	strne	r1, [r3, #4]
 8002a44:	6863      	ldr	r3, [r4, #4]
 8002a46:	bf08      	it	eq
 8002a48:	f8c8 1000 	streq.w	r1, [r8]
 8002a4c:	5162      	str	r2, [r4, r5]
 8002a4e:	604b      	str	r3, [r1, #4]
 8002a50:	4630      	mov	r0, r6
 8002a52:	f000 fa67 	bl	8002f24 <__malloc_unlock>
 8002a56:	f104 000b 	add.w	r0, r4, #11
 8002a5a:	1d23      	adds	r3, r4, #4
 8002a5c:	f020 0007 	bic.w	r0, r0, #7
 8002a60:	1ac2      	subs	r2, r0, r3
 8002a62:	bf1c      	itt	ne
 8002a64:	1a1b      	subne	r3, r3, r0
 8002a66:	50a3      	strne	r3, [r4, r2]
 8002a68:	e7af      	b.n	80029ca <_malloc_r+0x22>
 8002a6a:	6862      	ldr	r2, [r4, #4]
 8002a6c:	42a3      	cmp	r3, r4
 8002a6e:	bf0c      	ite	eq
 8002a70:	f8c8 2000 	streq.w	r2, [r8]
 8002a74:	605a      	strne	r2, [r3, #4]
 8002a76:	e7eb      	b.n	8002a50 <_malloc_r+0xa8>
 8002a78:	4623      	mov	r3, r4
 8002a7a:	6864      	ldr	r4, [r4, #4]
 8002a7c:	e7ae      	b.n	80029dc <_malloc_r+0x34>
 8002a7e:	463c      	mov	r4, r7
 8002a80:	687f      	ldr	r7, [r7, #4]
 8002a82:	e7b6      	b.n	80029f2 <_malloc_r+0x4a>
 8002a84:	461a      	mov	r2, r3
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	42a3      	cmp	r3, r4
 8002a8a:	d1fb      	bne.n	8002a84 <_malloc_r+0xdc>
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	6053      	str	r3, [r2, #4]
 8002a90:	e7de      	b.n	8002a50 <_malloc_r+0xa8>
 8002a92:	230c      	movs	r3, #12
 8002a94:	4630      	mov	r0, r6
 8002a96:	6033      	str	r3, [r6, #0]
 8002a98:	f000 fa44 	bl	8002f24 <__malloc_unlock>
 8002a9c:	e794      	b.n	80029c8 <_malloc_r+0x20>
 8002a9e:	6005      	str	r5, [r0, #0]
 8002aa0:	e7d6      	b.n	8002a50 <_malloc_r+0xa8>
 8002aa2:	bf00      	nop
 8002aa4:	20000264 	.word	0x20000264

08002aa8 <_printf_common>:
 8002aa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002aac:	4616      	mov	r6, r2
 8002aae:	4698      	mov	r8, r3
 8002ab0:	688a      	ldr	r2, [r1, #8]
 8002ab2:	690b      	ldr	r3, [r1, #16]
 8002ab4:	4607      	mov	r7, r0
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	bfb8      	it	lt
 8002aba:	4613      	movlt	r3, r2
 8002abc:	6033      	str	r3, [r6, #0]
 8002abe:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002ac2:	460c      	mov	r4, r1
 8002ac4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ac8:	b10a      	cbz	r2, 8002ace <_printf_common+0x26>
 8002aca:	3301      	adds	r3, #1
 8002acc:	6033      	str	r3, [r6, #0]
 8002ace:	6823      	ldr	r3, [r4, #0]
 8002ad0:	0699      	lsls	r1, r3, #26
 8002ad2:	bf42      	ittt	mi
 8002ad4:	6833      	ldrmi	r3, [r6, #0]
 8002ad6:	3302      	addmi	r3, #2
 8002ad8:	6033      	strmi	r3, [r6, #0]
 8002ada:	6825      	ldr	r5, [r4, #0]
 8002adc:	f015 0506 	ands.w	r5, r5, #6
 8002ae0:	d106      	bne.n	8002af0 <_printf_common+0x48>
 8002ae2:	f104 0a19 	add.w	sl, r4, #25
 8002ae6:	68e3      	ldr	r3, [r4, #12]
 8002ae8:	6832      	ldr	r2, [r6, #0]
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	42ab      	cmp	r3, r5
 8002aee:	dc2b      	bgt.n	8002b48 <_printf_common+0xa0>
 8002af0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002af4:	6822      	ldr	r2, [r4, #0]
 8002af6:	3b00      	subs	r3, #0
 8002af8:	bf18      	it	ne
 8002afa:	2301      	movne	r3, #1
 8002afc:	0692      	lsls	r2, r2, #26
 8002afe:	d430      	bmi.n	8002b62 <_printf_common+0xba>
 8002b00:	4641      	mov	r1, r8
 8002b02:	4638      	mov	r0, r7
 8002b04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002b08:	47c8      	blx	r9
 8002b0a:	3001      	adds	r0, #1
 8002b0c:	d023      	beq.n	8002b56 <_printf_common+0xae>
 8002b0e:	6823      	ldr	r3, [r4, #0]
 8002b10:	6922      	ldr	r2, [r4, #16]
 8002b12:	f003 0306 	and.w	r3, r3, #6
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	bf14      	ite	ne
 8002b1a:	2500      	movne	r5, #0
 8002b1c:	6833      	ldreq	r3, [r6, #0]
 8002b1e:	f04f 0600 	mov.w	r6, #0
 8002b22:	bf08      	it	eq
 8002b24:	68e5      	ldreq	r5, [r4, #12]
 8002b26:	f104 041a 	add.w	r4, r4, #26
 8002b2a:	bf08      	it	eq
 8002b2c:	1aed      	subeq	r5, r5, r3
 8002b2e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002b32:	bf08      	it	eq
 8002b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	bfc4      	itt	gt
 8002b3c:	1a9b      	subgt	r3, r3, r2
 8002b3e:	18ed      	addgt	r5, r5, r3
 8002b40:	42b5      	cmp	r5, r6
 8002b42:	d11a      	bne.n	8002b7a <_printf_common+0xd2>
 8002b44:	2000      	movs	r0, #0
 8002b46:	e008      	b.n	8002b5a <_printf_common+0xb2>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	4652      	mov	r2, sl
 8002b4c:	4641      	mov	r1, r8
 8002b4e:	4638      	mov	r0, r7
 8002b50:	47c8      	blx	r9
 8002b52:	3001      	adds	r0, #1
 8002b54:	d103      	bne.n	8002b5e <_printf_common+0xb6>
 8002b56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b5e:	3501      	adds	r5, #1
 8002b60:	e7c1      	b.n	8002ae6 <_printf_common+0x3e>
 8002b62:	2030      	movs	r0, #48	@ 0x30
 8002b64:	18e1      	adds	r1, r4, r3
 8002b66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002b70:	4422      	add	r2, r4
 8002b72:	3302      	adds	r3, #2
 8002b74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002b78:	e7c2      	b.n	8002b00 <_printf_common+0x58>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	4622      	mov	r2, r4
 8002b7e:	4641      	mov	r1, r8
 8002b80:	4638      	mov	r0, r7
 8002b82:	47c8      	blx	r9
 8002b84:	3001      	adds	r0, #1
 8002b86:	d0e6      	beq.n	8002b56 <_printf_common+0xae>
 8002b88:	3601      	adds	r6, #1
 8002b8a:	e7d9      	b.n	8002b40 <_printf_common+0x98>

08002b8c <_printf_i>:
 8002b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b90:	7e0f      	ldrb	r7, [r1, #24]
 8002b92:	4691      	mov	r9, r2
 8002b94:	2f78      	cmp	r7, #120	@ 0x78
 8002b96:	4680      	mov	r8, r0
 8002b98:	460c      	mov	r4, r1
 8002b9a:	469a      	mov	sl, r3
 8002b9c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002b9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002ba2:	d807      	bhi.n	8002bb4 <_printf_i+0x28>
 8002ba4:	2f62      	cmp	r7, #98	@ 0x62
 8002ba6:	d80a      	bhi.n	8002bbe <_printf_i+0x32>
 8002ba8:	2f00      	cmp	r7, #0
 8002baa:	f000 80d1 	beq.w	8002d50 <_printf_i+0x1c4>
 8002bae:	2f58      	cmp	r7, #88	@ 0x58
 8002bb0:	f000 80b8 	beq.w	8002d24 <_printf_i+0x198>
 8002bb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002bb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002bbc:	e03a      	b.n	8002c34 <_printf_i+0xa8>
 8002bbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002bc2:	2b15      	cmp	r3, #21
 8002bc4:	d8f6      	bhi.n	8002bb4 <_printf_i+0x28>
 8002bc6:	a101      	add	r1, pc, #4	@ (adr r1, 8002bcc <_printf_i+0x40>)
 8002bc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002bcc:	08002c25 	.word	0x08002c25
 8002bd0:	08002c39 	.word	0x08002c39
 8002bd4:	08002bb5 	.word	0x08002bb5
 8002bd8:	08002bb5 	.word	0x08002bb5
 8002bdc:	08002bb5 	.word	0x08002bb5
 8002be0:	08002bb5 	.word	0x08002bb5
 8002be4:	08002c39 	.word	0x08002c39
 8002be8:	08002bb5 	.word	0x08002bb5
 8002bec:	08002bb5 	.word	0x08002bb5
 8002bf0:	08002bb5 	.word	0x08002bb5
 8002bf4:	08002bb5 	.word	0x08002bb5
 8002bf8:	08002d37 	.word	0x08002d37
 8002bfc:	08002c63 	.word	0x08002c63
 8002c00:	08002cf1 	.word	0x08002cf1
 8002c04:	08002bb5 	.word	0x08002bb5
 8002c08:	08002bb5 	.word	0x08002bb5
 8002c0c:	08002d59 	.word	0x08002d59
 8002c10:	08002bb5 	.word	0x08002bb5
 8002c14:	08002c63 	.word	0x08002c63
 8002c18:	08002bb5 	.word	0x08002bb5
 8002c1c:	08002bb5 	.word	0x08002bb5
 8002c20:	08002cf9 	.word	0x08002cf9
 8002c24:	6833      	ldr	r3, [r6, #0]
 8002c26:	1d1a      	adds	r2, r3, #4
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6032      	str	r2, [r6, #0]
 8002c2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002c34:	2301      	movs	r3, #1
 8002c36:	e09c      	b.n	8002d72 <_printf_i+0x1e6>
 8002c38:	6833      	ldr	r3, [r6, #0]
 8002c3a:	6820      	ldr	r0, [r4, #0]
 8002c3c:	1d19      	adds	r1, r3, #4
 8002c3e:	6031      	str	r1, [r6, #0]
 8002c40:	0606      	lsls	r6, r0, #24
 8002c42:	d501      	bpl.n	8002c48 <_printf_i+0xbc>
 8002c44:	681d      	ldr	r5, [r3, #0]
 8002c46:	e003      	b.n	8002c50 <_printf_i+0xc4>
 8002c48:	0645      	lsls	r5, r0, #25
 8002c4a:	d5fb      	bpl.n	8002c44 <_printf_i+0xb8>
 8002c4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002c50:	2d00      	cmp	r5, #0
 8002c52:	da03      	bge.n	8002c5c <_printf_i+0xd0>
 8002c54:	232d      	movs	r3, #45	@ 0x2d
 8002c56:	426d      	negs	r5, r5
 8002c58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c5c:	230a      	movs	r3, #10
 8002c5e:	4858      	ldr	r0, [pc, #352]	@ (8002dc0 <_printf_i+0x234>)
 8002c60:	e011      	b.n	8002c86 <_printf_i+0xfa>
 8002c62:	6821      	ldr	r1, [r4, #0]
 8002c64:	6833      	ldr	r3, [r6, #0]
 8002c66:	0608      	lsls	r0, r1, #24
 8002c68:	f853 5b04 	ldr.w	r5, [r3], #4
 8002c6c:	d402      	bmi.n	8002c74 <_printf_i+0xe8>
 8002c6e:	0649      	lsls	r1, r1, #25
 8002c70:	bf48      	it	mi
 8002c72:	b2ad      	uxthmi	r5, r5
 8002c74:	2f6f      	cmp	r7, #111	@ 0x6f
 8002c76:	6033      	str	r3, [r6, #0]
 8002c78:	bf14      	ite	ne
 8002c7a:	230a      	movne	r3, #10
 8002c7c:	2308      	moveq	r3, #8
 8002c7e:	4850      	ldr	r0, [pc, #320]	@ (8002dc0 <_printf_i+0x234>)
 8002c80:	2100      	movs	r1, #0
 8002c82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002c86:	6866      	ldr	r6, [r4, #4]
 8002c88:	2e00      	cmp	r6, #0
 8002c8a:	60a6      	str	r6, [r4, #8]
 8002c8c:	db05      	blt.n	8002c9a <_printf_i+0x10e>
 8002c8e:	6821      	ldr	r1, [r4, #0]
 8002c90:	432e      	orrs	r6, r5
 8002c92:	f021 0104 	bic.w	r1, r1, #4
 8002c96:	6021      	str	r1, [r4, #0]
 8002c98:	d04b      	beq.n	8002d32 <_printf_i+0x1a6>
 8002c9a:	4616      	mov	r6, r2
 8002c9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002ca0:	fb03 5711 	mls	r7, r3, r1, r5
 8002ca4:	5dc7      	ldrb	r7, [r0, r7]
 8002ca6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002caa:	462f      	mov	r7, r5
 8002cac:	42bb      	cmp	r3, r7
 8002cae:	460d      	mov	r5, r1
 8002cb0:	d9f4      	bls.n	8002c9c <_printf_i+0x110>
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d10b      	bne.n	8002cce <_printf_i+0x142>
 8002cb6:	6823      	ldr	r3, [r4, #0]
 8002cb8:	07df      	lsls	r7, r3, #31
 8002cba:	d508      	bpl.n	8002cce <_printf_i+0x142>
 8002cbc:	6923      	ldr	r3, [r4, #16]
 8002cbe:	6861      	ldr	r1, [r4, #4]
 8002cc0:	4299      	cmp	r1, r3
 8002cc2:	bfde      	ittt	le
 8002cc4:	2330      	movle	r3, #48	@ 0x30
 8002cc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002cca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8002cce:	1b92      	subs	r2, r2, r6
 8002cd0:	6122      	str	r2, [r4, #16]
 8002cd2:	464b      	mov	r3, r9
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	4640      	mov	r0, r8
 8002cd8:	f8cd a000 	str.w	sl, [sp]
 8002cdc:	aa03      	add	r2, sp, #12
 8002cde:	f7ff fee3 	bl	8002aa8 <_printf_common>
 8002ce2:	3001      	adds	r0, #1
 8002ce4:	d14a      	bne.n	8002d7c <_printf_i+0x1f0>
 8002ce6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002cea:	b004      	add	sp, #16
 8002cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	f043 0320 	orr.w	r3, r3, #32
 8002cf6:	6023      	str	r3, [r4, #0]
 8002cf8:	2778      	movs	r7, #120	@ 0x78
 8002cfa:	4832      	ldr	r0, [pc, #200]	@ (8002dc4 <_printf_i+0x238>)
 8002cfc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	6831      	ldr	r1, [r6, #0]
 8002d04:	061f      	lsls	r7, r3, #24
 8002d06:	f851 5b04 	ldr.w	r5, [r1], #4
 8002d0a:	d402      	bmi.n	8002d12 <_printf_i+0x186>
 8002d0c:	065f      	lsls	r7, r3, #25
 8002d0e:	bf48      	it	mi
 8002d10:	b2ad      	uxthmi	r5, r5
 8002d12:	6031      	str	r1, [r6, #0]
 8002d14:	07d9      	lsls	r1, r3, #31
 8002d16:	bf44      	itt	mi
 8002d18:	f043 0320 	orrmi.w	r3, r3, #32
 8002d1c:	6023      	strmi	r3, [r4, #0]
 8002d1e:	b11d      	cbz	r5, 8002d28 <_printf_i+0x19c>
 8002d20:	2310      	movs	r3, #16
 8002d22:	e7ad      	b.n	8002c80 <_printf_i+0xf4>
 8002d24:	4826      	ldr	r0, [pc, #152]	@ (8002dc0 <_printf_i+0x234>)
 8002d26:	e7e9      	b.n	8002cfc <_printf_i+0x170>
 8002d28:	6823      	ldr	r3, [r4, #0]
 8002d2a:	f023 0320 	bic.w	r3, r3, #32
 8002d2e:	6023      	str	r3, [r4, #0]
 8002d30:	e7f6      	b.n	8002d20 <_printf_i+0x194>
 8002d32:	4616      	mov	r6, r2
 8002d34:	e7bd      	b.n	8002cb2 <_printf_i+0x126>
 8002d36:	6833      	ldr	r3, [r6, #0]
 8002d38:	6825      	ldr	r5, [r4, #0]
 8002d3a:	1d18      	adds	r0, r3, #4
 8002d3c:	6961      	ldr	r1, [r4, #20]
 8002d3e:	6030      	str	r0, [r6, #0]
 8002d40:	062e      	lsls	r6, r5, #24
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	d501      	bpl.n	8002d4a <_printf_i+0x1be>
 8002d46:	6019      	str	r1, [r3, #0]
 8002d48:	e002      	b.n	8002d50 <_printf_i+0x1c4>
 8002d4a:	0668      	lsls	r0, r5, #25
 8002d4c:	d5fb      	bpl.n	8002d46 <_printf_i+0x1ba>
 8002d4e:	8019      	strh	r1, [r3, #0]
 8002d50:	2300      	movs	r3, #0
 8002d52:	4616      	mov	r6, r2
 8002d54:	6123      	str	r3, [r4, #16]
 8002d56:	e7bc      	b.n	8002cd2 <_printf_i+0x146>
 8002d58:	6833      	ldr	r3, [r6, #0]
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	1d1a      	adds	r2, r3, #4
 8002d5e:	6032      	str	r2, [r6, #0]
 8002d60:	681e      	ldr	r6, [r3, #0]
 8002d62:	6862      	ldr	r2, [r4, #4]
 8002d64:	4630      	mov	r0, r6
 8002d66:	f000 fa95 	bl	8003294 <memchr>
 8002d6a:	b108      	cbz	r0, 8002d70 <_printf_i+0x1e4>
 8002d6c:	1b80      	subs	r0, r0, r6
 8002d6e:	6060      	str	r0, [r4, #4]
 8002d70:	6863      	ldr	r3, [r4, #4]
 8002d72:	6123      	str	r3, [r4, #16]
 8002d74:	2300      	movs	r3, #0
 8002d76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d7a:	e7aa      	b.n	8002cd2 <_printf_i+0x146>
 8002d7c:	4632      	mov	r2, r6
 8002d7e:	4649      	mov	r1, r9
 8002d80:	4640      	mov	r0, r8
 8002d82:	6923      	ldr	r3, [r4, #16]
 8002d84:	47d0      	blx	sl
 8002d86:	3001      	adds	r0, #1
 8002d88:	d0ad      	beq.n	8002ce6 <_printf_i+0x15a>
 8002d8a:	6823      	ldr	r3, [r4, #0]
 8002d8c:	079b      	lsls	r3, r3, #30
 8002d8e:	d413      	bmi.n	8002db8 <_printf_i+0x22c>
 8002d90:	68e0      	ldr	r0, [r4, #12]
 8002d92:	9b03      	ldr	r3, [sp, #12]
 8002d94:	4298      	cmp	r0, r3
 8002d96:	bfb8      	it	lt
 8002d98:	4618      	movlt	r0, r3
 8002d9a:	e7a6      	b.n	8002cea <_printf_i+0x15e>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	4632      	mov	r2, r6
 8002da0:	4649      	mov	r1, r9
 8002da2:	4640      	mov	r0, r8
 8002da4:	47d0      	blx	sl
 8002da6:	3001      	adds	r0, #1
 8002da8:	d09d      	beq.n	8002ce6 <_printf_i+0x15a>
 8002daa:	3501      	adds	r5, #1
 8002dac:	68e3      	ldr	r3, [r4, #12]
 8002dae:	9903      	ldr	r1, [sp, #12]
 8002db0:	1a5b      	subs	r3, r3, r1
 8002db2:	42ab      	cmp	r3, r5
 8002db4:	dcf2      	bgt.n	8002d9c <_printf_i+0x210>
 8002db6:	e7eb      	b.n	8002d90 <_printf_i+0x204>
 8002db8:	2500      	movs	r5, #0
 8002dba:	f104 0619 	add.w	r6, r4, #25
 8002dbe:	e7f5      	b.n	8002dac <_printf_i+0x220>
 8002dc0:	080033b7 	.word	0x080033b7
 8002dc4:	080033c8 	.word	0x080033c8

08002dc8 <__sflush_r>:
 8002dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	0716      	lsls	r6, r2, #28
 8002dd0:	4605      	mov	r5, r0
 8002dd2:	460c      	mov	r4, r1
 8002dd4:	d454      	bmi.n	8002e80 <__sflush_r+0xb8>
 8002dd6:	684b      	ldr	r3, [r1, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	dc02      	bgt.n	8002de2 <__sflush_r+0x1a>
 8002ddc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	dd48      	ble.n	8002e74 <__sflush_r+0xac>
 8002de2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002de4:	2e00      	cmp	r6, #0
 8002de6:	d045      	beq.n	8002e74 <__sflush_r+0xac>
 8002de8:	2300      	movs	r3, #0
 8002dea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002dee:	682f      	ldr	r7, [r5, #0]
 8002df0:	6a21      	ldr	r1, [r4, #32]
 8002df2:	602b      	str	r3, [r5, #0]
 8002df4:	d030      	beq.n	8002e58 <__sflush_r+0x90>
 8002df6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002df8:	89a3      	ldrh	r3, [r4, #12]
 8002dfa:	0759      	lsls	r1, r3, #29
 8002dfc:	d505      	bpl.n	8002e0a <__sflush_r+0x42>
 8002dfe:	6863      	ldr	r3, [r4, #4]
 8002e00:	1ad2      	subs	r2, r2, r3
 8002e02:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002e04:	b10b      	cbz	r3, 8002e0a <__sflush_r+0x42>
 8002e06:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e08:	1ad2      	subs	r2, r2, r3
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	4628      	mov	r0, r5
 8002e0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e10:	6a21      	ldr	r1, [r4, #32]
 8002e12:	47b0      	blx	r6
 8002e14:	1c43      	adds	r3, r0, #1
 8002e16:	89a3      	ldrh	r3, [r4, #12]
 8002e18:	d106      	bne.n	8002e28 <__sflush_r+0x60>
 8002e1a:	6829      	ldr	r1, [r5, #0]
 8002e1c:	291d      	cmp	r1, #29
 8002e1e:	d82b      	bhi.n	8002e78 <__sflush_r+0xb0>
 8002e20:	4a28      	ldr	r2, [pc, #160]	@ (8002ec4 <__sflush_r+0xfc>)
 8002e22:	40ca      	lsrs	r2, r1
 8002e24:	07d6      	lsls	r6, r2, #31
 8002e26:	d527      	bpl.n	8002e78 <__sflush_r+0xb0>
 8002e28:	2200      	movs	r2, #0
 8002e2a:	6062      	str	r2, [r4, #4]
 8002e2c:	6922      	ldr	r2, [r4, #16]
 8002e2e:	04d9      	lsls	r1, r3, #19
 8002e30:	6022      	str	r2, [r4, #0]
 8002e32:	d504      	bpl.n	8002e3e <__sflush_r+0x76>
 8002e34:	1c42      	adds	r2, r0, #1
 8002e36:	d101      	bne.n	8002e3c <__sflush_r+0x74>
 8002e38:	682b      	ldr	r3, [r5, #0]
 8002e3a:	b903      	cbnz	r3, 8002e3e <__sflush_r+0x76>
 8002e3c:	6560      	str	r0, [r4, #84]	@ 0x54
 8002e3e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e40:	602f      	str	r7, [r5, #0]
 8002e42:	b1b9      	cbz	r1, 8002e74 <__sflush_r+0xac>
 8002e44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e48:	4299      	cmp	r1, r3
 8002e4a:	d002      	beq.n	8002e52 <__sflush_r+0x8a>
 8002e4c:	4628      	mov	r0, r5
 8002e4e:	f000 fa2f 	bl	80032b0 <_free_r>
 8002e52:	2300      	movs	r3, #0
 8002e54:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e56:	e00d      	b.n	8002e74 <__sflush_r+0xac>
 8002e58:	2301      	movs	r3, #1
 8002e5a:	4628      	mov	r0, r5
 8002e5c:	47b0      	blx	r6
 8002e5e:	4602      	mov	r2, r0
 8002e60:	1c50      	adds	r0, r2, #1
 8002e62:	d1c9      	bne.n	8002df8 <__sflush_r+0x30>
 8002e64:	682b      	ldr	r3, [r5, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0c6      	beq.n	8002df8 <__sflush_r+0x30>
 8002e6a:	2b1d      	cmp	r3, #29
 8002e6c:	d001      	beq.n	8002e72 <__sflush_r+0xaa>
 8002e6e:	2b16      	cmp	r3, #22
 8002e70:	d11d      	bne.n	8002eae <__sflush_r+0xe6>
 8002e72:	602f      	str	r7, [r5, #0]
 8002e74:	2000      	movs	r0, #0
 8002e76:	e021      	b.n	8002ebc <__sflush_r+0xf4>
 8002e78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e7c:	b21b      	sxth	r3, r3
 8002e7e:	e01a      	b.n	8002eb6 <__sflush_r+0xee>
 8002e80:	690f      	ldr	r7, [r1, #16]
 8002e82:	2f00      	cmp	r7, #0
 8002e84:	d0f6      	beq.n	8002e74 <__sflush_r+0xac>
 8002e86:	0793      	lsls	r3, r2, #30
 8002e88:	bf18      	it	ne
 8002e8a:	2300      	movne	r3, #0
 8002e8c:	680e      	ldr	r6, [r1, #0]
 8002e8e:	bf08      	it	eq
 8002e90:	694b      	ldreq	r3, [r1, #20]
 8002e92:	1bf6      	subs	r6, r6, r7
 8002e94:	600f      	str	r7, [r1, #0]
 8002e96:	608b      	str	r3, [r1, #8]
 8002e98:	2e00      	cmp	r6, #0
 8002e9a:	ddeb      	ble.n	8002e74 <__sflush_r+0xac>
 8002e9c:	4633      	mov	r3, r6
 8002e9e:	463a      	mov	r2, r7
 8002ea0:	4628      	mov	r0, r5
 8002ea2:	6a21      	ldr	r1, [r4, #32]
 8002ea4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002ea8:	47e0      	blx	ip
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	dc07      	bgt.n	8002ebe <__sflush_r+0xf6>
 8002eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002eb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002eba:	81a3      	strh	r3, [r4, #12]
 8002ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ebe:	4407      	add	r7, r0
 8002ec0:	1a36      	subs	r6, r6, r0
 8002ec2:	e7e9      	b.n	8002e98 <__sflush_r+0xd0>
 8002ec4:	20400001 	.word	0x20400001

08002ec8 <_fflush_r>:
 8002ec8:	b538      	push	{r3, r4, r5, lr}
 8002eca:	690b      	ldr	r3, [r1, #16]
 8002ecc:	4605      	mov	r5, r0
 8002ece:	460c      	mov	r4, r1
 8002ed0:	b913      	cbnz	r3, 8002ed8 <_fflush_r+0x10>
 8002ed2:	2500      	movs	r5, #0
 8002ed4:	4628      	mov	r0, r5
 8002ed6:	bd38      	pop	{r3, r4, r5, pc}
 8002ed8:	b118      	cbz	r0, 8002ee2 <_fflush_r+0x1a>
 8002eda:	6a03      	ldr	r3, [r0, #32]
 8002edc:	b90b      	cbnz	r3, 8002ee2 <_fflush_r+0x1a>
 8002ede:	f7ff fb27 	bl	8002530 <__sinit>
 8002ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0f3      	beq.n	8002ed2 <_fflush_r+0xa>
 8002eea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002eec:	07d0      	lsls	r0, r2, #31
 8002eee:	d404      	bmi.n	8002efa <_fflush_r+0x32>
 8002ef0:	0599      	lsls	r1, r3, #22
 8002ef2:	d402      	bmi.n	8002efa <_fflush_r+0x32>
 8002ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ef6:	f7ff fbf4 	bl	80026e2 <__retarget_lock_acquire_recursive>
 8002efa:	4628      	mov	r0, r5
 8002efc:	4621      	mov	r1, r4
 8002efe:	f7ff ff63 	bl	8002dc8 <__sflush_r>
 8002f02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f04:	4605      	mov	r5, r0
 8002f06:	07da      	lsls	r2, r3, #31
 8002f08:	d4e4      	bmi.n	8002ed4 <_fflush_r+0xc>
 8002f0a:	89a3      	ldrh	r3, [r4, #12]
 8002f0c:	059b      	lsls	r3, r3, #22
 8002f0e:	d4e1      	bmi.n	8002ed4 <_fflush_r+0xc>
 8002f10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f12:	f7ff fbe7 	bl	80026e4 <__retarget_lock_release_recursive>
 8002f16:	e7dd      	b.n	8002ed4 <_fflush_r+0xc>

08002f18 <__malloc_lock>:
 8002f18:	4801      	ldr	r0, [pc, #4]	@ (8002f20 <__malloc_lock+0x8>)
 8002f1a:	f7ff bbe2 	b.w	80026e2 <__retarget_lock_acquire_recursive>
 8002f1e:	bf00      	nop
 8002f20:	2000025c 	.word	0x2000025c

08002f24 <__malloc_unlock>:
 8002f24:	4801      	ldr	r0, [pc, #4]	@ (8002f2c <__malloc_unlock+0x8>)
 8002f26:	f7ff bbdd 	b.w	80026e4 <__retarget_lock_release_recursive>
 8002f2a:	bf00      	nop
 8002f2c:	2000025c 	.word	0x2000025c

08002f30 <__sread>:
 8002f30:	b510      	push	{r4, lr}
 8002f32:	460c      	mov	r4, r1
 8002f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f38:	f000 f956 	bl	80031e8 <_read_r>
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	bfab      	itete	ge
 8002f40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002f42:	89a3      	ldrhlt	r3, [r4, #12]
 8002f44:	181b      	addge	r3, r3, r0
 8002f46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002f4a:	bfac      	ite	ge
 8002f4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002f4e:	81a3      	strhlt	r3, [r4, #12]
 8002f50:	bd10      	pop	{r4, pc}

08002f52 <__swrite>:
 8002f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f56:	461f      	mov	r7, r3
 8002f58:	898b      	ldrh	r3, [r1, #12]
 8002f5a:	4605      	mov	r5, r0
 8002f5c:	05db      	lsls	r3, r3, #23
 8002f5e:	460c      	mov	r4, r1
 8002f60:	4616      	mov	r6, r2
 8002f62:	d505      	bpl.n	8002f70 <__swrite+0x1e>
 8002f64:	2302      	movs	r3, #2
 8002f66:	2200      	movs	r2, #0
 8002f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f6c:	f000 f92a 	bl	80031c4 <_lseek_r>
 8002f70:	89a3      	ldrh	r3, [r4, #12]
 8002f72:	4632      	mov	r2, r6
 8002f74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f78:	81a3      	strh	r3, [r4, #12]
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	463b      	mov	r3, r7
 8002f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f86:	f000 b951 	b.w	800322c <_write_r>

08002f8a <__sseek>:
 8002f8a:	b510      	push	{r4, lr}
 8002f8c:	460c      	mov	r4, r1
 8002f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f92:	f000 f917 	bl	80031c4 <_lseek_r>
 8002f96:	1c43      	adds	r3, r0, #1
 8002f98:	89a3      	ldrh	r3, [r4, #12]
 8002f9a:	bf15      	itete	ne
 8002f9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002f9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002fa2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002fa6:	81a3      	strheq	r3, [r4, #12]
 8002fa8:	bf18      	it	ne
 8002faa:	81a3      	strhne	r3, [r4, #12]
 8002fac:	bd10      	pop	{r4, pc}

08002fae <__sclose>:
 8002fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fb2:	f000 b94d 	b.w	8003250 <_close_r>

08002fb6 <__swbuf_r>:
 8002fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fb8:	460e      	mov	r6, r1
 8002fba:	4614      	mov	r4, r2
 8002fbc:	4605      	mov	r5, r0
 8002fbe:	b118      	cbz	r0, 8002fc8 <__swbuf_r+0x12>
 8002fc0:	6a03      	ldr	r3, [r0, #32]
 8002fc2:	b90b      	cbnz	r3, 8002fc8 <__swbuf_r+0x12>
 8002fc4:	f7ff fab4 	bl	8002530 <__sinit>
 8002fc8:	69a3      	ldr	r3, [r4, #24]
 8002fca:	60a3      	str	r3, [r4, #8]
 8002fcc:	89a3      	ldrh	r3, [r4, #12]
 8002fce:	071a      	lsls	r2, r3, #28
 8002fd0:	d501      	bpl.n	8002fd6 <__swbuf_r+0x20>
 8002fd2:	6923      	ldr	r3, [r4, #16]
 8002fd4:	b943      	cbnz	r3, 8002fe8 <__swbuf_r+0x32>
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	4628      	mov	r0, r5
 8002fda:	f000 f82b 	bl	8003034 <__swsetup_r>
 8002fde:	b118      	cbz	r0, 8002fe8 <__swbuf_r+0x32>
 8002fe0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8002fe4:	4638      	mov	r0, r7
 8002fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	6922      	ldr	r2, [r4, #16]
 8002fec:	b2f6      	uxtb	r6, r6
 8002fee:	1a98      	subs	r0, r3, r2
 8002ff0:	6963      	ldr	r3, [r4, #20]
 8002ff2:	4637      	mov	r7, r6
 8002ff4:	4283      	cmp	r3, r0
 8002ff6:	dc05      	bgt.n	8003004 <__swbuf_r+0x4e>
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	4628      	mov	r0, r5
 8002ffc:	f7ff ff64 	bl	8002ec8 <_fflush_r>
 8003000:	2800      	cmp	r0, #0
 8003002:	d1ed      	bne.n	8002fe0 <__swbuf_r+0x2a>
 8003004:	68a3      	ldr	r3, [r4, #8]
 8003006:	3b01      	subs	r3, #1
 8003008:	60a3      	str	r3, [r4, #8]
 800300a:	6823      	ldr	r3, [r4, #0]
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	6022      	str	r2, [r4, #0]
 8003010:	701e      	strb	r6, [r3, #0]
 8003012:	6962      	ldr	r2, [r4, #20]
 8003014:	1c43      	adds	r3, r0, #1
 8003016:	429a      	cmp	r2, r3
 8003018:	d004      	beq.n	8003024 <__swbuf_r+0x6e>
 800301a:	89a3      	ldrh	r3, [r4, #12]
 800301c:	07db      	lsls	r3, r3, #31
 800301e:	d5e1      	bpl.n	8002fe4 <__swbuf_r+0x2e>
 8003020:	2e0a      	cmp	r6, #10
 8003022:	d1df      	bne.n	8002fe4 <__swbuf_r+0x2e>
 8003024:	4621      	mov	r1, r4
 8003026:	4628      	mov	r0, r5
 8003028:	f7ff ff4e 	bl	8002ec8 <_fflush_r>
 800302c:	2800      	cmp	r0, #0
 800302e:	d0d9      	beq.n	8002fe4 <__swbuf_r+0x2e>
 8003030:	e7d6      	b.n	8002fe0 <__swbuf_r+0x2a>
	...

08003034 <__swsetup_r>:
 8003034:	b538      	push	{r3, r4, r5, lr}
 8003036:	4b29      	ldr	r3, [pc, #164]	@ (80030dc <__swsetup_r+0xa8>)
 8003038:	4605      	mov	r5, r0
 800303a:	6818      	ldr	r0, [r3, #0]
 800303c:	460c      	mov	r4, r1
 800303e:	b118      	cbz	r0, 8003048 <__swsetup_r+0x14>
 8003040:	6a03      	ldr	r3, [r0, #32]
 8003042:	b90b      	cbnz	r3, 8003048 <__swsetup_r+0x14>
 8003044:	f7ff fa74 	bl	8002530 <__sinit>
 8003048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800304c:	0719      	lsls	r1, r3, #28
 800304e:	d422      	bmi.n	8003096 <__swsetup_r+0x62>
 8003050:	06da      	lsls	r2, r3, #27
 8003052:	d407      	bmi.n	8003064 <__swsetup_r+0x30>
 8003054:	2209      	movs	r2, #9
 8003056:	602a      	str	r2, [r5, #0]
 8003058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800305c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003060:	81a3      	strh	r3, [r4, #12]
 8003062:	e033      	b.n	80030cc <__swsetup_r+0x98>
 8003064:	0758      	lsls	r0, r3, #29
 8003066:	d512      	bpl.n	800308e <__swsetup_r+0x5a>
 8003068:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800306a:	b141      	cbz	r1, 800307e <__swsetup_r+0x4a>
 800306c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003070:	4299      	cmp	r1, r3
 8003072:	d002      	beq.n	800307a <__swsetup_r+0x46>
 8003074:	4628      	mov	r0, r5
 8003076:	f000 f91b 	bl	80032b0 <_free_r>
 800307a:	2300      	movs	r3, #0
 800307c:	6363      	str	r3, [r4, #52]	@ 0x34
 800307e:	89a3      	ldrh	r3, [r4, #12]
 8003080:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003084:	81a3      	strh	r3, [r4, #12]
 8003086:	2300      	movs	r3, #0
 8003088:	6063      	str	r3, [r4, #4]
 800308a:	6923      	ldr	r3, [r4, #16]
 800308c:	6023      	str	r3, [r4, #0]
 800308e:	89a3      	ldrh	r3, [r4, #12]
 8003090:	f043 0308 	orr.w	r3, r3, #8
 8003094:	81a3      	strh	r3, [r4, #12]
 8003096:	6923      	ldr	r3, [r4, #16]
 8003098:	b94b      	cbnz	r3, 80030ae <__swsetup_r+0x7a>
 800309a:	89a3      	ldrh	r3, [r4, #12]
 800309c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80030a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030a4:	d003      	beq.n	80030ae <__swsetup_r+0x7a>
 80030a6:	4621      	mov	r1, r4
 80030a8:	4628      	mov	r0, r5
 80030aa:	f000 f83e 	bl	800312a <__smakebuf_r>
 80030ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030b2:	f013 0201 	ands.w	r2, r3, #1
 80030b6:	d00a      	beq.n	80030ce <__swsetup_r+0x9a>
 80030b8:	2200      	movs	r2, #0
 80030ba:	60a2      	str	r2, [r4, #8]
 80030bc:	6962      	ldr	r2, [r4, #20]
 80030be:	4252      	negs	r2, r2
 80030c0:	61a2      	str	r2, [r4, #24]
 80030c2:	6922      	ldr	r2, [r4, #16]
 80030c4:	b942      	cbnz	r2, 80030d8 <__swsetup_r+0xa4>
 80030c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80030ca:	d1c5      	bne.n	8003058 <__swsetup_r+0x24>
 80030cc:	bd38      	pop	{r3, r4, r5, pc}
 80030ce:	0799      	lsls	r1, r3, #30
 80030d0:	bf58      	it	pl
 80030d2:	6962      	ldrpl	r2, [r4, #20]
 80030d4:	60a2      	str	r2, [r4, #8]
 80030d6:	e7f4      	b.n	80030c2 <__swsetup_r+0x8e>
 80030d8:	2000      	movs	r0, #0
 80030da:	e7f7      	b.n	80030cc <__swsetup_r+0x98>
 80030dc:	20000018 	.word	0x20000018

080030e0 <__swhatbuf_r>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	460c      	mov	r4, r1
 80030e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030e8:	4615      	mov	r5, r2
 80030ea:	2900      	cmp	r1, #0
 80030ec:	461e      	mov	r6, r3
 80030ee:	b096      	sub	sp, #88	@ 0x58
 80030f0:	da0c      	bge.n	800310c <__swhatbuf_r+0x2c>
 80030f2:	89a3      	ldrh	r3, [r4, #12]
 80030f4:	2100      	movs	r1, #0
 80030f6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80030fa:	bf14      	ite	ne
 80030fc:	2340      	movne	r3, #64	@ 0x40
 80030fe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003102:	2000      	movs	r0, #0
 8003104:	6031      	str	r1, [r6, #0]
 8003106:	602b      	str	r3, [r5, #0]
 8003108:	b016      	add	sp, #88	@ 0x58
 800310a:	bd70      	pop	{r4, r5, r6, pc}
 800310c:	466a      	mov	r2, sp
 800310e:	f000 f8af 	bl	8003270 <_fstat_r>
 8003112:	2800      	cmp	r0, #0
 8003114:	dbed      	blt.n	80030f2 <__swhatbuf_r+0x12>
 8003116:	9901      	ldr	r1, [sp, #4]
 8003118:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800311c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003120:	4259      	negs	r1, r3
 8003122:	4159      	adcs	r1, r3
 8003124:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003128:	e7eb      	b.n	8003102 <__swhatbuf_r+0x22>

0800312a <__smakebuf_r>:
 800312a:	898b      	ldrh	r3, [r1, #12]
 800312c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800312e:	079d      	lsls	r5, r3, #30
 8003130:	4606      	mov	r6, r0
 8003132:	460c      	mov	r4, r1
 8003134:	d507      	bpl.n	8003146 <__smakebuf_r+0x1c>
 8003136:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800313a:	6023      	str	r3, [r4, #0]
 800313c:	6123      	str	r3, [r4, #16]
 800313e:	2301      	movs	r3, #1
 8003140:	6163      	str	r3, [r4, #20]
 8003142:	b003      	add	sp, #12
 8003144:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003146:	466a      	mov	r2, sp
 8003148:	ab01      	add	r3, sp, #4
 800314a:	f7ff ffc9 	bl	80030e0 <__swhatbuf_r>
 800314e:	9f00      	ldr	r7, [sp, #0]
 8003150:	4605      	mov	r5, r0
 8003152:	4639      	mov	r1, r7
 8003154:	4630      	mov	r0, r6
 8003156:	f7ff fc27 	bl	80029a8 <_malloc_r>
 800315a:	b948      	cbnz	r0, 8003170 <__smakebuf_r+0x46>
 800315c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003160:	059a      	lsls	r2, r3, #22
 8003162:	d4ee      	bmi.n	8003142 <__smakebuf_r+0x18>
 8003164:	f023 0303 	bic.w	r3, r3, #3
 8003168:	f043 0302 	orr.w	r3, r3, #2
 800316c:	81a3      	strh	r3, [r4, #12]
 800316e:	e7e2      	b.n	8003136 <__smakebuf_r+0xc>
 8003170:	89a3      	ldrh	r3, [r4, #12]
 8003172:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800317a:	81a3      	strh	r3, [r4, #12]
 800317c:	9b01      	ldr	r3, [sp, #4]
 800317e:	6020      	str	r0, [r4, #0]
 8003180:	b15b      	cbz	r3, 800319a <__smakebuf_r+0x70>
 8003182:	4630      	mov	r0, r6
 8003184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003188:	f000 f80c 	bl	80031a4 <_isatty_r>
 800318c:	b128      	cbz	r0, 800319a <__smakebuf_r+0x70>
 800318e:	89a3      	ldrh	r3, [r4, #12]
 8003190:	f023 0303 	bic.w	r3, r3, #3
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	81a3      	strh	r3, [r4, #12]
 800319a:	89a3      	ldrh	r3, [r4, #12]
 800319c:	431d      	orrs	r5, r3
 800319e:	81a5      	strh	r5, [r4, #12]
 80031a0:	e7cf      	b.n	8003142 <__smakebuf_r+0x18>
	...

080031a4 <_isatty_r>:
 80031a4:	b538      	push	{r3, r4, r5, lr}
 80031a6:	2300      	movs	r3, #0
 80031a8:	4d05      	ldr	r5, [pc, #20]	@ (80031c0 <_isatty_r+0x1c>)
 80031aa:	4604      	mov	r4, r0
 80031ac:	4608      	mov	r0, r1
 80031ae:	602b      	str	r3, [r5, #0]
 80031b0:	f7fd fa69 	bl	8000686 <_isatty>
 80031b4:	1c43      	adds	r3, r0, #1
 80031b6:	d102      	bne.n	80031be <_isatty_r+0x1a>
 80031b8:	682b      	ldr	r3, [r5, #0]
 80031ba:	b103      	cbz	r3, 80031be <_isatty_r+0x1a>
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	bd38      	pop	{r3, r4, r5, pc}
 80031c0:	20000268 	.word	0x20000268

080031c4 <_lseek_r>:
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	4604      	mov	r4, r0
 80031c8:	4608      	mov	r0, r1
 80031ca:	4611      	mov	r1, r2
 80031cc:	2200      	movs	r2, #0
 80031ce:	4d05      	ldr	r5, [pc, #20]	@ (80031e4 <_lseek_r+0x20>)
 80031d0:	602a      	str	r2, [r5, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f7fd fa61 	bl	800069a <_lseek>
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	d102      	bne.n	80031e2 <_lseek_r+0x1e>
 80031dc:	682b      	ldr	r3, [r5, #0]
 80031de:	b103      	cbz	r3, 80031e2 <_lseek_r+0x1e>
 80031e0:	6023      	str	r3, [r4, #0]
 80031e2:	bd38      	pop	{r3, r4, r5, pc}
 80031e4:	20000268 	.word	0x20000268

080031e8 <_read_r>:
 80031e8:	b538      	push	{r3, r4, r5, lr}
 80031ea:	4604      	mov	r4, r0
 80031ec:	4608      	mov	r0, r1
 80031ee:	4611      	mov	r1, r2
 80031f0:	2200      	movs	r2, #0
 80031f2:	4d05      	ldr	r5, [pc, #20]	@ (8003208 <_read_r+0x20>)
 80031f4:	602a      	str	r2, [r5, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	f7fd fa0e 	bl	8000618 <_read>
 80031fc:	1c43      	adds	r3, r0, #1
 80031fe:	d102      	bne.n	8003206 <_read_r+0x1e>
 8003200:	682b      	ldr	r3, [r5, #0]
 8003202:	b103      	cbz	r3, 8003206 <_read_r+0x1e>
 8003204:	6023      	str	r3, [r4, #0]
 8003206:	bd38      	pop	{r3, r4, r5, pc}
 8003208:	20000268 	.word	0x20000268

0800320c <_sbrk_r>:
 800320c:	b538      	push	{r3, r4, r5, lr}
 800320e:	2300      	movs	r3, #0
 8003210:	4d05      	ldr	r5, [pc, #20]	@ (8003228 <_sbrk_r+0x1c>)
 8003212:	4604      	mov	r4, r0
 8003214:	4608      	mov	r0, r1
 8003216:	602b      	str	r3, [r5, #0]
 8003218:	f7fd fa4c 	bl	80006b4 <_sbrk>
 800321c:	1c43      	adds	r3, r0, #1
 800321e:	d102      	bne.n	8003226 <_sbrk_r+0x1a>
 8003220:	682b      	ldr	r3, [r5, #0]
 8003222:	b103      	cbz	r3, 8003226 <_sbrk_r+0x1a>
 8003224:	6023      	str	r3, [r4, #0]
 8003226:	bd38      	pop	{r3, r4, r5, pc}
 8003228:	20000268 	.word	0x20000268

0800322c <_write_r>:
 800322c:	b538      	push	{r3, r4, r5, lr}
 800322e:	4604      	mov	r4, r0
 8003230:	4608      	mov	r0, r1
 8003232:	4611      	mov	r1, r2
 8003234:	2200      	movs	r2, #0
 8003236:	4d05      	ldr	r5, [pc, #20]	@ (800324c <_write_r+0x20>)
 8003238:	602a      	str	r2, [r5, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	f7fc ff86 	bl	800014c <_write>
 8003240:	1c43      	adds	r3, r0, #1
 8003242:	d102      	bne.n	800324a <_write_r+0x1e>
 8003244:	682b      	ldr	r3, [r5, #0]
 8003246:	b103      	cbz	r3, 800324a <_write_r+0x1e>
 8003248:	6023      	str	r3, [r4, #0]
 800324a:	bd38      	pop	{r3, r4, r5, pc}
 800324c:	20000268 	.word	0x20000268

08003250 <_close_r>:
 8003250:	b538      	push	{r3, r4, r5, lr}
 8003252:	2300      	movs	r3, #0
 8003254:	4d05      	ldr	r5, [pc, #20]	@ (800326c <_close_r+0x1c>)
 8003256:	4604      	mov	r4, r0
 8003258:	4608      	mov	r0, r1
 800325a:	602b      	str	r3, [r5, #0]
 800325c:	f7fd f9f9 	bl	8000652 <_close>
 8003260:	1c43      	adds	r3, r0, #1
 8003262:	d102      	bne.n	800326a <_close_r+0x1a>
 8003264:	682b      	ldr	r3, [r5, #0]
 8003266:	b103      	cbz	r3, 800326a <_close_r+0x1a>
 8003268:	6023      	str	r3, [r4, #0]
 800326a:	bd38      	pop	{r3, r4, r5, pc}
 800326c:	20000268 	.word	0x20000268

08003270 <_fstat_r>:
 8003270:	b538      	push	{r3, r4, r5, lr}
 8003272:	2300      	movs	r3, #0
 8003274:	4d06      	ldr	r5, [pc, #24]	@ (8003290 <_fstat_r+0x20>)
 8003276:	4604      	mov	r4, r0
 8003278:	4608      	mov	r0, r1
 800327a:	4611      	mov	r1, r2
 800327c:	602b      	str	r3, [r5, #0]
 800327e:	f7fd f9f3 	bl	8000668 <_fstat>
 8003282:	1c43      	adds	r3, r0, #1
 8003284:	d102      	bne.n	800328c <_fstat_r+0x1c>
 8003286:	682b      	ldr	r3, [r5, #0]
 8003288:	b103      	cbz	r3, 800328c <_fstat_r+0x1c>
 800328a:	6023      	str	r3, [r4, #0]
 800328c:	bd38      	pop	{r3, r4, r5, pc}
 800328e:	bf00      	nop
 8003290:	20000268 	.word	0x20000268

08003294 <memchr>:
 8003294:	4603      	mov	r3, r0
 8003296:	b510      	push	{r4, lr}
 8003298:	b2c9      	uxtb	r1, r1
 800329a:	4402      	add	r2, r0
 800329c:	4293      	cmp	r3, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	d101      	bne.n	80032a6 <memchr+0x12>
 80032a2:	2000      	movs	r0, #0
 80032a4:	e003      	b.n	80032ae <memchr+0x1a>
 80032a6:	7804      	ldrb	r4, [r0, #0]
 80032a8:	3301      	adds	r3, #1
 80032aa:	428c      	cmp	r4, r1
 80032ac:	d1f6      	bne.n	800329c <memchr+0x8>
 80032ae:	bd10      	pop	{r4, pc}

080032b0 <_free_r>:
 80032b0:	b538      	push	{r3, r4, r5, lr}
 80032b2:	4605      	mov	r5, r0
 80032b4:	2900      	cmp	r1, #0
 80032b6:	d040      	beq.n	800333a <_free_r+0x8a>
 80032b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032bc:	1f0c      	subs	r4, r1, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bfb8      	it	lt
 80032c2:	18e4      	addlt	r4, r4, r3
 80032c4:	f7ff fe28 	bl	8002f18 <__malloc_lock>
 80032c8:	4a1c      	ldr	r2, [pc, #112]	@ (800333c <_free_r+0x8c>)
 80032ca:	6813      	ldr	r3, [r2, #0]
 80032cc:	b933      	cbnz	r3, 80032dc <_free_r+0x2c>
 80032ce:	6063      	str	r3, [r4, #4]
 80032d0:	6014      	str	r4, [r2, #0]
 80032d2:	4628      	mov	r0, r5
 80032d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032d8:	f7ff be24 	b.w	8002f24 <__malloc_unlock>
 80032dc:	42a3      	cmp	r3, r4
 80032de:	d908      	bls.n	80032f2 <_free_r+0x42>
 80032e0:	6820      	ldr	r0, [r4, #0]
 80032e2:	1821      	adds	r1, r4, r0
 80032e4:	428b      	cmp	r3, r1
 80032e6:	bf01      	itttt	eq
 80032e8:	6819      	ldreq	r1, [r3, #0]
 80032ea:	685b      	ldreq	r3, [r3, #4]
 80032ec:	1809      	addeq	r1, r1, r0
 80032ee:	6021      	streq	r1, [r4, #0]
 80032f0:	e7ed      	b.n	80032ce <_free_r+0x1e>
 80032f2:	461a      	mov	r2, r3
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	b10b      	cbz	r3, 80032fc <_free_r+0x4c>
 80032f8:	42a3      	cmp	r3, r4
 80032fa:	d9fa      	bls.n	80032f2 <_free_r+0x42>
 80032fc:	6811      	ldr	r1, [r2, #0]
 80032fe:	1850      	adds	r0, r2, r1
 8003300:	42a0      	cmp	r0, r4
 8003302:	d10b      	bne.n	800331c <_free_r+0x6c>
 8003304:	6820      	ldr	r0, [r4, #0]
 8003306:	4401      	add	r1, r0
 8003308:	1850      	adds	r0, r2, r1
 800330a:	4283      	cmp	r3, r0
 800330c:	6011      	str	r1, [r2, #0]
 800330e:	d1e0      	bne.n	80032d2 <_free_r+0x22>
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4408      	add	r0, r1
 8003316:	6010      	str	r0, [r2, #0]
 8003318:	6053      	str	r3, [r2, #4]
 800331a:	e7da      	b.n	80032d2 <_free_r+0x22>
 800331c:	d902      	bls.n	8003324 <_free_r+0x74>
 800331e:	230c      	movs	r3, #12
 8003320:	602b      	str	r3, [r5, #0]
 8003322:	e7d6      	b.n	80032d2 <_free_r+0x22>
 8003324:	6820      	ldr	r0, [r4, #0]
 8003326:	1821      	adds	r1, r4, r0
 8003328:	428b      	cmp	r3, r1
 800332a:	bf01      	itttt	eq
 800332c:	6819      	ldreq	r1, [r3, #0]
 800332e:	685b      	ldreq	r3, [r3, #4]
 8003330:	1809      	addeq	r1, r1, r0
 8003332:	6021      	streq	r1, [r4, #0]
 8003334:	6063      	str	r3, [r4, #4]
 8003336:	6054      	str	r4, [r2, #4]
 8003338:	e7cb      	b.n	80032d2 <_free_r+0x22>
 800333a:	bd38      	pop	{r3, r4, r5, pc}
 800333c:	20000264 	.word	0x20000264

08003340 <_init>:
 8003340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003342:	bf00      	nop
 8003344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003346:	bc08      	pop	{r3}
 8003348:	469e      	mov	lr, r3
 800334a:	4770      	bx	lr

0800334c <_fini>:
 800334c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334e:	bf00      	nop
 8003350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003352:	bc08      	pop	{r3}
 8003354:	469e      	mov	lr, r3
 8003356:	4770      	bx	lr
