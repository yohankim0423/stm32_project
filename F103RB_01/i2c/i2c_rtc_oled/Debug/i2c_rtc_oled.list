
i2c_rtc_oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e30  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001568  08003f3c  08003f3c  00004f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054a4  080054a4  00007088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080054a4  080054a4  00007088  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080054a4  080054a4  00007088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a4  080054a4  000064a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054a8  080054a8  000064a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  080054ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000644  20000088  08005534  00007088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  08005534  000076cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a78d  00000000  00000000  000070b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aac  00000000  00000000  0001183e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  000132f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ea  00000000  00000000  00013d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001776a  00000000  00000000  000144fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c801  00000000  00000000  0002bc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084ff8  00000000  00000000  00038465  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd45d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eb0  00000000  00000000  000bd4a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000c0350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08003f24 	.word	0x08003f24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08003f24 	.word	0x08003f24

0800014c <bcd2dec>:
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);

/* USER CODE BEGIN PFP */
// Convert BCD to decimal
static uint8_t bcd2dec(uint8_t val) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	return (uint8_t)(((val >> 4) * 10) + (val & 0x0F));
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	091b      	lsrs	r3, r3, #4
 800015a:	b2db      	uxtb	r3, r3
 800015c:	461a      	mov	r2, r3
 800015e:	0092      	lsls	r2, r2, #2
 8000160:	4413      	add	r3, r2
 8000162:	005b      	lsls	r3, r3, #1
 8000164:	b2da      	uxtb	r2, r3
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	f003 030f 	and.w	r3, r3, #15
 800016c:	b2db      	uxtb	r3, r3
 800016e:	4413      	add	r3, r2
 8000170:	b2db      	uxtb	r3, r3
}
 8000172:	4618      	mov	r0, r3
 8000174:	370c      	adds	r7, #12
 8000176:	46bd      	mov	sp, r7
 8000178:	bc80      	pop	{r7}
 800017a:	4770      	bx	lr

0800017c <dec2bcd>:
// Convert decimal to BCD
#ifdef SET_RTC
static uint8_t dec2bcd(uint8_t val) {
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
  return (uint8_t)(((val / 10) << 4) | (val % 10));
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	4a0d      	ldr	r2, [pc, #52]	@ (80001c0 <dec2bcd+0x44>)
 800018a:	fba2 2303 	umull	r2, r3, r2, r3
 800018e:	08db      	lsrs	r3, r3, #3
 8000190:	b2db      	uxtb	r3, r3
 8000192:	b25b      	sxtb	r3, r3
 8000194:	011b      	lsls	r3, r3, #4
 8000196:	b258      	sxtb	r0, r3
 8000198:	79fa      	ldrb	r2, [r7, #7]
 800019a:	4b09      	ldr	r3, [pc, #36]	@ (80001c0 <dec2bcd+0x44>)
 800019c:	fba3 1302 	umull	r1, r3, r3, r2
 80001a0:	08d9      	lsrs	r1, r3, #3
 80001a2:	460b      	mov	r3, r1
 80001a4:	009b      	lsls	r3, r3, #2
 80001a6:	440b      	add	r3, r1
 80001a8:	005b      	lsls	r3, r3, #1
 80001aa:	1ad3      	subs	r3, r2, r3
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	b25b      	sxtb	r3, r3
 80001b0:	4303      	orrs	r3, r0
 80001b2:	b25b      	sxtb	r3, r3
 80001b4:	b2db      	uxtb	r3, r3
}
 80001b6:	4618      	mov	r0, r3
 80001b8:	370c      	adds	r7, #12
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	cccccccd 	.word	0xcccccccd

080001c4 <DS3231_SetTime>:

// Write date & time int DS3231 (one-time initialization)
static void DS3231_SetTime(uint8_t h, uint8_t m, uint8_t s) {
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b088      	sub	sp, #32
 80001c8:	af04      	add	r7, sp, #16
 80001ca:	4603      	mov	r3, r0
 80001cc:	71fb      	strb	r3, [r7, #7]
 80001ce:	460b      	mov	r3, r1
 80001d0:	71bb      	strb	r3, [r7, #6]
 80001d2:	4613      	mov	r3, r2
 80001d4:	717b      	strb	r3, [r7, #5]
	uint8_t t[3] = {
			dec2bcd(s),  // Seconds
 80001d6:	797b      	ldrb	r3, [r7, #5]
 80001d8:	4618      	mov	r0, r3
 80001da:	f7ff ffcf 	bl	800017c <dec2bcd>
 80001de:	4603      	mov	r3, r0
	uint8_t t[3] = {
 80001e0:	733b      	strb	r3, [r7, #12]
			dec2bcd(m),  // Minutes
 80001e2:	79bb      	ldrb	r3, [r7, #6]
 80001e4:	4618      	mov	r0, r3
 80001e6:	f7ff ffc9 	bl	800017c <dec2bcd>
 80001ea:	4603      	mov	r3, r0
	uint8_t t[3] = {
 80001ec:	737b      	strb	r3, [r7, #13]
			dec2bcd(h),  // Hours
 80001ee:	79fb      	ldrb	r3, [r7, #7]
 80001f0:	4618      	mov	r0, r3
 80001f2:	f7ff ffc3 	bl	800017c <dec2bcd>
 80001f6:	4603      	mov	r3, r0
	uint8_t t[3] = {
 80001f8:	73bb      	strb	r3, [r7, #14]
	};
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, DS3231_REG_TIME, I2C_MEMADD_SIZE_8BIT, t, 3, HAL_MAX_DELAY);
 80001fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80001fe:	9302      	str	r3, [sp, #8]
 8000200:	2303      	movs	r3, #3
 8000202:	9301      	str	r3, [sp, #4]
 8000204:	f107 030c 	add.w	r3, r7, #12
 8000208:	9300      	str	r3, [sp, #0]
 800020a:	2301      	movs	r3, #1
 800020c:	2200      	movs	r2, #0
 800020e:	21d0      	movs	r1, #208	@ 0xd0
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <DS3231_SetTime+0x5c>)
 8000212:	f001 fc17 	bl	8001a44 <HAL_I2C_Mem_Write>
}
 8000216:	bf00      	nop
 8000218:	3710      	adds	r7, #16
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	200000a4 	.word	0x200000a4

08000224 <DS3231_SetDate>:

static void DS3231_SetDate(uint8_t W, uint8_t D, uint8_t M, uint8_t Y) {
 8000224:	b590      	push	{r4, r7, lr}
 8000226:	b089      	sub	sp, #36	@ 0x24
 8000228:	af04      	add	r7, sp, #16
 800022a:	4604      	mov	r4, r0
 800022c:	4608      	mov	r0, r1
 800022e:	4611      	mov	r1, r2
 8000230:	461a      	mov	r2, r3
 8000232:	4623      	mov	r3, r4
 8000234:	71fb      	strb	r3, [r7, #7]
 8000236:	4603      	mov	r3, r0
 8000238:	71bb      	strb	r3, [r7, #6]
 800023a:	460b      	mov	r3, r1
 800023c:	717b      	strb	r3, [r7, #5]
 800023e:	4613      	mov	r3, r2
 8000240:	713b      	strb	r3, [r7, #4]
	uint8_t d[4] = {
			dec2bcd(W),  // Day-of-week
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	4618      	mov	r0, r3
 8000246:	f7ff ff99 	bl	800017c <dec2bcd>
 800024a:	4603      	mov	r3, r0
	uint8_t d[4] = {
 800024c:	733b      	strb	r3, [r7, #12]
			dec2bcd(D),  // Date
 800024e:	79bb      	ldrb	r3, [r7, #6]
 8000250:	4618      	mov	r0, r3
 8000252:	f7ff ff93 	bl	800017c <dec2bcd>
 8000256:	4603      	mov	r3, r0
	uint8_t d[4] = {
 8000258:	737b      	strb	r3, [r7, #13]
			dec2bcd(M),  // Month
 800025a:	797b      	ldrb	r3, [r7, #5]
 800025c:	4618      	mov	r0, r3
 800025e:	f7ff ff8d 	bl	800017c <dec2bcd>
 8000262:	4603      	mov	r3, r0
	uint8_t d[4] = {
 8000264:	73bb      	strb	r3, [r7, #14]
			dec2bcd(Y)   // Year (00-99)
 8000266:	793b      	ldrb	r3, [r7, #4]
 8000268:	4618      	mov	r0, r3
 800026a:	f7ff ff87 	bl	800017c <dec2bcd>
 800026e:	4603      	mov	r3, r0
	uint8_t d[4] = {
 8000270:	73fb      	strb	r3, [r7, #15]
	};
	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, DS3231_REG_DATE, I2C_MEMADD_SIZE_8BIT, d, 4, HAL_MAX_DELAY);
 8000272:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000276:	9302      	str	r3, [sp, #8]
 8000278:	2304      	movs	r3, #4
 800027a:	9301      	str	r3, [sp, #4]
 800027c:	f107 030c 	add.w	r3, r7, #12
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	2301      	movs	r3, #1
 8000284:	2203      	movs	r2, #3
 8000286:	21d0      	movs	r1, #208	@ 0xd0
 8000288:	4803      	ldr	r0, [pc, #12]	@ (8000298 <DS3231_SetDate+0x74>)
 800028a:	f001 fbdb 	bl	8001a44 <HAL_I2C_Mem_Write>
}
 800028e:	bf00      	nop
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	bd90      	pop	{r4, r7, pc}
 8000296:	bf00      	nop
 8000298:	200000a4 	.word	0x200000a4

0800029c <DS3231_GetTime>:
#endif

// Read time (hh:mm:ss) from DS3231
static void DS3231_GetTime(uint8_t* h, uint8_t* m, uint8_t* s) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b08a      	sub	sp, #40	@ 0x28
 80002a0:	af04      	add	r7, sp, #16
 80002a2:	60f8      	str	r0, [r7, #12]
 80002a4:	60b9      	str	r1, [r7, #8]
 80002a6:	607a      	str	r2, [r7, #4]
	uint8_t b[3];
	if (HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, DS3231_REG_TIME, I2C_MEMADD_SIZE_8BIT, b, 3, HAL_MAX_DELAY) == HAL_OK) {
 80002a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80002ac:	9302      	str	r3, [sp, #8]
 80002ae:	2303      	movs	r3, #3
 80002b0:	9301      	str	r3, [sp, #4]
 80002b2:	f107 0314 	add.w	r3, r7, #20
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2301      	movs	r3, #1
 80002ba:	2200      	movs	r2, #0
 80002bc:	21d0      	movs	r1, #208	@ 0xd0
 80002be:	481b      	ldr	r0, [pc, #108]	@ (800032c <DS3231_GetTime+0x90>)
 80002c0:	f001 fcba 	bl	8001c38 <HAL_I2C_Mem_Read>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d121      	bne.n	800030e <DS3231_GetTime+0x72>
		*s = bcd2dec(b[0] & 0x7F);
 80002ca:	7d3b      	ldrb	r3, [r7, #20]
 80002cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff3a 	bl	800014c <bcd2dec>
 80002d8:	4603      	mov	r3, r0
 80002da:	461a      	mov	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	701a      	strb	r2, [r3, #0]
		*m = bcd2dec(b[1] & 0x7F);
 80002e0:	7d7b      	ldrb	r3, [r7, #21]
 80002e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	4618      	mov	r0, r3
 80002ea:	f7ff ff2f 	bl	800014c <bcd2dec>
 80002ee:	4603      	mov	r3, r0
 80002f0:	461a      	mov	r2, r3
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	701a      	strb	r2, [r3, #0]
		*h = bcd2dec(b[2] & 0x3F);
 80002f6:	7dbb      	ldrb	r3, [r7, #22]
 80002f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80002fc:	b2db      	uxtb	r3, r3
 80002fe:	4618      	mov	r0, r3
 8000300:	f7ff ff24 	bl	800014c <bcd2dec>
 8000304:	4603      	mov	r3, r0
 8000306:	461a      	mov	r2, r3
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	701a      	strb	r2, [r3, #0]
	} else {
		*h = *m = *s = 0;
	}
}
 800030c:	e00a      	b.n	8000324 <DS3231_GetTime+0x88>
		*h = *m = *s = 0;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2200      	movs	r2, #0
 8000312:	701a      	strb	r2, [r3, #0]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	781a      	ldrb	r2, [r3, #0]
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	701a      	strb	r2, [r3, #0]
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	781a      	ldrb	r2, [r3, #0]
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	701a      	strb	r2, [r3, #0]
}
 8000324:	bf00      	nop
 8000326:	3718      	adds	r7, #24
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	200000a4 	.word	0x200000a4

08000330 <DS3231_GetDate>:
// Read date and day-of-week
static void DS3231_GetDate(uint8_t* D, uint8_t* M, uint16_t* Y, uint8_t* W) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b08a      	sub	sp, #40	@ 0x28
 8000334:	af04      	add	r7, sp, #16
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
 800033c:	603b      	str	r3, [r7, #0]
	uint8_t b[4];
	if (HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, DS3231_REG_DATE, I2C_MEMADD_SIZE_8BIT, b, 4, HAL_MAX_DELAY) == HAL_OK) {
 800033e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000342:	9302      	str	r3, [sp, #8]
 8000344:	2304      	movs	r3, #4
 8000346:	9301      	str	r3, [sp, #4]
 8000348:	f107 0314 	add.w	r3, r7, #20
 800034c:	9300      	str	r3, [sp, #0]
 800034e:	2301      	movs	r3, #1
 8000350:	2203      	movs	r2, #3
 8000352:	21d0      	movs	r1, #208	@ 0xd0
 8000354:	4820      	ldr	r0, [pc, #128]	@ (80003d8 <DS3231_GetDate+0xa8>)
 8000356:	f001 fc6f 	bl	8001c38 <HAL_I2C_Mem_Read>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d128      	bne.n	80003b2 <DS3231_GetDate+0x82>
		*W = bcd2dec(b[0]);         // Day-of-week
 8000360:	7d3b      	ldrb	r3, [r7, #20]
 8000362:	4618      	mov	r0, r3
 8000364:	f7ff fef2 	bl	800014c <bcd2dec>
 8000368:	4603      	mov	r3, r0
 800036a:	461a      	mov	r2, r3
 800036c:	683b      	ldr	r3, [r7, #0]
 800036e:	701a      	strb	r2, [r3, #0]
		*D = bcd2dec(b[1] & 0x3F);  // Date
 8000370:	7d7b      	ldrb	r3, [r7, #21]
 8000372:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000376:	b2db      	uxtb	r3, r3
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff fee7 	bl	800014c <bcd2dec>
 800037e:	4603      	mov	r3, r0
 8000380:	461a      	mov	r2, r3
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	701a      	strb	r2, [r3, #0]
		*M = bcd2dec(b[2] & 0x1F);  // Month
 8000386:	7dbb      	ldrb	r3, [r7, #22]
 8000388:	f003 031f 	and.w	r3, r3, #31
 800038c:	b2db      	uxtb	r3, r3
 800038e:	4618      	mov	r0, r3
 8000390:	f7ff fedc 	bl	800014c <bcd2dec>
 8000394:	4603      	mov	r3, r0
 8000396:	461a      	mov	r2, r3
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	701a      	strb	r2, [r3, #0]
		*Y = 2000 + bcd2dec(b[3]);  // Year
 800039c:	7dfb      	ldrb	r3, [r7, #23]
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff fed4 	bl	800014c <bcd2dec>
 80003a4:	4603      	mov	r3, r0
 80003a6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80003aa:	b29a      	uxth	r2, r3
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	801a      	strh	r2, [r3, #0]
	} else {
		*W = *D = *M = 0;
		*Y = 2000;
	}
}
 80003b0:	e00e      	b.n	80003d0 <DS3231_GetDate+0xa0>
		*W = *D = *M = 0;
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	2200      	movs	r2, #0
 80003b6:	701a      	strb	r2, [r3, #0]
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	781a      	ldrb	r2, [r3, #0]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	701a      	strb	r2, [r3, #0]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	781a      	ldrb	r2, [r3, #0]
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	701a      	strb	r2, [r3, #0]
		*Y = 2000;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80003ce:	801a      	strh	r2, [r3, #0]
}
 80003d0:	bf00      	nop
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	200000a4 	.word	0x200000a4

080003dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003dc:	b590      	push	{r4, r7, lr}
 80003de:	b083      	sub	sp, #12
 80003e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e2:	f000 fd9b 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e6:	f000 f889 	bl	80004fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003ea:	f000 f925 	bl	8000638 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003ee:	f000 f8f9 	bl	80005e4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80003f2:	f000 f8c9 	bl	8000588 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize OLED display
  SSD1306_Init();
 80003f6:	f000 f993 	bl	8000720 <SSD1306_Init>
  /* USER CODE END 2 */
  // To set RTC once, define SET_RTC and uncomment:
#ifdef SET_RTC
  // example: 2025-08-07 17:45:30, Thursday(4)
  DS3231_SetTime(17, 45, 30);
 80003fa:	221e      	movs	r2, #30
 80003fc:	212d      	movs	r1, #45	@ 0x2d
 80003fe:	2011      	movs	r0, #17
 8000400:	f7ff fee0 	bl	80001c4 <DS3231_SetTime>
  DS3231_SetDate(5, 7, 8, 25);
 8000404:	2319      	movs	r3, #25
 8000406:	2208      	movs	r2, #8
 8000408:	2107      	movs	r1, #7
 800040a:	2005      	movs	r0, #5
 800040c:	f7ff ff0a 	bl	8000224 <DS3231_SetDate>
  HAL_Delay(500);
 8000410:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000414:	f000 fde4 	bl	8000fe0 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Read time and date from DS3231
	  DS3231_GetTime(&hour, &min, &sec);
 8000418:	4a2a      	ldr	r2, [pc, #168]	@ (80004c4 <main+0xe8>)
 800041a:	492b      	ldr	r1, [pc, #172]	@ (80004c8 <main+0xec>)
 800041c:	482b      	ldr	r0, [pc, #172]	@ (80004cc <main+0xf0>)
 800041e:	f7ff ff3d 	bl	800029c <DS3231_GetTime>
	  DS3231_GetDate(&day, &month, &year, &dow);
 8000422:	4b2b      	ldr	r3, [pc, #172]	@ (80004d0 <main+0xf4>)
 8000424:	4a2b      	ldr	r2, [pc, #172]	@ (80004d4 <main+0xf8>)
 8000426:	492c      	ldr	r1, [pc, #176]	@ (80004d8 <main+0xfc>)
 8000428:	482c      	ldr	r0, [pc, #176]	@ (80004dc <main+0x100>)
 800042a:	f7ff ff81 	bl	8000330 <DS3231_GetDate>

	  // Format strings for display
	  sprintf(line1, "%02d:%02d:%02d", hour, min, sec);
 800042e:	4b27      	ldr	r3, [pc, #156]	@ (80004cc <main+0xf0>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	461a      	mov	r2, r3
 8000434:	4b24      	ldr	r3, [pc, #144]	@ (80004c8 <main+0xec>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	4619      	mov	r1, r3
 800043a:	4b22      	ldr	r3, [pc, #136]	@ (80004c4 <main+0xe8>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	460b      	mov	r3, r1
 8000442:	4927      	ldr	r1, [pc, #156]	@ (80004e0 <main+0x104>)
 8000444:	4827      	ldr	r0, [pc, #156]	@ (80004e4 <main+0x108>)
 8000446:	f003 f8bd 	bl	80035c4 <siprintf>
	  sprintf(line2, "%02d-%02d-%04d %s", day, month, year, dow_str[(dow>=1 && dow<=7)?dow-1:0]);
 800044a:	4b24      	ldr	r3, [pc, #144]	@ (80004dc <main+0x100>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <main+0xfc>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	461c      	mov	r4, r3
 8000456:	4b1f      	ldr	r3, [pc, #124]	@ (80004d4 <main+0xf8>)
 8000458:	881b      	ldrh	r3, [r3, #0]
 800045a:	4619      	mov	r1, r3
 800045c:	4b1c      	ldr	r3, [pc, #112]	@ (80004d0 <main+0xf4>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d007      	beq.n	8000474 <main+0x98>
 8000464:	4b1a      	ldr	r3, [pc, #104]	@ (80004d0 <main+0xf4>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b07      	cmp	r3, #7
 800046a:	d803      	bhi.n	8000474 <main+0x98>
 800046c:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <main+0xf4>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	3b01      	subs	r3, #1
 8000472:	e000      	b.n	8000476 <main+0x9a>
 8000474:	2300      	movs	r3, #0
 8000476:	4a1c      	ldr	r2, [pc, #112]	@ (80004e8 <main+0x10c>)
 8000478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800047c:	9301      	str	r3, [sp, #4]
 800047e:	9100      	str	r1, [sp, #0]
 8000480:	4623      	mov	r3, r4
 8000482:	4602      	mov	r2, r0
 8000484:	4919      	ldr	r1, [pc, #100]	@ (80004ec <main+0x110>)
 8000486:	481a      	ldr	r0, [pc, #104]	@ (80004f0 <main+0x114>)
 8000488:	f003 f89c 	bl	80035c4 <siprintf>

	  // Update OLED screen
	  SSD1306_Fill(SSD1306_COLOR_BLACK);
 800048c:	2000      	movs	r0, #0
 800048e:	f000 fa39 	bl	8000904 <SSD1306_Fill>
	  SSD1306_GotoXY(0, 0);
 8000492:	2100      	movs	r1, #0
 8000494:	2000      	movs	r0, #0
 8000496:	f000 faab 	bl	80009f0 <SSD1306_GotoXY>
	  SSD1306_Puts(line1, &Font_11x18, SSD1306_COLOR_WHITE);
 800049a:	2201      	movs	r2, #1
 800049c:	4915      	ldr	r1, [pc, #84]	@ (80004f4 <main+0x118>)
 800049e:	4811      	ldr	r0, [pc, #68]	@ (80004e4 <main+0x108>)
 80004a0:	f000 fb3a 	bl	8000b18 <SSD1306_Puts>
	  SSD1306_GotoXY(0, 24);
 80004a4:	2118      	movs	r1, #24
 80004a6:	2000      	movs	r0, #0
 80004a8:	f000 faa2 	bl	80009f0 <SSD1306_GotoXY>
	  SSD1306_Puts(line2, &Font_7x10, SSD1306_COLOR_WHITE);
 80004ac:	2201      	movs	r2, #1
 80004ae:	4912      	ldr	r1, [pc, #72]	@ (80004f8 <main+0x11c>)
 80004b0:	480f      	ldr	r0, [pc, #60]	@ (80004f0 <main+0x114>)
 80004b2:	f000 fb31 	bl	8000b18 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 80004b6:	f000 f9f7 	bl	80008a8 <SSD1306_UpdateScreen>

	  HAL_Delay(1000);
 80004ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004be:	f000 fd8f 	bl	8000fe0 <HAL_Delay>
	  DS3231_GetTime(&hour, &min, &sec);
 80004c2:	e7a9      	b.n	8000418 <main+0x3c>
 80004c4:	2000016e 	.word	0x2000016e
 80004c8:	2000016d 	.word	0x2000016d
 80004cc:	2000016c 	.word	0x2000016c
 80004d0:	20000171 	.word	0x20000171
 80004d4:	20000172 	.word	0x20000172
 80004d8:	20000170 	.word	0x20000170
 80004dc:	2000016f 	.word	0x2000016f
 80004e0:	08003f58 	.word	0x08003f58
 80004e4:	20000140 	.word	0x20000140
 80004e8:	20000010 	.word	0x20000010
 80004ec:	08003f68 	.word	0x08003f68
 80004f0:	20000154 	.word	0x20000154
 80004f4:	20000008 	.word	0x20000008
 80004f8:	20000000 	.word	0x20000000

080004fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b090      	sub	sp, #64	@ 0x40
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0318 	add.w	r3, r7, #24
 8000506:	2228      	movs	r2, #40	@ 0x28
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f003 f87c 	bl	8003608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	1d3b      	adds	r3, r7, #4
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800051e:	2301      	movs	r3, #1
 8000520:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000522:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000526:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052c:	2301      	movs	r3, #1
 800052e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000530:	2302      	movs	r3, #2
 8000532:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000534:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000538:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800053a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800053e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000540:	f107 0318 	add.w	r3, r7, #24
 8000544:	4618      	mov	r0, r3
 8000546:	f002 fb4f 	bl	8002be8 <HAL_RCC_OscConfig>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000550:	f000 f8e0 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000554:	230f      	movs	r3, #15
 8000556:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000558:	2302      	movs	r3, #2
 800055a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000560:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000564:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2102      	movs	r1, #2
 800056e:	4618      	mov	r0, r3
 8000570:	f002 fdbc 	bl	80030ec <HAL_RCC_ClockConfig>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800057a:	f000 f8cb 	bl	8000714 <Error_Handler>
  }
}
 800057e:	bf00      	nop
 8000580:	3740      	adds	r7, #64	@ 0x40
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
	...

08000588 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800058c:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <MX_I2C1_Init+0x50>)
 800058e:	4a13      	ldr	r2, [pc, #76]	@ (80005dc <MX_I2C1_Init+0x54>)
 8000590:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000592:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <MX_I2C1_Init+0x50>)
 8000594:	4a12      	ldr	r2, [pc, #72]	@ (80005e0 <MX_I2C1_Init+0x58>)
 8000596:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <MX_I2C1_Init+0x50>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800059e:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <MX_I2C1_Init+0x50>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <MX_I2C1_Init+0x50>)
 80005a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ac:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <MX_I2C1_Init+0x50>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005b2:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <MX_I2C1_Init+0x50>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b8:	4b07      	ldr	r3, [pc, #28]	@ (80005d8 <MX_I2C1_Init+0x50>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005be:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <MX_I2C1_Init+0x50>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c4:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <MX_I2C1_Init+0x50>)
 80005c6:	f000 fffb 	bl	80015c0 <HAL_I2C_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005d0:	f000 f8a0 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000a4 	.word	0x200000a4
 80005dc:	40005400 	.word	0x40005400
 80005e0:	00061a80 	.word	0x00061a80

080005e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005e8:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 80005ea:	4a12      	ldr	r2, [pc, #72]	@ (8000634 <MX_USART2_UART_Init+0x50>)
 80005ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ee:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 80005f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000602:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 800060a:	220c      	movs	r2, #12
 800060c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <MX_USART2_UART_Init+0x4c>)
 800061c:	f002 fef4 	bl	8003408 <HAL_UART_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000626:	f000 f875 	bl	8000714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200000f8 	.word	0x200000f8
 8000634:	40004400 	.word	0x40004400

08000638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b088      	sub	sp, #32
 800063c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064c:	4b2d      	ldr	r3, [pc, #180]	@ (8000704 <MX_GPIO_Init+0xcc>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a2c      	ldr	r2, [pc, #176]	@ (8000704 <MX_GPIO_Init+0xcc>)
 8000652:	f043 0310 	orr.w	r3, r3, #16
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b2a      	ldr	r3, [pc, #168]	@ (8000704 <MX_GPIO_Init+0xcc>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0310 	and.w	r3, r3, #16
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <MX_GPIO_Init+0xcc>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a26      	ldr	r2, [pc, #152]	@ (8000704 <MX_GPIO_Init+0xcc>)
 800066a:	f043 0320 	orr.w	r3, r3, #32
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b24      	ldr	r3, [pc, #144]	@ (8000704 <MX_GPIO_Init+0xcc>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0320 	and.w	r3, r3, #32
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <MX_GPIO_Init+0xcc>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a20      	ldr	r2, [pc, #128]	@ (8000704 <MX_GPIO_Init+0xcc>)
 8000682:	f043 0304 	orr.w	r3, r3, #4
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <MX_GPIO_Init+0xcc>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0304 	and.w	r3, r3, #4
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000694:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <MX_GPIO_Init+0xcc>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a1a      	ldr	r2, [pc, #104]	@ (8000704 <MX_GPIO_Init+0xcc>)
 800069a:	f043 0308 	orr.w	r3, r3, #8
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b18      	ldr	r3, [pc, #96]	@ (8000704 <MX_GPIO_Init+0xcc>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	2120      	movs	r1, #32
 80006b0:	4815      	ldr	r0, [pc, #84]	@ (8000708 <MX_GPIO_Init+0xd0>)
 80006b2:	f000 ff4b 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006bc:	4b13      	ldr	r3, [pc, #76]	@ (800070c <MX_GPIO_Init+0xd4>)
 80006be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	4811      	ldr	r0, [pc, #68]	@ (8000710 <MX_GPIO_Init+0xd8>)
 80006cc:	f000 fdba 	bl	8001244 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006d0:	2320      	movs	r3, #32
 80006d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d4:	2301      	movs	r3, #1
 80006d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d8:	2300      	movs	r3, #0
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006dc:	2302      	movs	r3, #2
 80006de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	4619      	mov	r1, r3
 80006e6:	4808      	ldr	r0, [pc, #32]	@ (8000708 <MX_GPIO_Init+0xd0>)
 80006e8:	f000 fdac 	bl	8001244 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2100      	movs	r1, #0
 80006f0:	2028      	movs	r0, #40	@ 0x28
 80006f2:	f000 fd70 	bl	80011d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006f6:	2028      	movs	r0, #40	@ 0x28
 80006f8:	f000 fd89 	bl	800120e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006fc:	bf00      	nop
 80006fe:	3720      	adds	r7, #32
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	40010800 	.word	0x40010800
 800070c:	10110000 	.word	0x10110000
 8000710:	40011000 	.word	0x40011000

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <Error_Handler+0x8>

08000720 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000726:	f000 fa1d 	bl	8000b64 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800072a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800072e:	2201      	movs	r2, #1
 8000730:	2178      	movs	r1, #120	@ 0x78
 8000732:	485b      	ldr	r0, [pc, #364]	@ (80008a0 <SSD1306_Init+0x180>)
 8000734:	f001 fcf4 	bl	8002120 <HAL_I2C_IsDeviceReady>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800073e:	2300      	movs	r3, #0
 8000740:	e0a9      	b.n	8000896 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000742:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000746:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000748:	e002      	b.n	8000750 <SSD1306_Init+0x30>
		p--;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	3b01      	subs	r3, #1
 800074e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d1f9      	bne.n	800074a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000756:	22ae      	movs	r2, #174	@ 0xae
 8000758:	2100      	movs	r1, #0
 800075a:	2078      	movs	r0, #120	@ 0x78
 800075c:	f000 fa7c 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000760:	2220      	movs	r2, #32
 8000762:	2100      	movs	r1, #0
 8000764:	2078      	movs	r0, #120	@ 0x78
 8000766:	f000 fa77 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800076a:	2210      	movs	r2, #16
 800076c:	2100      	movs	r1, #0
 800076e:	2078      	movs	r0, #120	@ 0x78
 8000770:	f000 fa72 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000774:	22b0      	movs	r2, #176	@ 0xb0
 8000776:	2100      	movs	r1, #0
 8000778:	2078      	movs	r0, #120	@ 0x78
 800077a:	f000 fa6d 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800077e:	22c8      	movs	r2, #200	@ 0xc8
 8000780:	2100      	movs	r1, #0
 8000782:	2078      	movs	r0, #120	@ 0x78
 8000784:	f000 fa68 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000788:	2200      	movs	r2, #0
 800078a:	2100      	movs	r1, #0
 800078c:	2078      	movs	r0, #120	@ 0x78
 800078e:	f000 fa63 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000792:	2210      	movs	r2, #16
 8000794:	2100      	movs	r1, #0
 8000796:	2078      	movs	r0, #120	@ 0x78
 8000798:	f000 fa5e 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800079c:	2240      	movs	r2, #64	@ 0x40
 800079e:	2100      	movs	r1, #0
 80007a0:	2078      	movs	r0, #120	@ 0x78
 80007a2:	f000 fa59 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80007a6:	2281      	movs	r2, #129	@ 0x81
 80007a8:	2100      	movs	r1, #0
 80007aa:	2078      	movs	r0, #120	@ 0x78
 80007ac:	f000 fa54 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80007b0:	22ff      	movs	r2, #255	@ 0xff
 80007b2:	2100      	movs	r1, #0
 80007b4:	2078      	movs	r0, #120	@ 0x78
 80007b6:	f000 fa4f 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80007ba:	22a1      	movs	r2, #161	@ 0xa1
 80007bc:	2100      	movs	r1, #0
 80007be:	2078      	movs	r0, #120	@ 0x78
 80007c0:	f000 fa4a 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80007c4:	22a6      	movs	r2, #166	@ 0xa6
 80007c6:	2100      	movs	r1, #0
 80007c8:	2078      	movs	r0, #120	@ 0x78
 80007ca:	f000 fa45 	bl	8000c58 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80007ce:	22a8      	movs	r2, #168	@ 0xa8
 80007d0:	2100      	movs	r1, #0
 80007d2:	2078      	movs	r0, #120	@ 0x78
 80007d4:	f000 fa40 	bl	8000c58 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 80007d8:	223f      	movs	r2, #63	@ 0x3f
 80007da:	2100      	movs	r1, #0
 80007dc:	2078      	movs	r0, #120	@ 0x78
 80007de:	f000 fa3b 	bl	8000c58 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80007e2:	22a4      	movs	r2, #164	@ 0xa4
 80007e4:	2100      	movs	r1, #0
 80007e6:	2078      	movs	r0, #120	@ 0x78
 80007e8:	f000 fa36 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80007ec:	22d3      	movs	r2, #211	@ 0xd3
 80007ee:	2100      	movs	r1, #0
 80007f0:	2078      	movs	r0, #120	@ 0x78
 80007f2:	f000 fa31 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	2078      	movs	r0, #120	@ 0x78
 80007fc:	f000 fa2c 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000800:	22d5      	movs	r2, #213	@ 0xd5
 8000802:	2100      	movs	r1, #0
 8000804:	2078      	movs	r0, #120	@ 0x78
 8000806:	f000 fa27 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800080a:	22f0      	movs	r2, #240	@ 0xf0
 800080c:	2100      	movs	r1, #0
 800080e:	2078      	movs	r0, #120	@ 0x78
 8000810:	f000 fa22 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000814:	22d9      	movs	r2, #217	@ 0xd9
 8000816:	2100      	movs	r1, #0
 8000818:	2078      	movs	r0, #120	@ 0x78
 800081a:	f000 fa1d 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800081e:	2222      	movs	r2, #34	@ 0x22
 8000820:	2100      	movs	r1, #0
 8000822:	2078      	movs	r0, #120	@ 0x78
 8000824:	f000 fa18 	bl	8000c58 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000828:	22da      	movs	r2, #218	@ 0xda
 800082a:	2100      	movs	r1, #0
 800082c:	2078      	movs	r0, #120	@ 0x78
 800082e:	f000 fa13 	bl	8000c58 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8000832:	2212      	movs	r2, #18
 8000834:	2100      	movs	r1, #0
 8000836:	2078      	movs	r0, #120	@ 0x78
 8000838:	f000 fa0e 	bl	8000c58 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800083c:	22db      	movs	r2, #219	@ 0xdb
 800083e:	2100      	movs	r1, #0
 8000840:	2078      	movs	r0, #120	@ 0x78
 8000842:	f000 fa09 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000846:	2220      	movs	r2, #32
 8000848:	2100      	movs	r1, #0
 800084a:	2078      	movs	r0, #120	@ 0x78
 800084c:	f000 fa04 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000850:	228d      	movs	r2, #141	@ 0x8d
 8000852:	2100      	movs	r1, #0
 8000854:	2078      	movs	r0, #120	@ 0x78
 8000856:	f000 f9ff 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800085a:	2214      	movs	r2, #20
 800085c:	2100      	movs	r1, #0
 800085e:	2078      	movs	r0, #120	@ 0x78
 8000860:	f000 f9fa 	bl	8000c58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000864:	22af      	movs	r2, #175	@ 0xaf
 8000866:	2100      	movs	r1, #0
 8000868:	2078      	movs	r0, #120	@ 0x78
 800086a:	f000 f9f5 	bl	8000c58 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800086e:	222e      	movs	r2, #46	@ 0x2e
 8000870:	2100      	movs	r1, #0
 8000872:	2078      	movs	r0, #120	@ 0x78
 8000874:	f000 f9f0 	bl	8000c58 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000878:	2000      	movs	r0, #0
 800087a:	f000 f843 	bl	8000904 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800087e:	f000 f813 	bl	80008a8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000882:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <SSD1306_Init+0x184>)
 8000884:	2200      	movs	r2, #0
 8000886:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000888:	4b06      	ldr	r3, [pc, #24]	@ (80008a4 <SSD1306_Init+0x184>)
 800088a:	2200      	movs	r2, #0
 800088c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800088e:	4b05      	ldr	r3, [pc, #20]	@ (80008a4 <SSD1306_Init+0x184>)
 8000890:	2201      	movs	r2, #1
 8000892:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000894:	2301      	movs	r3, #1
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200000a4 	.word	0x200000a4
 80008a4:	20000574 	.word	0x20000574

080008a8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	71fb      	strb	r3, [r7, #7]
 80008b2:	e01d      	b.n	80008f0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	3b50      	subs	r3, #80	@ 0x50
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	461a      	mov	r2, r3
 80008bc:	2100      	movs	r1, #0
 80008be:	2078      	movs	r0, #120	@ 0x78
 80008c0:	f000 f9ca 	bl	8000c58 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2100      	movs	r1, #0
 80008c8:	2078      	movs	r0, #120	@ 0x78
 80008ca:	f000 f9c5 	bl	8000c58 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80008ce:	2210      	movs	r2, #16
 80008d0:	2100      	movs	r1, #0
 80008d2:	2078      	movs	r0, #120	@ 0x78
 80008d4:	f000 f9c0 	bl	8000c58 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	01db      	lsls	r3, r3, #7
 80008dc:	4a08      	ldr	r2, [pc, #32]	@ (8000900 <SSD1306_UpdateScreen+0x58>)
 80008de:	441a      	add	r2, r3
 80008e0:	2380      	movs	r3, #128	@ 0x80
 80008e2:	2140      	movs	r1, #64	@ 0x40
 80008e4:	2078      	movs	r0, #120	@ 0x78
 80008e6:	f000 f951 	bl	8000b8c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	3301      	adds	r3, #1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b07      	cmp	r3, #7
 80008f4:	d9de      	bls.n	80008b4 <SSD1306_UpdateScreen+0xc>
	}
}
 80008f6:	bf00      	nop
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000174 	.word	0x20000174

08000904 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <SSD1306_Fill+0x14>
 8000914:	2300      	movs	r3, #0
 8000916:	e000      	b.n	800091a <SSD1306_Fill+0x16>
 8000918:	23ff      	movs	r3, #255	@ 0xff
 800091a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800091e:	4619      	mov	r1, r3
 8000920:	4803      	ldr	r0, [pc, #12]	@ (8000930 <SSD1306_Fill+0x2c>)
 8000922:	f002 fe71 	bl	8003608 <memset>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000174 	.word	0x20000174

08000934 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
 800093e:	460b      	mov	r3, r1
 8000940:	80bb      	strh	r3, [r7, #4]
 8000942:	4613      	mov	r3, r2
 8000944:	70fb      	strb	r3, [r7, #3]
	if (
 8000946:	88fb      	ldrh	r3, [r7, #6]
 8000948:	2b7f      	cmp	r3, #127	@ 0x7f
 800094a:	d848      	bhi.n	80009de <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800094c:	88bb      	ldrh	r3, [r7, #4]
 800094e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000950:	d845      	bhi.n	80009de <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000952:	4b25      	ldr	r3, [pc, #148]	@ (80009e8 <SSD1306_DrawPixel+0xb4>)
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d006      	beq.n	8000968 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800095a:	78fb      	ldrb	r3, [r7, #3]
 800095c:	2b00      	cmp	r3, #0
 800095e:	bf0c      	ite	eq
 8000960:	2301      	moveq	r3, #1
 8000962:	2300      	movne	r3, #0
 8000964:	b2db      	uxtb	r3, r3
 8000966:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d11a      	bne.n	80009a4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800096e:	88fa      	ldrh	r2, [r7, #6]
 8000970:	88bb      	ldrh	r3, [r7, #4]
 8000972:	08db      	lsrs	r3, r3, #3
 8000974:	b298      	uxth	r0, r3
 8000976:	4603      	mov	r3, r0
 8000978:	01db      	lsls	r3, r3, #7
 800097a:	4413      	add	r3, r2
 800097c:	4a1b      	ldr	r2, [pc, #108]	@ (80009ec <SSD1306_DrawPixel+0xb8>)
 800097e:	5cd3      	ldrb	r3, [r2, r3]
 8000980:	b25a      	sxtb	r2, r3
 8000982:	88bb      	ldrh	r3, [r7, #4]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	2101      	movs	r1, #1
 800098a:	fa01 f303 	lsl.w	r3, r1, r3
 800098e:	b25b      	sxtb	r3, r3
 8000990:	4313      	orrs	r3, r2
 8000992:	b259      	sxtb	r1, r3
 8000994:	88fa      	ldrh	r2, [r7, #6]
 8000996:	4603      	mov	r3, r0
 8000998:	01db      	lsls	r3, r3, #7
 800099a:	4413      	add	r3, r2
 800099c:	b2c9      	uxtb	r1, r1
 800099e:	4a13      	ldr	r2, [pc, #76]	@ (80009ec <SSD1306_DrawPixel+0xb8>)
 80009a0:	54d1      	strb	r1, [r2, r3]
 80009a2:	e01d      	b.n	80009e0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80009a4:	88fa      	ldrh	r2, [r7, #6]
 80009a6:	88bb      	ldrh	r3, [r7, #4]
 80009a8:	08db      	lsrs	r3, r3, #3
 80009aa:	b298      	uxth	r0, r3
 80009ac:	4603      	mov	r3, r0
 80009ae:	01db      	lsls	r3, r3, #7
 80009b0:	4413      	add	r3, r2
 80009b2:	4a0e      	ldr	r2, [pc, #56]	@ (80009ec <SSD1306_DrawPixel+0xb8>)
 80009b4:	5cd3      	ldrb	r3, [r2, r3]
 80009b6:	b25a      	sxtb	r2, r3
 80009b8:	88bb      	ldrh	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	2101      	movs	r1, #1
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	b25b      	sxtb	r3, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	4013      	ands	r3, r2
 80009cc:	b259      	sxtb	r1, r3
 80009ce:	88fa      	ldrh	r2, [r7, #6]
 80009d0:	4603      	mov	r3, r0
 80009d2:	01db      	lsls	r3, r3, #7
 80009d4:	4413      	add	r3, r2
 80009d6:	b2c9      	uxtb	r1, r1
 80009d8:	4a04      	ldr	r2, [pc, #16]	@ (80009ec <SSD1306_DrawPixel+0xb8>)
 80009da:	54d1      	strb	r1, [r2, r3]
 80009dc:	e000      	b.n	80009e0 <SSD1306_DrawPixel+0xac>
		return;
 80009de:	bf00      	nop
	}
}
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr
 80009e8:	20000574 	.word	0x20000574
 80009ec:	20000174 	.word	0x20000174

080009f0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	460a      	mov	r2, r1
 80009fa:	80fb      	strh	r3, [r7, #6]
 80009fc:	4613      	mov	r3, r2
 80009fe:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000a00:	4a05      	ldr	r2, [pc, #20]	@ (8000a18 <SSD1306_GotoXY+0x28>)
 8000a02:	88fb      	ldrh	r3, [r7, #6]
 8000a04:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000a06:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <SSD1306_GotoXY+0x28>)
 8000a08:	88bb      	ldrh	r3, [r7, #4]
 8000a0a:	8053      	strh	r3, [r2, #2]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000574 	.word	0x20000574

08000a1c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000a2c:	4b39      	ldr	r3, [pc, #228]	@ (8000b14 <SSD1306_Putc+0xf8>)
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
	if (
 8000a38:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a3a:	dc07      	bgt.n	8000a4c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000a3c:	4b35      	ldr	r3, [pc, #212]	@ (8000b14 <SSD1306_Putc+0xf8>)
 8000a3e:	885b      	ldrh	r3, [r3, #2]
 8000a40:	461a      	mov	r2, r3
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	785b      	ldrb	r3, [r3, #1]
 8000a46:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000a48:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a4a:	dd01      	ble.n	8000a50 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	e05d      	b.n	8000b0c <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
 8000a54:	e04b      	b.n	8000aee <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685a      	ldr	r2, [r3, #4]
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	3b20      	subs	r3, #32
 8000a5e:	6839      	ldr	r1, [r7, #0]
 8000a60:	7849      	ldrb	r1, [r1, #1]
 8000a62:	fb01 f303 	mul.w	r3, r1, r3
 8000a66:	4619      	mov	r1, r3
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	440b      	add	r3, r1
 8000a6c:	005b      	lsls	r3, r3, #1
 8000a6e:	4413      	add	r3, r2
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
 8000a78:	e030      	b.n	8000adc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d010      	beq.n	8000aac <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000a8a:	4b22      	ldr	r3, [pc, #136]	@ (8000b14 <SSD1306_Putc+0xf8>)
 8000a8c:	881a      	ldrh	r2, [r3, #0]
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	4413      	add	r3, r2
 8000a94:	b298      	uxth	r0, r3
 8000a96:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <SSD1306_Putc+0xf8>)
 8000a98:	885a      	ldrh	r2, [r3, #2]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	4413      	add	r3, r2
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	79ba      	ldrb	r2, [r7, #6]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f7ff ff45 	bl	8000934 <SSD1306_DrawPixel>
 8000aaa:	e014      	b.n	8000ad6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000aac:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <SSD1306_Putc+0xf8>)
 8000aae:	881a      	ldrh	r2, [r3, #0]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b298      	uxth	r0, r3
 8000ab8:	4b16      	ldr	r3, [pc, #88]	@ (8000b14 <SSD1306_Putc+0xf8>)
 8000aba:	885a      	ldrh	r2, [r3, #2]
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	4413      	add	r3, r2
 8000ac2:	b299      	uxth	r1, r3
 8000ac4:	79bb      	ldrb	r3, [r7, #6]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bf0c      	ite	eq
 8000aca:	2301      	moveq	r3, #1
 8000acc:	2300      	movne	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	f7ff ff2f 	bl	8000934 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000ad6:	693b      	ldr	r3, [r7, #16]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d3c8      	bcc.n	8000a7a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	3301      	adds	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	785b      	ldrb	r3, [r3, #1]
 8000af2:	461a      	mov	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d3ad      	bcc.n	8000a56 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000afa:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <SSD1306_Putc+0xf8>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <SSD1306_Putc+0xf8>)
 8000b08:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000574 	.word	0x20000574

08000b18 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	4613      	mov	r3, r2
 8000b24:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000b26:	e012      	b.n	8000b4e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	79fa      	ldrb	r2, [r7, #7]
 8000b2e:	68b9      	ldr	r1, [r7, #8]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff ff73 	bl	8000a1c <SSD1306_Putc>
 8000b36:	4603      	mov	r3, r0
 8000b38:	461a      	mov	r2, r3
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	429a      	cmp	r2, r3
 8000b40:	d002      	beq.n	8000b48 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	e008      	b.n	8000b5a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d1e8      	bne.n	8000b28 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	781b      	ldrb	r3, [r3, #0]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <ssd1306_I2C_Init+0x24>)
 8000b6c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b6e:	e002      	b.n	8000b76 <ssd1306_I2C_Init+0x12>
		p--;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	3b01      	subs	r3, #1
 8000b74:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1f9      	bne.n	8000b70 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	0003d090 	.word	0x0003d090

08000b8c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b0c7      	sub	sp, #284	@ 0x11c
 8000b90:	af02      	add	r7, sp, #8
 8000b92:	4604      	mov	r4, r0
 8000b94:	4608      	mov	r0, r1
 8000b96:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000b9a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000b9e:	600a      	str	r2, [r1, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ba6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000baa:	4622      	mov	r2, r4
 8000bac:	701a      	strb	r2, [r3, #0]
 8000bae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bb2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	701a      	strb	r2, [r3, #0]
 8000bba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bbe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000bc2:	460a      	mov	r2, r1
 8000bc4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000bc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000bca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000bce:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bd2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000bd6:	7812      	ldrb	r2, [r2, #0]
 8000bd8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000be0:	e015      	b.n	8000c0e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000be2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000be6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bea:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000bee:	6812      	ldr	r2, [r2, #0]
 8000bf0:	441a      	add	r2, r3
 8000bf2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	7811      	ldrb	r1, [r2, #0]
 8000bfa:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000bfe:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000c02:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000c04:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c08:	3301      	adds	r3, #1
 8000c0a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000c0e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000c18:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000c1c:	8812      	ldrh	r2, [r2, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d8df      	bhi.n	8000be2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8000c22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c26:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b299      	uxth	r1, r3
 8000c2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000c32:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	b29b      	uxth	r3, r3
 8000c3c:	f107 020c 	add.w	r2, r7, #12
 8000c40:	200a      	movs	r0, #10
 8000c42:	9000      	str	r0, [sp, #0]
 8000c44:	4803      	ldr	r0, [pc, #12]	@ (8000c54 <ssd1306_I2C_WriteMulti+0xc8>)
 8000c46:	f000 fdff 	bl	8001848 <HAL_I2C_Master_Transmit>
}
 8000c4a:	bf00      	nop
 8000c4c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	200000a4 	.word	0x200000a4

08000c58 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af02      	add	r7, sp, #8
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
 8000c62:	460b      	mov	r3, r1
 8000c64:	71bb      	strb	r3, [r7, #6]
 8000c66:	4613      	mov	r3, r2
 8000c68:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000c6e:	797b      	ldrb	r3, [r7, #5]
 8000c70:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	b299      	uxth	r1, r3
 8000c76:	f107 020c 	add.w	r2, r7, #12
 8000c7a:	230a      	movs	r3, #10
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2302      	movs	r3, #2
 8000c80:	4803      	ldr	r0, [pc, #12]	@ (8000c90 <ssd1306_I2C_Write+0x38>)
 8000c82:	f000 fde1 	bl	8001848 <HAL_I2C_Master_Transmit>
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	200000a4 	.word	0x200000a4

08000c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b085      	sub	sp, #20
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9a:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <HAL_MspInit+0x5c>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a14      	ldr	r2, [pc, #80]	@ (8000cf0 <HAL_MspInit+0x5c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	4b12      	ldr	r3, [pc, #72]	@ (8000cf0 <HAL_MspInit+0x5c>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <HAL_MspInit+0x5c>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000cf0 <HAL_MspInit+0x5c>)
 8000cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cbc:	61d3      	str	r3, [r2, #28]
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <HAL_MspInit+0x5c>)
 8000cc0:	69db      	ldr	r3, [r3, #28]
 8000cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <HAL_MspInit+0x60>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	4a04      	ldr	r2, [pc, #16]	@ (8000cf4 <HAL_MspInit+0x60>)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	3714      	adds	r7, #20
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000

08000cf8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b088      	sub	sp, #32
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a15      	ldr	r2, [pc, #84]	@ (8000d68 <HAL_I2C_MspInit+0x70>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d123      	bne.n	8000d60 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d18:	4b14      	ldr	r3, [pc, #80]	@ (8000d6c <HAL_I2C_MspInit+0x74>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	4a13      	ldr	r2, [pc, #76]	@ (8000d6c <HAL_I2C_MspInit+0x74>)
 8000d1e:	f043 0308 	orr.w	r3, r3, #8
 8000d22:	6193      	str	r3, [r2, #24]
 8000d24:	4b11      	ldr	r3, [pc, #68]	@ (8000d6c <HAL_I2C_MspInit+0x74>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	60fb      	str	r3, [r7, #12]
 8000d2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d30:	23c0      	movs	r3, #192	@ 0xc0
 8000d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d34:	2312      	movs	r3, #18
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 0310 	add.w	r3, r7, #16
 8000d40:	4619      	mov	r1, r3
 8000d42:	480b      	ldr	r0, [pc, #44]	@ (8000d70 <HAL_I2C_MspInit+0x78>)
 8000d44:	f000 fa7e 	bl	8001244 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d48:	4b08      	ldr	r3, [pc, #32]	@ (8000d6c <HAL_I2C_MspInit+0x74>)
 8000d4a:	69db      	ldr	r3, [r3, #28]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	@ (8000d6c <HAL_I2C_MspInit+0x74>)
 8000d4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d52:	61d3      	str	r3, [r2, #28]
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <HAL_I2C_MspInit+0x74>)
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d60:	bf00      	nop
 8000d62:	3720      	adds	r7, #32
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40005400 	.word	0x40005400
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	40010c00 	.word	0x40010c00

08000d74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7c:	f107 0310 	add.w	r3, r7, #16
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a15      	ldr	r2, [pc, #84]	@ (8000de4 <HAL_UART_MspInit+0x70>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d123      	bne.n	8000ddc <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d94:	4b14      	ldr	r3, [pc, #80]	@ (8000de8 <HAL_UART_MspInit+0x74>)
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	4a13      	ldr	r2, [pc, #76]	@ (8000de8 <HAL_UART_MspInit+0x74>)
 8000d9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d9e:	61d3      	str	r3, [r2, #28]
 8000da0:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <HAL_UART_MspInit+0x74>)
 8000da2:	69db      	ldr	r3, [r3, #28]
 8000da4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	@ (8000de8 <HAL_UART_MspInit+0x74>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	@ (8000de8 <HAL_UART_MspInit+0x74>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b0b      	ldr	r3, [pc, #44]	@ (8000de8 <HAL_UART_MspInit+0x74>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dc4:	230c      	movs	r3, #12
 8000dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4805      	ldr	r0, [pc, #20]	@ (8000dec <HAL_UART_MspInit+0x78>)
 8000dd8:	f000 fa34 	bl	8001244 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ddc:	bf00      	nop
 8000dde:	3720      	adds	r7, #32
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40004400 	.word	0x40004400
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010800 	.word	0x40010800

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000df4:	bf00      	nop
 8000df6:	e7fd      	b.n	8000df4 <NMI_Handler+0x4>

08000df8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <HardFault_Handler+0x4>

08000e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <MemManage_Handler+0x4>

08000e08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 f8b2 	bl	8000fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e4c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000e50:	f000 fb94 	bl	800157c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	@ (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	@ (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f002 fbc6 	bl	8003618 <__errno>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	@ (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20005000 	.word	0x20005000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	2000057c 	.word	0x2000057c
 8000ec0:	200006d0 	.word	0x200006d0

08000ec4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ed0:	f7ff fff8 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed4:	480b      	ldr	r0, [pc, #44]	@ (8000f04 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ed6:	490c      	ldr	r1, [pc, #48]	@ (8000f08 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ed8:	4a0c      	ldr	r2, [pc, #48]	@ (8000f0c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eea:	4a09      	ldr	r2, [pc, #36]	@ (8000f10 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000eec:	4c09      	ldr	r4, [pc, #36]	@ (8000f14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000efa:	f002 fb93 	bl	8003624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000efe:	f7ff fa6d 	bl	80003dc <main>
  bx lr
 8000f02:	4770      	bx	lr
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000f0c:	080054ac 	.word	0x080054ac
  ldr r2, =_sbss
 8000f10:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000f14:	200006cc 	.word	0x200006cc

08000f18 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC1_2_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f20:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <HAL_Init+0x28>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a07      	ldr	r2, [pc, #28]	@ (8000f44 <HAL_Init+0x28>)
 8000f26:	f043 0310 	orr.w	r3, r3, #16
 8000f2a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f2c:	2003      	movs	r0, #3
 8000f2e:	f000 f947 	bl	80011c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f32:	2000      	movs	r0, #0
 8000f34:	f000 f808 	bl	8000f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f38:	f7ff feac 	bl	8000c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40022000 	.word	0x40022000

08000f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_InitTick+0x54>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_InitTick+0x58>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f95f 	bl	800122a <HAL_SYSTICK_Config>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00e      	b.n	8000f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b0f      	cmp	r3, #15
 8000f7a:	d80a      	bhi.n	8000f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	6879      	ldr	r1, [r7, #4]
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f84:	f000 f927 	bl	80011d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f88:	4a06      	ldr	r2, [pc, #24]	@ (8000fa4 <HAL_InitTick+0x5c>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e000      	b.n	8000f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000002c 	.word	0x2000002c
 8000fa0:	20000034 	.word	0x20000034
 8000fa4:	20000030 	.word	0x20000030

08000fa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fac:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <HAL_IncTick+0x1c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <HAL_IncTick+0x20>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a03      	ldr	r2, [pc, #12]	@ (8000fc8 <HAL_IncTick+0x20>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr
 8000fc4:	20000034 	.word	0x20000034
 8000fc8:	20000580 	.word	0x20000580

08000fcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b02      	ldr	r3, [pc, #8]	@ (8000fdc <HAL_GetTick+0x10>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	20000580 	.word	0x20000580

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff fff0 	bl	8000fcc <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <HAL_Delay+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffe0 	bl	8000fcc <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000034 	.word	0x20000034

08001028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b480      	push	{r7}
 800102a:	b085      	sub	sp, #20
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001038:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103e:	68ba      	ldr	r2, [r7, #8]
 8001040:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001044:	4013      	ands	r3, r2
 8001046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001050:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105a:	4a04      	ldr	r2, [pc, #16]	@ (800106c <__NVIC_SetPriorityGrouping+0x44>)
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	60d3      	str	r3, [r2, #12]
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <__NVIC_GetPriorityGrouping+0x18>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	0a1b      	lsrs	r3, r3, #8
 800107a:	f003 0307 	and.w	r3, r3, #7
}
 800107e:	4618      	mov	r0, r3
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	db0b      	blt.n	80010b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	f003 021f 	and.w	r2, r3, #31
 80010a4:	4906      	ldr	r1, [pc, #24]	@ (80010c0 <__NVIC_EnableIRQ+0x34>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	2001      	movs	r0, #1
 80010ae:	fa00 f202 	lsl.w	r2, r0, r2
 80010b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	@ (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	@ (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	bc80      	pop	{r7}
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	@ 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	@ 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr

0800117c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800118c:	d301      	bcc.n	8001192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118e:	2301      	movs	r3, #1
 8001190:	e00f      	b.n	80011b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001192:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <SysTick_Config+0x40>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3b01      	subs	r3, #1
 8001198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119a:	210f      	movs	r1, #15
 800119c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011a0:	f7ff ff90 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <SysTick_Config+0x40>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011aa:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <SysTick_Config+0x40>)
 80011ac:	2207      	movs	r2, #7
 80011ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	e000e010 	.word	0xe000e010

080011c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff2d 	bl	8001028 <__NVIC_SetPriorityGrouping>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	60b9      	str	r1, [r7, #8]
 80011e0:	607a      	str	r2, [r7, #4]
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011e8:	f7ff ff42 	bl	8001070 <__NVIC_GetPriorityGrouping>
 80011ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	6978      	ldr	r0, [r7, #20]
 80011f4:	f7ff ff90 	bl	8001118 <NVIC_EncodePriority>
 80011f8:	4602      	mov	r2, r0
 80011fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011fe:	4611      	mov	r1, r2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff ff5f 	bl	80010c4 <__NVIC_SetPriority>
}
 8001206:	bf00      	nop
 8001208:	3718      	adds	r7, #24
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff35 	bl	800108c <__NVIC_EnableIRQ>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffa2 	bl	800117c <SysTick_Config>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b08b      	sub	sp, #44	@ 0x2c
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001252:	2300      	movs	r3, #0
 8001254:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001256:	e169      	b.n	800152c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001258:	2201      	movs	r2, #1
 800125a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	69fa      	ldr	r2, [r7, #28]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	429a      	cmp	r2, r3
 8001272:	f040 8158 	bne.w	8001526 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4a9a      	ldr	r2, [pc, #616]	@ (80014e4 <HAL_GPIO_Init+0x2a0>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d05e      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 8001280:	4a98      	ldr	r2, [pc, #608]	@ (80014e4 <HAL_GPIO_Init+0x2a0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d875      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 8001286:	4a98      	ldr	r2, [pc, #608]	@ (80014e8 <HAL_GPIO_Init+0x2a4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d058      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 800128c:	4a96      	ldr	r2, [pc, #600]	@ (80014e8 <HAL_GPIO_Init+0x2a4>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d86f      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 8001292:	4a96      	ldr	r2, [pc, #600]	@ (80014ec <HAL_GPIO_Init+0x2a8>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d052      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 8001298:	4a94      	ldr	r2, [pc, #592]	@ (80014ec <HAL_GPIO_Init+0x2a8>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d869      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 800129e:	4a94      	ldr	r2, [pc, #592]	@ (80014f0 <HAL_GPIO_Init+0x2ac>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d04c      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 80012a4:	4a92      	ldr	r2, [pc, #584]	@ (80014f0 <HAL_GPIO_Init+0x2ac>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d863      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 80012aa:	4a92      	ldr	r2, [pc, #584]	@ (80014f4 <HAL_GPIO_Init+0x2b0>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d046      	beq.n	800133e <HAL_GPIO_Init+0xfa>
 80012b0:	4a90      	ldr	r2, [pc, #576]	@ (80014f4 <HAL_GPIO_Init+0x2b0>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d85d      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 80012b6:	2b12      	cmp	r3, #18
 80012b8:	d82a      	bhi.n	8001310 <HAL_GPIO_Init+0xcc>
 80012ba:	2b12      	cmp	r3, #18
 80012bc:	d859      	bhi.n	8001372 <HAL_GPIO_Init+0x12e>
 80012be:	a201      	add	r2, pc, #4	@ (adr r2, 80012c4 <HAL_GPIO_Init+0x80>)
 80012c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012c4:	0800133f 	.word	0x0800133f
 80012c8:	08001319 	.word	0x08001319
 80012cc:	0800132b 	.word	0x0800132b
 80012d0:	0800136d 	.word	0x0800136d
 80012d4:	08001373 	.word	0x08001373
 80012d8:	08001373 	.word	0x08001373
 80012dc:	08001373 	.word	0x08001373
 80012e0:	08001373 	.word	0x08001373
 80012e4:	08001373 	.word	0x08001373
 80012e8:	08001373 	.word	0x08001373
 80012ec:	08001373 	.word	0x08001373
 80012f0:	08001373 	.word	0x08001373
 80012f4:	08001373 	.word	0x08001373
 80012f8:	08001373 	.word	0x08001373
 80012fc:	08001373 	.word	0x08001373
 8001300:	08001373 	.word	0x08001373
 8001304:	08001373 	.word	0x08001373
 8001308:	08001321 	.word	0x08001321
 800130c:	08001335 	.word	0x08001335
 8001310:	4a79      	ldr	r2, [pc, #484]	@ (80014f8 <HAL_GPIO_Init+0x2b4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d013      	beq.n	800133e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001316:	e02c      	b.n	8001372 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	623b      	str	r3, [r7, #32]
          break;
 800131e:	e029      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	3304      	adds	r3, #4
 8001326:	623b      	str	r3, [r7, #32]
          break;
 8001328:	e024      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	3308      	adds	r3, #8
 8001330:	623b      	str	r3, [r7, #32]
          break;
 8001332:	e01f      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	330c      	adds	r3, #12
 800133a:	623b      	str	r3, [r7, #32]
          break;
 800133c:	e01a      	b.n	8001374 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d102      	bne.n	800134c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001346:	2304      	movs	r3, #4
 8001348:	623b      	str	r3, [r7, #32]
          break;
 800134a:	e013      	b.n	8001374 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d105      	bne.n	8001360 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001354:	2308      	movs	r3, #8
 8001356:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69fa      	ldr	r2, [r7, #28]
 800135c:	611a      	str	r2, [r3, #16]
          break;
 800135e:	e009      	b.n	8001374 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001360:	2308      	movs	r3, #8
 8001362:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69fa      	ldr	r2, [r7, #28]
 8001368:	615a      	str	r2, [r3, #20]
          break;
 800136a:	e003      	b.n	8001374 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800136c:	2300      	movs	r3, #0
 800136e:	623b      	str	r3, [r7, #32]
          break;
 8001370:	e000      	b.n	8001374 <HAL_GPIO_Init+0x130>
          break;
 8001372:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	2bff      	cmp	r3, #255	@ 0xff
 8001378:	d801      	bhi.n	800137e <HAL_GPIO_Init+0x13a>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	e001      	b.n	8001382 <HAL_GPIO_Init+0x13e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	3304      	adds	r3, #4
 8001382:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2bff      	cmp	r3, #255	@ 0xff
 8001388:	d802      	bhi.n	8001390 <HAL_GPIO_Init+0x14c>
 800138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	e002      	b.n	8001396 <HAL_GPIO_Init+0x152>
 8001390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001392:	3b08      	subs	r3, #8
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	210f      	movs	r1, #15
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	401a      	ands	r2, r3
 80013a8:	6a39      	ldr	r1, [r7, #32]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	431a      	orrs	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	f000 80b1 	beq.w	8001526 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013c4:	4b4d      	ldr	r3, [pc, #308]	@ (80014fc <HAL_GPIO_Init+0x2b8>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	@ (80014fc <HAL_GPIO_Init+0x2b8>)
 80013ca:	f043 0301 	orr.w	r3, r3, #1
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b4a      	ldr	r3, [pc, #296]	@ (80014fc <HAL_GPIO_Init+0x2b8>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013dc:	4a48      	ldr	r2, [pc, #288]	@ (8001500 <HAL_GPIO_Init+0x2bc>)
 80013de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4013      	ands	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a40      	ldr	r2, [pc, #256]	@ (8001504 <HAL_GPIO_Init+0x2c0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d013      	beq.n	8001430 <HAL_GPIO_Init+0x1ec>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a3f      	ldr	r2, [pc, #252]	@ (8001508 <HAL_GPIO_Init+0x2c4>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d00d      	beq.n	800142c <HAL_GPIO_Init+0x1e8>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a3e      	ldr	r2, [pc, #248]	@ (800150c <HAL_GPIO_Init+0x2c8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d007      	beq.n	8001428 <HAL_GPIO_Init+0x1e4>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a3d      	ldr	r2, [pc, #244]	@ (8001510 <HAL_GPIO_Init+0x2cc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d101      	bne.n	8001424 <HAL_GPIO_Init+0x1e0>
 8001420:	2303      	movs	r3, #3
 8001422:	e006      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 8001424:	2304      	movs	r3, #4
 8001426:	e004      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 8001428:	2302      	movs	r3, #2
 800142a:	e002      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <HAL_GPIO_Init+0x1ee>
 8001430:	2300      	movs	r3, #0
 8001432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001434:	f002 0203 	and.w	r2, r2, #3
 8001438:	0092      	lsls	r2, r2, #2
 800143a:	4093      	lsls	r3, r2
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001442:	492f      	ldr	r1, [pc, #188]	@ (8001500 <HAL_GPIO_Init+0x2bc>)
 8001444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001446:	089b      	lsrs	r3, r3, #2
 8001448:	3302      	adds	r3, #2
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d006      	beq.n	800146a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800145c:	4b2d      	ldr	r3, [pc, #180]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	492c      	ldr	r1, [pc, #176]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 8001462:	69bb      	ldr	r3, [r7, #24]
 8001464:	4313      	orrs	r3, r2
 8001466:	608b      	str	r3, [r1, #8]
 8001468:	e006      	b.n	8001478 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800146a:	4b2a      	ldr	r3, [pc, #168]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	43db      	mvns	r3, r3
 8001472:	4928      	ldr	r1, [pc, #160]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 8001474:	4013      	ands	r3, r2
 8001476:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d006      	beq.n	8001492 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001484:	4b23      	ldr	r3, [pc, #140]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	4922      	ldr	r1, [pc, #136]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	60cb      	str	r3, [r1, #12]
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001492:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 8001494:	68da      	ldr	r2, [r3, #12]
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	43db      	mvns	r3, r3
 800149a:	491e      	ldr	r1, [pc, #120]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 800149c:	4013      	ands	r3, r2
 800149e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014ac:	4b19      	ldr	r3, [pc, #100]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 80014ae:	685a      	ldr	r2, [r3, #4]
 80014b0:	4918      	ldr	r1, [pc, #96]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
 80014b8:	e006      	b.n	80014c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014ba:	4b16      	ldr	r3, [pc, #88]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	4914      	ldr	r1, [pc, #80]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d021      	beq.n	8001518 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	490e      	ldr	r1, [pc, #56]	@ (8001514 <HAL_GPIO_Init+0x2d0>)
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	4313      	orrs	r3, r2
 80014de:	600b      	str	r3, [r1, #0]
 80014e0:	e021      	b.n	8001526 <HAL_GPIO_Init+0x2e2>
 80014e2:	bf00      	nop
 80014e4:	10320000 	.word	0x10320000
 80014e8:	10310000 	.word	0x10310000
 80014ec:	10220000 	.word	0x10220000
 80014f0:	10210000 	.word	0x10210000
 80014f4:	10120000 	.word	0x10120000
 80014f8:	10110000 	.word	0x10110000
 80014fc:	40021000 	.word	0x40021000
 8001500:	40010000 	.word	0x40010000
 8001504:	40010800 	.word	0x40010800
 8001508:	40010c00 	.word	0x40010c00
 800150c:	40011000 	.word	0x40011000
 8001510:	40011400 	.word	0x40011400
 8001514:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001518:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <HAL_GPIO_Init+0x304>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	43db      	mvns	r3, r3
 8001520:	4909      	ldr	r1, [pc, #36]	@ (8001548 <HAL_GPIO_Init+0x304>)
 8001522:	4013      	ands	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001528:	3301      	adds	r3, #1
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	fa22 f303 	lsr.w	r3, r2, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	f47f ae8e 	bne.w	8001258 <HAL_GPIO_Init+0x14>
  }
}
 800153c:	bf00      	nop
 800153e:	bf00      	nop
 8001540:	372c      	adds	r7, #44	@ 0x2c
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	40010400 	.word	0x40010400

0800154c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
 8001558:	4613      	mov	r3, r2
 800155a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800155c:	787b      	ldrb	r3, [r7, #1]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001568:	e003      	b.n	8001572 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	041a      	lsls	r2, r3, #16
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	611a      	str	r2, [r3, #16]
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	bc80      	pop	{r7}
 800157a:	4770      	bx	lr

0800157c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001586:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001588:	695a      	ldr	r2, [r3, #20]
 800158a:	88fb      	ldrh	r3, [r7, #6]
 800158c:	4013      	ands	r3, r2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d006      	beq.n	80015a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001592:	4a05      	ldr	r2, [pc, #20]	@ (80015a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001594:	88fb      	ldrh	r3, [r7, #6]
 8001596:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f806 	bl	80015ac <HAL_GPIO_EXTI_Callback>
  }
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40010400 	.word	0x40010400

080015ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e12b      	b.n	800182a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d106      	bne.n	80015ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fb86 	bl	8000cf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2224      	movs	r2, #36	@ 0x24
 80015f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 0201 	bic.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001612:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001622:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001624:	f001 feaa 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 8001628:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4a81      	ldr	r2, [pc, #516]	@ (8001834 <HAL_I2C_Init+0x274>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d807      	bhi.n	8001644 <HAL_I2C_Init+0x84>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4a80      	ldr	r2, [pc, #512]	@ (8001838 <HAL_I2C_Init+0x278>)
 8001638:	4293      	cmp	r3, r2
 800163a:	bf94      	ite	ls
 800163c:	2301      	movls	r3, #1
 800163e:	2300      	movhi	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	e006      	b.n	8001652 <HAL_I2C_Init+0x92>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4a7d      	ldr	r2, [pc, #500]	@ (800183c <HAL_I2C_Init+0x27c>)
 8001648:	4293      	cmp	r3, r2
 800164a:	bf94      	ite	ls
 800164c:	2301      	movls	r3, #1
 800164e:	2300      	movhi	r3, #0
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e0e7      	b.n	800182a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4a78      	ldr	r2, [pc, #480]	@ (8001840 <HAL_I2C_Init+0x280>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	0c9b      	lsrs	r3, r3, #18
 8001664:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	68ba      	ldr	r2, [r7, #8]
 8001676:	430a      	orrs	r2, r1
 8001678:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4a6a      	ldr	r2, [pc, #424]	@ (8001834 <HAL_I2C_Init+0x274>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d802      	bhi.n	8001694 <HAL_I2C_Init+0xd4>
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	3301      	adds	r3, #1
 8001692:	e009      	b.n	80016a8 <HAL_I2C_Init+0xe8>
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	4a69      	ldr	r2, [pc, #420]	@ (8001844 <HAL_I2C_Init+0x284>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	099b      	lsrs	r3, r3, #6
 80016a6:	3301      	adds	r3, #1
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	430b      	orrs	r3, r1
 80016ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80016ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	495c      	ldr	r1, [pc, #368]	@ (8001834 <HAL_I2C_Init+0x274>)
 80016c4:	428b      	cmp	r3, r1
 80016c6:	d819      	bhi.n	80016fc <HAL_I2C_Init+0x13c>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	1e59      	subs	r1, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80016d6:	1c59      	adds	r1, r3, #1
 80016d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80016dc:	400b      	ands	r3, r1
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00a      	beq.n	80016f8 <HAL_I2C_Init+0x138>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1e59      	subs	r1, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80016f0:	3301      	adds	r3, #1
 80016f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f6:	e051      	b.n	800179c <HAL_I2C_Init+0x1dc>
 80016f8:	2304      	movs	r3, #4
 80016fa:	e04f      	b.n	800179c <HAL_I2C_Init+0x1dc>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d111      	bne.n	8001728 <HAL_I2C_Init+0x168>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1e58      	subs	r0, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6859      	ldr	r1, [r3, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	440b      	add	r3, r1
 8001712:	fbb0 f3f3 	udiv	r3, r0, r3
 8001716:	3301      	adds	r3, #1
 8001718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800171c:	2b00      	cmp	r3, #0
 800171e:	bf0c      	ite	eq
 8001720:	2301      	moveq	r3, #1
 8001722:	2300      	movne	r3, #0
 8001724:	b2db      	uxtb	r3, r3
 8001726:	e012      	b.n	800174e <HAL_I2C_Init+0x18e>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1e58      	subs	r0, r3, #1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6859      	ldr	r1, [r3, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	440b      	add	r3, r1
 8001736:	0099      	lsls	r1, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	fbb0 f3f3 	udiv	r3, r0, r3
 800173e:	3301      	adds	r3, #1
 8001740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf0c      	ite	eq
 8001748:	2301      	moveq	r3, #1
 800174a:	2300      	movne	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_I2C_Init+0x196>
 8001752:	2301      	movs	r3, #1
 8001754:	e022      	b.n	800179c <HAL_I2C_Init+0x1dc>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10e      	bne.n	800177c <HAL_I2C_Init+0x1bc>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	1e58      	subs	r0, r3, #1
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6859      	ldr	r1, [r3, #4]
 8001766:	460b      	mov	r3, r1
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	440b      	add	r3, r1
 800176c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001770:	3301      	adds	r3, #1
 8001772:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001776:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800177a:	e00f      	b.n	800179c <HAL_I2C_Init+0x1dc>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1e58      	subs	r0, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	0099      	lsls	r1, r3, #2
 800178c:	440b      	add	r3, r1
 800178e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001792:	3301      	adds	r3, #1
 8001794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001798:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800179c:	6879      	ldr	r1, [r7, #4]
 800179e:	6809      	ldr	r1, [r1, #0]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69da      	ldr	r2, [r3, #28]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	431a      	orrs	r2, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80017ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6911      	ldr	r1, [r2, #16]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68d2      	ldr	r2, [r2, #12]
 80017d6:	4311      	orrs	r1, r2
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	430b      	orrs	r3, r1
 80017de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695a      	ldr	r2, [r3, #20]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 0201 	orr.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2220      	movs	r2, #32
 8001816:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	000186a0 	.word	0x000186a0
 8001838:	001e847f 	.word	0x001e847f
 800183c:	003d08ff 	.word	0x003d08ff
 8001840:	431bde83 	.word	0x431bde83
 8001844:	10624dd3 	.word	0x10624dd3

08001848 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af02      	add	r7, sp, #8
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	607a      	str	r2, [r7, #4]
 8001852:	461a      	mov	r2, r3
 8001854:	460b      	mov	r3, r1
 8001856:	817b      	strh	r3, [r7, #10]
 8001858:	4613      	mov	r3, r2
 800185a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff fbb6 	bl	8000fcc <HAL_GetTick>
 8001860:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b20      	cmp	r3, #32
 800186c:	f040 80e0 	bne.w	8001a30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2319      	movs	r3, #25
 8001876:	2201      	movs	r2, #1
 8001878:	4970      	ldr	r1, [pc, #448]	@ (8001a3c <HAL_I2C_Master_Transmit+0x1f4>)
 800187a:	68f8      	ldr	r0, [r7, #12]
 800187c:	f000 ff7e 	bl	800277c <I2C_WaitOnFlagUntilTimeout>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001886:	2302      	movs	r3, #2
 8001888:	e0d3      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_I2C_Master_Transmit+0x50>
 8001894:	2302      	movs	r3, #2
 8001896:	e0cc      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1ea>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d007      	beq.n	80018be <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f042 0201 	orr.w	r2, r2, #1
 80018bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80018cc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2221      	movs	r2, #33	@ 0x21
 80018d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2210      	movs	r2, #16
 80018da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	893a      	ldrh	r2, [r7, #8]
 80018ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4a50      	ldr	r2, [pc, #320]	@ (8001a40 <HAL_I2C_Master_Transmit+0x1f8>)
 80018fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001900:	8979      	ldrh	r1, [r7, #10]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	6a3a      	ldr	r2, [r7, #32]
 8001906:	68f8      	ldr	r0, [r7, #12]
 8001908:	f000 fd38 	bl	800237c <I2C_MasterRequestWrite>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e08d      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	613b      	str	r3, [r7, #16]
 800192a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800192c:	e066      	b.n	80019fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	6a39      	ldr	r1, [r7, #32]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f001 f83c 	bl	80029b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00d      	beq.n	800195a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	2b04      	cmp	r3, #4
 8001944:	d107      	bne.n	8001956 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001954:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e06b      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195e:	781a      	ldrb	r2, [r3, #0]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001974:	b29b      	uxth	r3, r3
 8001976:	3b01      	subs	r3, #1
 8001978:	b29a      	uxth	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001982:	3b01      	subs	r3, #1
 8001984:	b29a      	uxth	r2, r3
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b04      	cmp	r3, #4
 8001996:	d11b      	bne.n	80019d0 <HAL_I2C_Master_Transmit+0x188>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800199c:	2b00      	cmp	r3, #0
 800199e:	d017      	beq.n	80019d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a4:	781a      	ldrb	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b0:	1c5a      	adds	r2, r3, #1
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	3b01      	subs	r3, #1
 80019be:	b29a      	uxth	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c8:	3b01      	subs	r3, #1
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	6a39      	ldr	r1, [r7, #32]
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f001 f833 	bl	8002a40 <I2C_WaitOnBTFFlagUntilTimeout>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00d      	beq.n	80019fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e4:	2b04      	cmp	r3, #4
 80019e6:	d107      	bne.n	80019f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e01a      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d194      	bne.n	800192e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2220      	movs	r2, #32
 8001a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	e000      	b.n	8001a32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a30:	2302      	movs	r3, #2
  }
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	00100002 	.word	0x00100002
 8001a40:	ffff0000 	.word	0xffff0000

08001a44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b088      	sub	sp, #32
 8001a48:	af02      	add	r7, sp, #8
 8001a4a:	60f8      	str	r0, [r7, #12]
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	817b      	strh	r3, [r7, #10]
 8001a56:	460b      	mov	r3, r1
 8001a58:	813b      	strh	r3, [r7, #8]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a5e:	f7ff fab5 	bl	8000fcc <HAL_GetTick>
 8001a62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b20      	cmp	r3, #32
 8001a6e:	f040 80d9 	bne.w	8001c24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2319      	movs	r3, #25
 8001a78:	2201      	movs	r2, #1
 8001a7a:	496d      	ldr	r1, [pc, #436]	@ (8001c30 <HAL_I2C_Mem_Write+0x1ec>)
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	f000 fe7d 	bl	800277c <I2C_WaitOnFlagUntilTimeout>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e0cc      	b.n	8001c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_I2C_Mem_Write+0x56>
 8001a96:	2302      	movs	r3, #2
 8001a98:	e0c5      	b.n	8001c26 <HAL_I2C_Mem_Write+0x1e2>
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d007      	beq.n	8001ac0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ace:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2221      	movs	r2, #33	@ 0x21
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2240      	movs	r2, #64	@ 0x40
 8001adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a3a      	ldr	r2, [r7, #32]
 8001aea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4a4d      	ldr	r2, [pc, #308]	@ (8001c34 <HAL_I2C_Mem_Write+0x1f0>)
 8001b00:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b02:	88f8      	ldrh	r0, [r7, #6]
 8001b04:	893a      	ldrh	r2, [r7, #8]
 8001b06:	8979      	ldrh	r1, [r7, #10]
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	9301      	str	r3, [sp, #4]
 8001b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	4603      	mov	r3, r0
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 fcb4 	bl	8002480 <I2C_RequestMemoryWrite>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d052      	beq.n	8001bc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e081      	b.n	8001c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b22:	697a      	ldr	r2, [r7, #20]
 8001b24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 ff42 	bl	80029b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00d      	beq.n	8001b4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b36:	2b04      	cmp	r3, #4
 8001b38:	d107      	bne.n	8001b4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e06b      	b.n	8001c26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b52:	781a      	ldrb	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	3b01      	subs	r3, #1
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d11b      	bne.n	8001bc4 <HAL_I2C_Mem_Write+0x180>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d017      	beq.n	8001bc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d1aa      	bne.n	8001b22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 ff35 	bl	8002a40 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00d      	beq.n	8001bf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d107      	bne.n	8001bf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e016      	b.n	8001c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	e000      	b.n	8001c26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c24:	2302      	movs	r3, #2
  }
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3718      	adds	r7, #24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	00100002 	.word	0x00100002
 8001c34:	ffff0000 	.word	0xffff0000

08001c38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08c      	sub	sp, #48	@ 0x30
 8001c3c:	af02      	add	r7, sp, #8
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	4608      	mov	r0, r1
 8001c42:	4611      	mov	r1, r2
 8001c44:	461a      	mov	r2, r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	817b      	strh	r3, [r7, #10]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	813b      	strh	r3, [r7, #8]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c56:	f7ff f9b9 	bl	8000fcc <HAL_GetTick>
 8001c5a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	f040 8250 	bne.w	800210a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2319      	movs	r3, #25
 8001c70:	2201      	movs	r2, #1
 8001c72:	4982      	ldr	r1, [pc, #520]	@ (8001e7c <HAL_I2C_Mem_Read+0x244>)
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 fd81 	bl	800277c <I2C_WaitOnFlagUntilTimeout>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001c80:	2302      	movs	r3, #2
 8001c82:	e243      	b.n	800210c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_I2C_Mem_Read+0x5a>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e23c      	b.n	800210c <HAL_I2C_Mem_Read+0x4d4>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d007      	beq.n	8001cb8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f042 0201 	orr.w	r2, r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2222      	movs	r2, #34	@ 0x22
 8001ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2240      	movs	r2, #64	@ 0x40
 8001cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ce2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ce8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4a62      	ldr	r2, [pc, #392]	@ (8001e80 <HAL_I2C_Mem_Read+0x248>)
 8001cf8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cfa:	88f8      	ldrh	r0, [r7, #6]
 8001cfc:	893a      	ldrh	r2, [r7, #8]
 8001cfe:	8979      	ldrh	r1, [r7, #10]
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	4603      	mov	r3, r0
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f000 fc4e 	bl	80025ac <I2C_RequestMemoryRead>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e1f8      	b.n	800210c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d113      	bne.n	8001d4a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e1cc      	b.n	80020e4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d11e      	bne.n	8001d90 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d62:	b672      	cpsid	i
}
 8001d64:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	61bb      	str	r3, [r7, #24]
 8001d7a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d8a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d8c:	b662      	cpsie	i
}
 8001d8e:	e035      	b.n	8001dfc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d11e      	bne.n	8001dd6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001da6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001da8:	b672      	cpsid	i
}
 8001daa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dd2:	b662      	cpsie	i
}
 8001dd4:	e012      	b.n	8001dfc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001de4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001dfc:	e172      	b.n	80020e4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	f200 811f 	bhi.w	8002046 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d123      	bne.n	8001e58 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 fe5b 	bl	8002ad0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e173      	b.n	800210c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e56:	e145      	b.n	80020e4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d152      	bne.n	8001f06 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e66:	2200      	movs	r2, #0
 8001e68:	4906      	ldr	r1, [pc, #24]	@ (8001e84 <HAL_I2C_Mem_Read+0x24c>)
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 fc86 	bl	800277c <I2C_WaitOnFlagUntilTimeout>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d008      	beq.n	8001e88 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e148      	b.n	800210c <HAL_I2C_Mem_Read+0x4d4>
 8001e7a:	bf00      	nop
 8001e7c:	00100002 	.word	0x00100002
 8001e80:	ffff0000 	.word	0xffff0000
 8001e84:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e88:	b672      	cpsid	i
}
 8001e8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ece:	b662      	cpsie	i
}
 8001ed0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	691a      	ldr	r2, [r3, #16]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001f04:	e0ee      	b.n	80020e4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	4981      	ldr	r1, [pc, #516]	@ (8002114 <HAL_I2C_Mem_Read+0x4dc>)
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f000 fc33 	bl	800277c <I2C_WaitOnFlagUntilTimeout>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0f5      	b.n	800210c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
}
 8001f32:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	691a      	ldr	r2, [r3, #16]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3e:	b2d2      	uxtb	r2, r2
 8001f40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f66:	4b6c      	ldr	r3, [pc, #432]	@ (8002118 <HAL_I2C_Mem_Read+0x4e0>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	08db      	lsrs	r3, r3, #3
 8001f6c:	4a6b      	ldr	r2, [pc, #428]	@ (800211c <HAL_I2C_Mem_Read+0x4e4>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0a1a      	lsrs	r2, r3, #8
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	00da      	lsls	r2, r3, #3
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d118      	bne.n	8001fbe <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2220      	movs	r2, #32
 8001f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f043 0220 	orr.w	r2, r3, #32
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001fae:	b662      	cpsie	i
}
 8001fb0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0a6      	b.n	800210c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d1d9      	bne.n	8001f80 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002004:	b29b      	uxth	r3, r3
 8002006:	3b01      	subs	r3, #1
 8002008:	b29a      	uxth	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800200e:	b662      	cpsie	i
}
 8002010:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002024:	1c5a      	adds	r2, r3, #1
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800202e:	3b01      	subs	r3, #1
 8002030:	b29a      	uxth	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b01      	subs	r3, #1
 800203e:	b29a      	uxth	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002044:	e04e      	b.n	80020e4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002048:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fd40 	bl	8002ad0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e058      	b.n	800210c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002082:	b29b      	uxth	r3, r3
 8002084:	3b01      	subs	r3, #1
 8002086:	b29a      	uxth	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d124      	bne.n	80020e4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800209e:	2b03      	cmp	r3, #3
 80020a0:	d107      	bne.n	80020b2 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020b0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	691a      	ldr	r2, [r3, #16]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	1c5a      	adds	r2, r3, #1
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ce:	3b01      	subs	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f47f ae88 	bne.w	8001dfe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2220      	movs	r2, #32
 80020f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800210a:	2302      	movs	r3, #2
  }
}
 800210c:	4618      	mov	r0, r3
 800210e:	3728      	adds	r7, #40	@ 0x28
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	00010004 	.word	0x00010004
 8002118:	2000002c 	.word	0x2000002c
 800211c:	14f8b589 	.word	0x14f8b589

08002120 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	@ 0x28
 8002124:	af02      	add	r7, sp, #8
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	603b      	str	r3, [r7, #0]
 800212c:	460b      	mov	r3, r1
 800212e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7fe ff4c 	bl	8000fcc <HAL_GetTick>
 8002134:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b20      	cmp	r3, #32
 8002144:	f040 8111 	bne.w	800236a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2319      	movs	r3, #25
 800214e:	2201      	movs	r2, #1
 8002150:	4988      	ldr	r1, [pc, #544]	@ (8002374 <HAL_I2C_IsDeviceReady+0x254>)
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f000 fb12 	bl	800277c <I2C_WaitOnFlagUntilTimeout>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800215e:	2302      	movs	r3, #2
 8002160:	e104      	b.n	800236c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_I2C_IsDeviceReady+0x50>
 800216c:	2302      	movs	r3, #2
 800216e:	e0fd      	b.n	800236c <HAL_I2C_IsDeviceReady+0x24c>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b01      	cmp	r3, #1
 8002184:	d007      	beq.n	8002196 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f042 0201 	orr.w	r2, r2, #1
 8002194:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2224      	movs	r2, #36	@ 0x24
 80021aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4a70      	ldr	r2, [pc, #448]	@ (8002378 <HAL_I2C_IsDeviceReady+0x258>)
 80021b8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021c8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 fad0 	bl	800277c <I2C_WaitOnFlagUntilTimeout>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00d      	beq.n	80021fe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021f0:	d103      	bne.n	80021fa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021f8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e0b6      	b.n	800236c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80021fe:	897b      	ldrh	r3, [r7, #10]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800220c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800220e:	f7fe fedd 	bl	8000fcc <HAL_GetTick>
 8002212:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b02      	cmp	r3, #2
 8002220:	bf0c      	ite	eq
 8002222:	2301      	moveq	r3, #1
 8002224:	2300      	movne	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002238:	bf0c      	ite	eq
 800223a:	2301      	moveq	r3, #1
 800223c:	2300      	movne	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002242:	e025      	b.n	8002290 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002244:	f7fe fec2 	bl	8000fcc <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d302      	bcc.n	800225a <HAL_I2C_IsDeviceReady+0x13a>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d103      	bne.n	8002262 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	22a0      	movs	r2, #160	@ 0xa0
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f003 0302 	and.w	r3, r3, #2
 800226c:	2b02      	cmp	r3, #2
 800226e:	bf0c      	ite	eq
 8002270:	2301      	moveq	r3, #1
 8002272:	2300      	movne	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	695b      	ldr	r3, [r3, #20]
 800227e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002282:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002286:	bf0c      	ite	eq
 8002288:	2301      	moveq	r3, #1
 800228a:	2300      	movne	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2ba0      	cmp	r3, #160	@ 0xa0
 800229a:	d005      	beq.n	80022a8 <HAL_I2C_IsDeviceReady+0x188>
 800229c:	7dfb      	ldrb	r3, [r7, #23]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <HAL_I2C_IsDeviceReady+0x188>
 80022a2:	7dbb      	ldrb	r3, [r7, #22]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0cd      	beq.n	8002244 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d129      	bne.n	8002312 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022cc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	2319      	movs	r3, #25
 80022ea:	2201      	movs	r2, #1
 80022ec:	4921      	ldr	r1, [pc, #132]	@ (8002374 <HAL_I2C_IsDeviceReady+0x254>)
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fa44 	bl	800277c <I2C_WaitOnFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e036      	b.n	800236c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e02c      	b.n	800236c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002320:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800232a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	2319      	movs	r3, #25
 8002332:	2201      	movs	r2, #1
 8002334:	490f      	ldr	r1, [pc, #60]	@ (8002374 <HAL_I2C_IsDeviceReady+0x254>)
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 fa20 	bl	800277c <I2C_WaitOnFlagUntilTimeout>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e012      	b.n	800236c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	3301      	adds	r3, #1
 800234a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	f4ff af32 	bcc.w	80021ba <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2220      	movs	r2, #32
 800235a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800236a:	2302      	movs	r3, #2
  }
}
 800236c:	4618      	mov	r0, r3
 800236e:	3720      	adds	r7, #32
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	00100002 	.word	0x00100002
 8002378:	ffff0000 	.word	0xffff0000

0800237c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	607a      	str	r2, [r7, #4]
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	460b      	mov	r3, r1
 800238a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002390:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d006      	beq.n	80023a6 <I2C_MasterRequestWrite+0x2a>
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d003      	beq.n	80023a6 <I2C_MasterRequestWrite+0x2a>
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80023a4:	d108      	bne.n	80023b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	e00b      	b.n	80023d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023bc:	2b12      	cmp	r3, #18
 80023be:	d107      	bne.n	80023d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f9cd 	bl	800277c <I2C_WaitOnFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00d      	beq.n	8002404 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023f6:	d103      	bne.n	8002400 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e035      	b.n	8002470 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800240c:	d108      	bne.n	8002420 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800240e:	897b      	ldrh	r3, [r7, #10]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800241c:	611a      	str	r2, [r3, #16]
 800241e:	e01b      	b.n	8002458 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002420:	897b      	ldrh	r3, [r7, #10]
 8002422:	11db      	asrs	r3, r3, #7
 8002424:	b2db      	uxtb	r3, r3
 8002426:	f003 0306 	and.w	r3, r3, #6
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f063 030f 	orn	r3, r3, #15
 8002430:	b2da      	uxtb	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	490e      	ldr	r1, [pc, #56]	@ (8002478 <I2C_MasterRequestWrite+0xfc>)
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f000 fa16 	bl	8002870 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e010      	b.n	8002470 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800244e:	897b      	ldrh	r3, [r7, #10]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	4907      	ldr	r1, [pc, #28]	@ (800247c <I2C_MasterRequestWrite+0x100>)
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fa06 	bl	8002870 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	00010008 	.word	0x00010008
 800247c:	00010002 	.word	0x00010002

08002480 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	4608      	mov	r0, r1
 800248a:	4611      	mov	r1, r2
 800248c:	461a      	mov	r2, r3
 800248e:	4603      	mov	r3, r0
 8002490:	817b      	strh	r3, [r7, #10]
 8002492:	460b      	mov	r3, r1
 8002494:	813b      	strh	r3, [r7, #8]
 8002496:	4613      	mov	r3, r2
 8002498:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f960 	bl	800277c <I2C_WaitOnFlagUntilTimeout>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00d      	beq.n	80024de <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024d0:	d103      	bne.n	80024da <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e05f      	b.n	800259e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024de:	897b      	ldrh	r3, [r7, #10]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	6a3a      	ldr	r2, [r7, #32]
 80024f2:	492d      	ldr	r1, [pc, #180]	@ (80025a8 <I2C_RequestMemoryWrite+0x128>)
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f9bb 	bl	8002870 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e04c      	b.n	800259e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800251a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251c:	6a39      	ldr	r1, [r7, #32]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fa46 	bl	80029b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00d      	beq.n	8002546 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	2b04      	cmp	r3, #4
 8002530:	d107      	bne.n	8002542 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002540:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e02b      	b.n	800259e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d105      	bne.n	8002558 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800254c:	893b      	ldrh	r3, [r7, #8]
 800254e:	b2da      	uxtb	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	611a      	str	r2, [r3, #16]
 8002556:	e021      	b.n	800259c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002558:	893b      	ldrh	r3, [r7, #8]
 800255a:	0a1b      	lsrs	r3, r3, #8
 800255c:	b29b      	uxth	r3, r3
 800255e:	b2da      	uxtb	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002566:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002568:	6a39      	ldr	r1, [r7, #32]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 fa20 	bl	80029b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00d      	beq.n	8002592 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	2b04      	cmp	r3, #4
 800257c:	d107      	bne.n	800258e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800258c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e005      	b.n	800259e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002592:	893b      	ldrh	r3, [r7, #8]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	00010002 	.word	0x00010002

080025ac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	4608      	mov	r0, r1
 80025b6:	4611      	mov	r1, r2
 80025b8:	461a      	mov	r2, r3
 80025ba:	4603      	mov	r3, r0
 80025bc:	817b      	strh	r3, [r7, #10]
 80025be:	460b      	mov	r3, r1
 80025c0:	813b      	strh	r3, [r7, #8]
 80025c2:	4613      	mov	r3, r2
 80025c4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025d4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	9300      	str	r3, [sp, #0]
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f8c2 	bl	800277c <I2C_WaitOnFlagUntilTimeout>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00d      	beq.n	800261a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002608:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800260c:	d103      	bne.n	8002616 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002614:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e0aa      	b.n	8002770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800261a:	897b      	ldrh	r3, [r7, #10]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002628:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	6a3a      	ldr	r2, [r7, #32]
 800262e:	4952      	ldr	r1, [pc, #328]	@ (8002778 <I2C_RequestMemoryRead+0x1cc>)
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f91d 	bl	8002870 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e097      	b.n	8002770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002656:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002658:	6a39      	ldr	r1, [r7, #32]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f9a8 	bl	80029b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00d      	beq.n	8002682 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	2b04      	cmp	r3, #4
 800266c:	d107      	bne.n	800267e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800267c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e076      	b.n	8002770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002688:	893b      	ldrh	r3, [r7, #8]
 800268a:	b2da      	uxtb	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	611a      	str	r2, [r3, #16]
 8002692:	e021      	b.n	80026d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002694:	893b      	ldrh	r3, [r7, #8]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	b29b      	uxth	r3, r3
 800269a:	b2da      	uxtb	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a4:	6a39      	ldr	r1, [r7, #32]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f982 	bl	80029b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d107      	bne.n	80026ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e050      	b.n	8002770 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026ce:	893b      	ldrh	r3, [r7, #8]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026da:	6a39      	ldr	r1, [r7, #32]
 80026dc:	68f8      	ldr	r0, [r7, #12]
 80026de:	f000 f967 	bl	80029b0 <I2C_WaitOnTXEFlagUntilTimeout>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00d      	beq.n	8002704 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d107      	bne.n	8002700 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e035      	b.n	8002770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002712:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	2200      	movs	r2, #0
 800271c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f82b 	bl	800277c <I2C_WaitOnFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00d      	beq.n	8002748 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800273a:	d103      	bne.n	8002744 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002742:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e013      	b.n	8002770 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002748:	897b      	ldrh	r3, [r7, #10]
 800274a:	b2db      	uxtb	r3, r3
 800274c:	f043 0301 	orr.w	r3, r3, #1
 8002750:	b2da      	uxtb	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	6a3a      	ldr	r2, [r7, #32]
 800275c:	4906      	ldr	r1, [pc, #24]	@ (8002778 <I2C_RequestMemoryRead+0x1cc>)
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f886 	bl	8002870 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e000      	b.n	8002770 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3718      	adds	r7, #24
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	00010002 	.word	0x00010002

0800277c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	603b      	str	r3, [r7, #0]
 8002788:	4613      	mov	r3, r2
 800278a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800278c:	e048      	b.n	8002820 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002794:	d044      	beq.n	8002820 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002796:	f7fe fc19 	bl	8000fcc <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d302      	bcc.n	80027ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d139      	bne.n	8002820 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	0c1b      	lsrs	r3, r3, #16
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d10d      	bne.n	80027d2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	43da      	mvns	r2, r3
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	4013      	ands	r3, r2
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	bf0c      	ite	eq
 80027c8:	2301      	moveq	r3, #1
 80027ca:	2300      	movne	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	461a      	mov	r2, r3
 80027d0:	e00c      	b.n	80027ec <I2C_WaitOnFlagUntilTimeout+0x70>
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	43da      	mvns	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	4013      	ands	r3, r2
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf0c      	ite	eq
 80027e4:	2301      	moveq	r3, #1
 80027e6:	2300      	movne	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d116      	bne.n	8002820 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	f043 0220 	orr.w	r2, r3, #32
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e023      	b.n	8002868 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	0c1b      	lsrs	r3, r3, #16
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b01      	cmp	r3, #1
 8002828:	d10d      	bne.n	8002846 <I2C_WaitOnFlagUntilTimeout+0xca>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	43da      	mvns	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	4013      	ands	r3, r2
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	e00c      	b.n	8002860 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	43da      	mvns	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4013      	ands	r3, r2
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	429a      	cmp	r2, r3
 8002864:	d093      	beq.n	800278e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
 800287c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800287e:	e071      	b.n	8002964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800288a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800288e:	d123      	bne.n	80028d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800289e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	f043 0204 	orr.w	r2, r3, #4
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e067      	b.n	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028de:	d041      	beq.n	8002964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e0:	f7fe fb74 	bl	8000fcc <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d302      	bcc.n	80028f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d136      	bne.n	8002964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	0c1b      	lsrs	r3, r3, #16
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d10c      	bne.n	800291a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	43da      	mvns	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4013      	ands	r3, r2
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	bf14      	ite	ne
 8002912:	2301      	movne	r3, #1
 8002914:	2300      	moveq	r3, #0
 8002916:	b2db      	uxtb	r3, r3
 8002918:	e00b      	b.n	8002932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	43da      	mvns	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	4013      	ands	r3, r2
 8002926:	b29b      	uxth	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf14      	ite	ne
 800292c:	2301      	movne	r3, #1
 800292e:	2300      	moveq	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d016      	beq.n	8002964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2220      	movs	r2, #32
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002950:	f043 0220 	orr.w	r2, r3, #32
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e021      	b.n	80029a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	0c1b      	lsrs	r3, r3, #16
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b01      	cmp	r3, #1
 800296c:	d10c      	bne.n	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695b      	ldr	r3, [r3, #20]
 8002974:	43da      	mvns	r2, r3
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	4013      	ands	r3, r2
 800297a:	b29b      	uxth	r3, r3
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	e00b      	b.n	80029a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4013      	ands	r3, r2
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	bf14      	ite	ne
 800299a:	2301      	movne	r3, #1
 800299c:	2300      	moveq	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f47f af6d 	bne.w	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029bc:	e034      	b.n	8002a28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f8e3 	bl	8002b8a <I2C_IsAcknowledgeFailed>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e034      	b.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029d4:	d028      	beq.n	8002a28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d6:	f7fe faf9 	bl	8000fcc <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d302      	bcc.n	80029ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d11d      	bne.n	8002a28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f6:	2b80      	cmp	r3, #128	@ 0x80
 80029f8:	d016      	beq.n	8002a28 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	f043 0220 	orr.w	r2, r3, #32
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e007      	b.n	8002a38 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a32:	2b80      	cmp	r3, #128	@ 0x80
 8002a34:	d1c3      	bne.n	80029be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a4c:	e034      	b.n	8002ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 f89b 	bl	8002b8a <I2C_IsAcknowledgeFailed>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e034      	b.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a64:	d028      	beq.n	8002ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a66:	f7fe fab1 	bl	8000fcc <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d302      	bcc.n	8002a7c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d11d      	bne.n	8002ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	695b      	ldr	r3, [r3, #20]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d016      	beq.n	8002ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	f043 0220 	orr.w	r2, r3, #32
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e007      	b.n	8002ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d1c3      	bne.n	8002a4e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002adc:	e049      	b.n	8002b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b10      	cmp	r3, #16
 8002aea:	d119      	bne.n	8002b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f06f 0210 	mvn.w	r2, #16
 8002af4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2200      	movs	r2, #0
 8002afa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e030      	b.n	8002b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b20:	f7fe fa54 	bl	8000fcc <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d302      	bcc.n	8002b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d11d      	bne.n	8002b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b40:	2b40      	cmp	r3, #64	@ 0x40
 8002b42:	d016      	beq.n	8002b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	f043 0220 	orr.w	r2, r3, #32
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e007      	b.n	8002b82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7c:	2b40      	cmp	r3, #64	@ 0x40
 8002b7e:	d1ae      	bne.n	8002ade <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ba0:	d11b      	bne.n	8002bda <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002baa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2220      	movs	r2, #32
 8002bb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	f043 0204 	orr.w	r2, r3, #4
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr
	...

08002be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e272      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 8087 	beq.w	8002d16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c08:	4b92      	ldr	r3, [pc, #584]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 030c 	and.w	r3, r3, #12
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d00c      	beq.n	8002c2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c14:	4b8f      	ldr	r3, [pc, #572]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d112      	bne.n	8002c46 <HAL_RCC_OscConfig+0x5e>
 8002c20:	4b8c      	ldr	r3, [pc, #560]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c2c:	d10b      	bne.n	8002c46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2e:	4b89      	ldr	r3, [pc, #548]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d06c      	beq.n	8002d14 <HAL_RCC_OscConfig+0x12c>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d168      	bne.n	8002d14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e24c      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c4e:	d106      	bne.n	8002c5e <HAL_RCC_OscConfig+0x76>
 8002c50:	4b80      	ldr	r3, [pc, #512]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a7f      	ldr	r2, [pc, #508]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	e02e      	b.n	8002cbc <HAL_RCC_OscConfig+0xd4>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x98>
 8002c66:	4b7b      	ldr	r3, [pc, #492]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a7a      	ldr	r2, [pc, #488]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b78      	ldr	r3, [pc, #480]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a77      	ldr	r2, [pc, #476]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e01d      	b.n	8002cbc <HAL_RCC_OscConfig+0xd4>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xbc>
 8002c8a:	4b72      	ldr	r3, [pc, #456]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a71      	ldr	r2, [pc, #452]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b6f      	ldr	r3, [pc, #444]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a6e      	ldr	r2, [pc, #440]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCC_OscConfig+0xd4>
 8002ca4:	4b6b      	ldr	r3, [pc, #428]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a6a      	ldr	r2, [pc, #424]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b68      	ldr	r3, [pc, #416]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a67      	ldr	r2, [pc, #412]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d013      	beq.n	8002cec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cc4:	f7fe f982 	bl	8000fcc <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7fe f97e 	bl	8000fcc <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	@ 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e200      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	4b5d      	ldr	r3, [pc, #372]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0xe4>
 8002cea:	e014      	b.n	8002d16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7fe f96e 	bl	8000fcc <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf4:	f7fe f96a 	bl	8000fcc <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	@ 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e1ec      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d06:	4b53      	ldr	r3, [pc, #332]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x10c>
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d063      	beq.n	8002dea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d22:	4b4c      	ldr	r3, [pc, #304]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00b      	beq.n	8002d46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d2e:	4b49      	ldr	r3, [pc, #292]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f003 030c 	and.w	r3, r3, #12
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d11c      	bne.n	8002d74 <HAL_RCC_OscConfig+0x18c>
 8002d3a:	4b46      	ldr	r3, [pc, #280]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d116      	bne.n	8002d74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d46:	4b43      	ldr	r3, [pc, #268]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_RCC_OscConfig+0x176>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d001      	beq.n	8002d5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e1c0      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4939      	ldr	r1, [pc, #228]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d72:	e03a      	b.n	8002dea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d020      	beq.n	8002dbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d7c:	4b36      	ldr	r3, [pc, #216]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7fe f923 	bl	8000fcc <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8a:	f7fe f91f 	bl	8000fcc <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e1a1      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002da8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	695b      	ldr	r3, [r3, #20]
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4927      	ldr	r1, [pc, #156]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	600b      	str	r3, [r1, #0]
 8002dbc:	e015      	b.n	8002dea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dbe:	4b26      	ldr	r3, [pc, #152]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc4:	f7fe f902 	bl	8000fcc <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dcc:	f7fe f8fe 	bl	8000fcc <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e180      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dde:	4b1d      	ldr	r3, [pc, #116]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d03a      	beq.n	8002e6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d019      	beq.n	8002e32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dfe:	4b17      	ldr	r3, [pc, #92]	@ (8002e5c <HAL_RCC_OscConfig+0x274>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e04:	f7fe f8e2 	bl	8000fcc <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0c:	f7fe f8de 	bl	8000fcc <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e160      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e54 <HAL_RCC_OscConfig+0x26c>)
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	f000 face 	bl	80033cc <RCC_Delay>
 8002e30:	e01c      	b.n	8002e6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e32:	4b0a      	ldr	r3, [pc, #40]	@ (8002e5c <HAL_RCC_OscConfig+0x274>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e38:	f7fe f8c8 	bl	8000fcc <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e3e:	e00f      	b.n	8002e60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e40:	f7fe f8c4 	bl	8000fcc <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d908      	bls.n	8002e60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e146      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	42420000 	.word	0x42420000
 8002e5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e60:	4b92      	ldr	r3, [pc, #584]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e9      	bne.n	8002e40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f000 80a6 	beq.w	8002fc6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e7e:	4b8b      	ldr	r3, [pc, #556]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d10d      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8a:	4b88      	ldr	r3, [pc, #544]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	4a87      	ldr	r2, [pc, #540]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e94:	61d3      	str	r3, [r2, #28]
 8002e96:	4b85      	ldr	r3, [pc, #532]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9e:	60bb      	str	r3, [r7, #8]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	4b82      	ldr	r3, [pc, #520]	@ (80030b0 <HAL_RCC_OscConfig+0x4c8>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d118      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eb2:	4b7f      	ldr	r3, [pc, #508]	@ (80030b0 <HAL_RCC_OscConfig+0x4c8>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80030b0 <HAL_RCC_OscConfig+0x4c8>)
 8002eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ebc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe f885 	bl	8000fcc <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec6:	f7fe f881 	bl	8000fcc <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b64      	cmp	r3, #100	@ 0x64
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e103      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed8:	4b75      	ldr	r3, [pc, #468]	@ (80030b0 <HAL_RCC_OscConfig+0x4c8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0f0      	beq.n	8002ec6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d106      	bne.n	8002efa <HAL_RCC_OscConfig+0x312>
 8002eec:	4b6f      	ldr	r3, [pc, #444]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	4a6e      	ldr	r2, [pc, #440]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6213      	str	r3, [r2, #32]
 8002ef8:	e02d      	b.n	8002f56 <HAL_RCC_OscConfig+0x36e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x334>
 8002f02:	4b6a      	ldr	r3, [pc, #424]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002f04:	6a1b      	ldr	r3, [r3, #32]
 8002f06:	4a69      	ldr	r2, [pc, #420]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	6213      	str	r3, [r2, #32]
 8002f0e:	4b67      	ldr	r3, [pc, #412]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	4a66      	ldr	r2, [pc, #408]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	f023 0304 	bic.w	r3, r3, #4
 8002f18:	6213      	str	r3, [r2, #32]
 8002f1a:	e01c      	b.n	8002f56 <HAL_RCC_OscConfig+0x36e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	d10c      	bne.n	8002f3e <HAL_RCC_OscConfig+0x356>
 8002f24:	4b61      	ldr	r3, [pc, #388]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a60      	ldr	r2, [pc, #384]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	f043 0304 	orr.w	r3, r3, #4
 8002f2e:	6213      	str	r3, [r2, #32]
 8002f30:	4b5e      	ldr	r3, [pc, #376]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4a5d      	ldr	r2, [pc, #372]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6213      	str	r3, [r2, #32]
 8002f3c:	e00b      	b.n	8002f56 <HAL_RCC_OscConfig+0x36e>
 8002f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	4a5a      	ldr	r2, [pc, #360]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	6213      	str	r3, [r2, #32]
 8002f4a:	4b58      	ldr	r3, [pc, #352]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	4a57      	ldr	r2, [pc, #348]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002f50:	f023 0304 	bic.w	r3, r3, #4
 8002f54:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d015      	beq.n	8002f8a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe f835 	bl	8000fcc <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f64:	e00a      	b.n	8002f7c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe f831 	bl	8000fcc <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d901      	bls.n	8002f7c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e0b1      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ee      	beq.n	8002f66 <HAL_RCC_OscConfig+0x37e>
 8002f88:	e014      	b.n	8002fb4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f8a:	f7fe f81f 	bl	8000fcc <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7fe f81b 	bl	8000fcc <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e09b      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa8:	4b40      	ldr	r3, [pc, #256]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ee      	bne.n	8002f92 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d105      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fba:	4b3c      	ldr	r3, [pc, #240]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	4a3b      	ldr	r2, [pc, #236]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fc4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 8087 	beq.w	80030de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fd0:	4b36      	ldr	r3, [pc, #216]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b08      	cmp	r3, #8
 8002fda:	d061      	beq.n	80030a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d146      	bne.n	8003072 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe4:	4b33      	ldr	r3, [pc, #204]	@ (80030b4 <HAL_RCC_OscConfig+0x4cc>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fea:	f7fd ffef 	bl	8000fcc <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ff2:	f7fd ffeb 	bl	8000fcc <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e06d      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003004:	4b29      	ldr	r3, [pc, #164]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1f0      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003018:	d108      	bne.n	800302c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800301a:	4b24      	ldr	r3, [pc, #144]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	4921      	ldr	r1, [pc, #132]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8003028:	4313      	orrs	r3, r2
 800302a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800302c:	4b1f      	ldr	r3, [pc, #124]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a19      	ldr	r1, [r3, #32]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	430b      	orrs	r3, r1
 800303e:	491b      	ldr	r1, [pc, #108]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8003040:	4313      	orrs	r3, r2
 8003042:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003044:	4b1b      	ldr	r3, [pc, #108]	@ (80030b4 <HAL_RCC_OscConfig+0x4cc>)
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304a:	f7fd ffbf 	bl	8000fcc <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003050:	e008      	b.n	8003064 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003052:	f7fd ffbb 	bl	8000fcc <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d901      	bls.n	8003064 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e03d      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003064:	4b11      	ldr	r3, [pc, #68]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0f0      	beq.n	8003052 <HAL_RCC_OscConfig+0x46a>
 8003070:	e035      	b.n	80030de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	4b10      	ldr	r3, [pc, #64]	@ (80030b4 <HAL_RCC_OscConfig+0x4cc>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fd ffa8 	bl	8000fcc <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003080:	f7fd ffa4 	bl	8000fcc <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e026      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003092:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <HAL_RCC_OscConfig+0x4c4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x498>
 800309e:	e01e      	b.n	80030de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d107      	bne.n	80030b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e019      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40007000 	.word	0x40007000
 80030b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030b8:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <HAL_RCC_OscConfig+0x500>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d106      	bne.n	80030da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3718      	adds	r7, #24
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000

080030ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0d0      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003100:	4b6a      	ldr	r3, [pc, #424]	@ (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d910      	bls.n	8003130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310e:	4b67      	ldr	r3, [pc, #412]	@ (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f023 0207 	bic.w	r2, r3, #7
 8003116:	4965      	ldr	r1, [pc, #404]	@ (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800311e:	4b63      	ldr	r3, [pc, #396]	@ (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0b8      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d020      	beq.n	800317e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003148:	4b59      	ldr	r3, [pc, #356]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4a58      	ldr	r2, [pc, #352]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0308 	and.w	r3, r3, #8
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003160:	4b53      	ldr	r3, [pc, #332]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4a52      	ldr	r2, [pc, #328]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800316a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800316c:	4b50      	ldr	r3, [pc, #320]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	494d      	ldr	r1, [pc, #308]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	4313      	orrs	r3, r2
 800317c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b00      	cmp	r3, #0
 8003188:	d040      	beq.n	800320c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003192:	4b47      	ldr	r3, [pc, #284]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d115      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e07f      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031aa:	4b41      	ldr	r3, [pc, #260]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e073      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ba:	4b3d      	ldr	r3, [pc, #244]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e06b      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ca:	4b39      	ldr	r3, [pc, #228]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f023 0203 	bic.w	r2, r3, #3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	4936      	ldr	r1, [pc, #216]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031dc:	f7fd fef6 	bl	8000fcc <HAL_GetTick>
 80031e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	e00a      	b.n	80031fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031e4:	f7fd fef2 	bl	8000fcc <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e053      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	4b2d      	ldr	r3, [pc, #180]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 020c 	and.w	r2, r3, #12
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	429a      	cmp	r2, r3
 800320a:	d1eb      	bne.n	80031e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800320c:	4b27      	ldr	r3, [pc, #156]	@ (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d210      	bcs.n	800323c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800321a:	4b24      	ldr	r3, [pc, #144]	@ (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 0207 	bic.w	r2, r3, #7
 8003222:	4922      	ldr	r1, [pc, #136]	@ (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	4313      	orrs	r3, r2
 8003228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800322a:	4b20      	ldr	r3, [pc, #128]	@ (80032ac <HAL_RCC_ClockConfig+0x1c0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e032      	b.n	80032a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d008      	beq.n	800325a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003248:	4b19      	ldr	r3, [pc, #100]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	4916      	ldr	r1, [pc, #88]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0308 	and.w	r3, r3, #8
 8003262:	2b00      	cmp	r3, #0
 8003264:	d009      	beq.n	800327a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003266:	4b12      	ldr	r3, [pc, #72]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	490e      	ldr	r1, [pc, #56]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800327a:	f000 f821 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 800327e:	4602      	mov	r2, r0
 8003280:	4b0b      	ldr	r3, [pc, #44]	@ (80032b0 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	490a      	ldr	r1, [pc, #40]	@ (80032b4 <HAL_RCC_ClockConfig+0x1c8>)
 800328c:	5ccb      	ldrb	r3, [r1, r3]
 800328e:	fa22 f303 	lsr.w	r3, r2, r3
 8003292:	4a09      	ldr	r2, [pc, #36]	@ (80032b8 <HAL_RCC_ClockConfig+0x1cc>)
 8003294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003296:	4b09      	ldr	r3, [pc, #36]	@ (80032bc <HAL_RCC_ClockConfig+0x1d0>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd fe54 	bl	8000f48 <HAL_InitTick>

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40022000 	.word	0x40022000
 80032b0:	40021000 	.word	0x40021000
 80032b4:	08005444 	.word	0x08005444
 80032b8:	2000002c 	.word	0x2000002c
 80032bc:	20000030 	.word	0x20000030

080032c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b087      	sub	sp, #28
 80032c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	2300      	movs	r3, #0
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	2300      	movs	r3, #0
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	2300      	movs	r3, #0
 80032d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032da:	4b1e      	ldr	r3, [pc, #120]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x94>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 030c 	and.w	r3, r3, #12
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d002      	beq.n	80032f0 <HAL_RCC_GetSysClockFreq+0x30>
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d003      	beq.n	80032f6 <HAL_RCC_GetSysClockFreq+0x36>
 80032ee:	e027      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032f0:	4b19      	ldr	r3, [pc, #100]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x98>)
 80032f2:	613b      	str	r3, [r7, #16]
      break;
 80032f4:	e027      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	0c9b      	lsrs	r3, r3, #18
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	4a17      	ldr	r2, [pc, #92]	@ (800335c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003300:	5cd3      	ldrb	r3, [r2, r3]
 8003302:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d010      	beq.n	8003330 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800330e:	4b11      	ldr	r3, [pc, #68]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x94>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	0c5b      	lsrs	r3, r3, #17
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	4a11      	ldr	r2, [pc, #68]	@ (8003360 <HAL_RCC_GetSysClockFreq+0xa0>)
 800331a:	5cd3      	ldrb	r3, [r2, r3]
 800331c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a0d      	ldr	r2, [pc, #52]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x98>)
 8003322:	fb03 f202 	mul.w	r2, r3, r2
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e004      	b.n	800333a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a0c      	ldr	r2, [pc, #48]	@ (8003364 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003334:	fb02 f303 	mul.w	r3, r2, r3
 8003338:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	613b      	str	r3, [r7, #16]
      break;
 800333e:	e002      	b.n	8003346 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x98>)
 8003342:	613b      	str	r3, [r7, #16]
      break;
 8003344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003346:	693b      	ldr	r3, [r7, #16]
}
 8003348:	4618      	mov	r0, r3
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	007a1200 	.word	0x007a1200
 800335c:	0800545c 	.word	0x0800545c
 8003360:	0800546c 	.word	0x0800546c
 8003364:	003d0900 	.word	0x003d0900

08003368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800336c:	4b02      	ldr	r3, [pc, #8]	@ (8003378 <HAL_RCC_GetHCLKFreq+0x10>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr
 8003378:	2000002c 	.word	0x2000002c

0800337c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003380:	f7ff fff2 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b05      	ldr	r3, [pc, #20]	@ (800339c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	4903      	ldr	r1, [pc, #12]	@ (80033a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000
 80033a0:	08005454 	.word	0x08005454

080033a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033a8:	f7ff ffde 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 80033ac:	4602      	mov	r2, r0
 80033ae:	4b05      	ldr	r3, [pc, #20]	@ (80033c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	0adb      	lsrs	r3, r3, #11
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	4903      	ldr	r1, [pc, #12]	@ (80033c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ba:	5ccb      	ldrb	r3, [r1, r3]
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000
 80033c8:	08005454 	.word	0x08005454

080033cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003400 <RCC_Delay+0x34>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003404 <RCC_Delay+0x38>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	0a5b      	lsrs	r3, r3, #9
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033e8:	bf00      	nop
  }
  while (Delay --);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1e5a      	subs	r2, r3, #1
 80033ee:	60fa      	str	r2, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f9      	bne.n	80033e8 <RCC_Delay+0x1c>
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr
 8003400:	2000002c 	.word	0x2000002c
 8003404:	10624dd3 	.word	0x10624dd3

08003408 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e042      	b.n	80034a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fca0 	bl	8000d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2224      	movs	r2, #36	@ 0x24
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800344a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f82b 	bl	80034a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003460:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003470:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003480:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2220      	movs	r2, #32
 800348c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689a      	ldr	r2, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80034e2:	f023 030c 	bic.w	r3, r3, #12
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	68b9      	ldr	r1, [r7, #8]
 80034ec:	430b      	orrs	r3, r1
 80034ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699a      	ldr	r2, [r3, #24]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a2c      	ldr	r2, [pc, #176]	@ (80035bc <UART_SetConfig+0x114>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d103      	bne.n	8003518 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003510:	f7ff ff48 	bl	80033a4 <HAL_RCC_GetPCLK2Freq>
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	e002      	b.n	800351e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003518:	f7ff ff30 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 800351c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	009a      	lsls	r2, r3, #2
 8003528:	441a      	add	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	4a22      	ldr	r2, [pc, #136]	@ (80035c0 <UART_SetConfig+0x118>)
 8003536:	fba2 2303 	umull	r2, r3, r2, r3
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	0119      	lsls	r1, r3, #4
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009a      	lsls	r2, r3, #2
 8003548:	441a      	add	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	fbb2 f2f3 	udiv	r2, r2, r3
 8003554:	4b1a      	ldr	r3, [pc, #104]	@ (80035c0 <UART_SetConfig+0x118>)
 8003556:	fba3 0302 	umull	r0, r3, r3, r2
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2064      	movs	r0, #100	@ 0x64
 800355e:	fb00 f303 	mul.w	r3, r0, r3
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	3332      	adds	r3, #50	@ 0x32
 8003568:	4a15      	ldr	r2, [pc, #84]	@ (80035c0 <UART_SetConfig+0x118>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003574:	4419      	add	r1, r3
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	4613      	mov	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	009a      	lsls	r2, r3, #2
 8003580:	441a      	add	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	fbb2 f2f3 	udiv	r2, r2, r3
 800358c:	4b0c      	ldr	r3, [pc, #48]	@ (80035c0 <UART_SetConfig+0x118>)
 800358e:	fba3 0302 	umull	r0, r3, r3, r2
 8003592:	095b      	lsrs	r3, r3, #5
 8003594:	2064      	movs	r0, #100	@ 0x64
 8003596:	fb00 f303 	mul.w	r3, r0, r3
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	3332      	adds	r3, #50	@ 0x32
 80035a0:	4a07      	ldr	r2, [pc, #28]	@ (80035c0 <UART_SetConfig+0x118>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	095b      	lsrs	r3, r3, #5
 80035a8:	f003 020f 	and.w	r2, r3, #15
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	440a      	add	r2, r1
 80035b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	40013800 	.word	0x40013800
 80035c0:	51eb851f 	.word	0x51eb851f

080035c4 <siprintf>:
 80035c4:	b40e      	push	{r1, r2, r3}
 80035c6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80035ca:	b510      	push	{r4, lr}
 80035cc:	2400      	movs	r4, #0
 80035ce:	b09d      	sub	sp, #116	@ 0x74
 80035d0:	ab1f      	add	r3, sp, #124	@ 0x7c
 80035d2:	9002      	str	r0, [sp, #8]
 80035d4:	9006      	str	r0, [sp, #24]
 80035d6:	9107      	str	r1, [sp, #28]
 80035d8:	9104      	str	r1, [sp, #16]
 80035da:	4809      	ldr	r0, [pc, #36]	@ (8003600 <siprintf+0x3c>)
 80035dc:	4909      	ldr	r1, [pc, #36]	@ (8003604 <siprintf+0x40>)
 80035de:	f853 2b04 	ldr.w	r2, [r3], #4
 80035e2:	9105      	str	r1, [sp, #20]
 80035e4:	6800      	ldr	r0, [r0, #0]
 80035e6:	a902      	add	r1, sp, #8
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	941b      	str	r4, [sp, #108]	@ 0x6c
 80035ec:	f000 f89c 	bl	8003728 <_svfiprintf_r>
 80035f0:	9b02      	ldr	r3, [sp, #8]
 80035f2:	701c      	strb	r4, [r3, #0]
 80035f4:	b01d      	add	sp, #116	@ 0x74
 80035f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035fa:	b003      	add	sp, #12
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000038 	.word	0x20000038
 8003604:	ffff0208 	.word	0xffff0208

08003608 <memset>:
 8003608:	4603      	mov	r3, r0
 800360a:	4402      	add	r2, r0
 800360c:	4293      	cmp	r3, r2
 800360e:	d100      	bne.n	8003612 <memset+0xa>
 8003610:	4770      	bx	lr
 8003612:	f803 1b01 	strb.w	r1, [r3], #1
 8003616:	e7f9      	b.n	800360c <memset+0x4>

08003618 <__errno>:
 8003618:	4b01      	ldr	r3, [pc, #4]	@ (8003620 <__errno+0x8>)
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	20000038 	.word	0x20000038

08003624 <__libc_init_array>:
 8003624:	b570      	push	{r4, r5, r6, lr}
 8003626:	2600      	movs	r6, #0
 8003628:	4d0c      	ldr	r5, [pc, #48]	@ (800365c <__libc_init_array+0x38>)
 800362a:	4c0d      	ldr	r4, [pc, #52]	@ (8003660 <__libc_init_array+0x3c>)
 800362c:	1b64      	subs	r4, r4, r5
 800362e:	10a4      	asrs	r4, r4, #2
 8003630:	42a6      	cmp	r6, r4
 8003632:	d109      	bne.n	8003648 <__libc_init_array+0x24>
 8003634:	f000 fc76 	bl	8003f24 <_init>
 8003638:	2600      	movs	r6, #0
 800363a:	4d0a      	ldr	r5, [pc, #40]	@ (8003664 <__libc_init_array+0x40>)
 800363c:	4c0a      	ldr	r4, [pc, #40]	@ (8003668 <__libc_init_array+0x44>)
 800363e:	1b64      	subs	r4, r4, r5
 8003640:	10a4      	asrs	r4, r4, #2
 8003642:	42a6      	cmp	r6, r4
 8003644:	d105      	bne.n	8003652 <__libc_init_array+0x2e>
 8003646:	bd70      	pop	{r4, r5, r6, pc}
 8003648:	f855 3b04 	ldr.w	r3, [r5], #4
 800364c:	4798      	blx	r3
 800364e:	3601      	adds	r6, #1
 8003650:	e7ee      	b.n	8003630 <__libc_init_array+0xc>
 8003652:	f855 3b04 	ldr.w	r3, [r5], #4
 8003656:	4798      	blx	r3
 8003658:	3601      	adds	r6, #1
 800365a:	e7f2      	b.n	8003642 <__libc_init_array+0x1e>
 800365c:	080054a4 	.word	0x080054a4
 8003660:	080054a4 	.word	0x080054a4
 8003664:	080054a4 	.word	0x080054a4
 8003668:	080054a8 	.word	0x080054a8

0800366c <__retarget_lock_acquire_recursive>:
 800366c:	4770      	bx	lr

0800366e <__retarget_lock_release_recursive>:
 800366e:	4770      	bx	lr

08003670 <__ssputs_r>:
 8003670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003674:	461f      	mov	r7, r3
 8003676:	688e      	ldr	r6, [r1, #8]
 8003678:	4682      	mov	sl, r0
 800367a:	42be      	cmp	r6, r7
 800367c:	460c      	mov	r4, r1
 800367e:	4690      	mov	r8, r2
 8003680:	680b      	ldr	r3, [r1, #0]
 8003682:	d82d      	bhi.n	80036e0 <__ssputs_r+0x70>
 8003684:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003688:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800368c:	d026      	beq.n	80036dc <__ssputs_r+0x6c>
 800368e:	6965      	ldr	r5, [r4, #20]
 8003690:	6909      	ldr	r1, [r1, #16]
 8003692:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003696:	eba3 0901 	sub.w	r9, r3, r1
 800369a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800369e:	1c7b      	adds	r3, r7, #1
 80036a0:	444b      	add	r3, r9
 80036a2:	106d      	asrs	r5, r5, #1
 80036a4:	429d      	cmp	r5, r3
 80036a6:	bf38      	it	cc
 80036a8:	461d      	movcc	r5, r3
 80036aa:	0553      	lsls	r3, r2, #21
 80036ac:	d527      	bpl.n	80036fe <__ssputs_r+0x8e>
 80036ae:	4629      	mov	r1, r5
 80036b0:	f000 f958 	bl	8003964 <_malloc_r>
 80036b4:	4606      	mov	r6, r0
 80036b6:	b360      	cbz	r0, 8003712 <__ssputs_r+0xa2>
 80036b8:	464a      	mov	r2, r9
 80036ba:	6921      	ldr	r1, [r4, #16]
 80036bc:	f000 fbd4 	bl	8003e68 <memcpy>
 80036c0:	89a3      	ldrh	r3, [r4, #12]
 80036c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80036c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036ca:	81a3      	strh	r3, [r4, #12]
 80036cc:	6126      	str	r6, [r4, #16]
 80036ce:	444e      	add	r6, r9
 80036d0:	6026      	str	r6, [r4, #0]
 80036d2:	463e      	mov	r6, r7
 80036d4:	6165      	str	r5, [r4, #20]
 80036d6:	eba5 0509 	sub.w	r5, r5, r9
 80036da:	60a5      	str	r5, [r4, #8]
 80036dc:	42be      	cmp	r6, r7
 80036de:	d900      	bls.n	80036e2 <__ssputs_r+0x72>
 80036e0:	463e      	mov	r6, r7
 80036e2:	4632      	mov	r2, r6
 80036e4:	4641      	mov	r1, r8
 80036e6:	6820      	ldr	r0, [r4, #0]
 80036e8:	f000 fb86 	bl	8003df8 <memmove>
 80036ec:	2000      	movs	r0, #0
 80036ee:	68a3      	ldr	r3, [r4, #8]
 80036f0:	1b9b      	subs	r3, r3, r6
 80036f2:	60a3      	str	r3, [r4, #8]
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	4433      	add	r3, r6
 80036f8:	6023      	str	r3, [r4, #0]
 80036fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036fe:	462a      	mov	r2, r5
 8003700:	f000 fb4c 	bl	8003d9c <_realloc_r>
 8003704:	4606      	mov	r6, r0
 8003706:	2800      	cmp	r0, #0
 8003708:	d1e0      	bne.n	80036cc <__ssputs_r+0x5c>
 800370a:	4650      	mov	r0, sl
 800370c:	6921      	ldr	r1, [r4, #16]
 800370e:	f000 fbb9 	bl	8003e84 <_free_r>
 8003712:	230c      	movs	r3, #12
 8003714:	f8ca 3000 	str.w	r3, [sl]
 8003718:	89a3      	ldrh	r3, [r4, #12]
 800371a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800371e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003722:	81a3      	strh	r3, [r4, #12]
 8003724:	e7e9      	b.n	80036fa <__ssputs_r+0x8a>
	...

08003728 <_svfiprintf_r>:
 8003728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800372c:	4698      	mov	r8, r3
 800372e:	898b      	ldrh	r3, [r1, #12]
 8003730:	4607      	mov	r7, r0
 8003732:	061b      	lsls	r3, r3, #24
 8003734:	460d      	mov	r5, r1
 8003736:	4614      	mov	r4, r2
 8003738:	b09d      	sub	sp, #116	@ 0x74
 800373a:	d510      	bpl.n	800375e <_svfiprintf_r+0x36>
 800373c:	690b      	ldr	r3, [r1, #16]
 800373e:	b973      	cbnz	r3, 800375e <_svfiprintf_r+0x36>
 8003740:	2140      	movs	r1, #64	@ 0x40
 8003742:	f000 f90f 	bl	8003964 <_malloc_r>
 8003746:	6028      	str	r0, [r5, #0]
 8003748:	6128      	str	r0, [r5, #16]
 800374a:	b930      	cbnz	r0, 800375a <_svfiprintf_r+0x32>
 800374c:	230c      	movs	r3, #12
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003754:	b01d      	add	sp, #116	@ 0x74
 8003756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800375a:	2340      	movs	r3, #64	@ 0x40
 800375c:	616b      	str	r3, [r5, #20]
 800375e:	2300      	movs	r3, #0
 8003760:	9309      	str	r3, [sp, #36]	@ 0x24
 8003762:	2320      	movs	r3, #32
 8003764:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003768:	2330      	movs	r3, #48	@ 0x30
 800376a:	f04f 0901 	mov.w	r9, #1
 800376e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003772:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800390c <_svfiprintf_r+0x1e4>
 8003776:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800377a:	4623      	mov	r3, r4
 800377c:	469a      	mov	sl, r3
 800377e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003782:	b10a      	cbz	r2, 8003788 <_svfiprintf_r+0x60>
 8003784:	2a25      	cmp	r2, #37	@ 0x25
 8003786:	d1f9      	bne.n	800377c <_svfiprintf_r+0x54>
 8003788:	ebba 0b04 	subs.w	fp, sl, r4
 800378c:	d00b      	beq.n	80037a6 <_svfiprintf_r+0x7e>
 800378e:	465b      	mov	r3, fp
 8003790:	4622      	mov	r2, r4
 8003792:	4629      	mov	r1, r5
 8003794:	4638      	mov	r0, r7
 8003796:	f7ff ff6b 	bl	8003670 <__ssputs_r>
 800379a:	3001      	adds	r0, #1
 800379c:	f000 80a7 	beq.w	80038ee <_svfiprintf_r+0x1c6>
 80037a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037a2:	445a      	add	r2, fp
 80037a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80037a6:	f89a 3000 	ldrb.w	r3, [sl]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 809f 	beq.w	80038ee <_svfiprintf_r+0x1c6>
 80037b0:	2300      	movs	r3, #0
 80037b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037ba:	f10a 0a01 	add.w	sl, sl, #1
 80037be:	9304      	str	r3, [sp, #16]
 80037c0:	9307      	str	r3, [sp, #28]
 80037c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80037c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80037c8:	4654      	mov	r4, sl
 80037ca:	2205      	movs	r2, #5
 80037cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037d0:	484e      	ldr	r0, [pc, #312]	@ (800390c <_svfiprintf_r+0x1e4>)
 80037d2:	f000 fb3b 	bl	8003e4c <memchr>
 80037d6:	9a04      	ldr	r2, [sp, #16]
 80037d8:	b9d8      	cbnz	r0, 8003812 <_svfiprintf_r+0xea>
 80037da:	06d0      	lsls	r0, r2, #27
 80037dc:	bf44      	itt	mi
 80037de:	2320      	movmi	r3, #32
 80037e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037e4:	0711      	lsls	r1, r2, #28
 80037e6:	bf44      	itt	mi
 80037e8:	232b      	movmi	r3, #43	@ 0x2b
 80037ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80037ee:	f89a 3000 	ldrb.w	r3, [sl]
 80037f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80037f4:	d015      	beq.n	8003822 <_svfiprintf_r+0xfa>
 80037f6:	4654      	mov	r4, sl
 80037f8:	2000      	movs	r0, #0
 80037fa:	f04f 0c0a 	mov.w	ip, #10
 80037fe:	9a07      	ldr	r2, [sp, #28]
 8003800:	4621      	mov	r1, r4
 8003802:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003806:	3b30      	subs	r3, #48	@ 0x30
 8003808:	2b09      	cmp	r3, #9
 800380a:	d94b      	bls.n	80038a4 <_svfiprintf_r+0x17c>
 800380c:	b1b0      	cbz	r0, 800383c <_svfiprintf_r+0x114>
 800380e:	9207      	str	r2, [sp, #28]
 8003810:	e014      	b.n	800383c <_svfiprintf_r+0x114>
 8003812:	eba0 0308 	sub.w	r3, r0, r8
 8003816:	fa09 f303 	lsl.w	r3, r9, r3
 800381a:	4313      	orrs	r3, r2
 800381c:	46a2      	mov	sl, r4
 800381e:	9304      	str	r3, [sp, #16]
 8003820:	e7d2      	b.n	80037c8 <_svfiprintf_r+0xa0>
 8003822:	9b03      	ldr	r3, [sp, #12]
 8003824:	1d19      	adds	r1, r3, #4
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	9103      	str	r1, [sp, #12]
 800382a:	2b00      	cmp	r3, #0
 800382c:	bfbb      	ittet	lt
 800382e:	425b      	neglt	r3, r3
 8003830:	f042 0202 	orrlt.w	r2, r2, #2
 8003834:	9307      	strge	r3, [sp, #28]
 8003836:	9307      	strlt	r3, [sp, #28]
 8003838:	bfb8      	it	lt
 800383a:	9204      	strlt	r2, [sp, #16]
 800383c:	7823      	ldrb	r3, [r4, #0]
 800383e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003840:	d10a      	bne.n	8003858 <_svfiprintf_r+0x130>
 8003842:	7863      	ldrb	r3, [r4, #1]
 8003844:	2b2a      	cmp	r3, #42	@ 0x2a
 8003846:	d132      	bne.n	80038ae <_svfiprintf_r+0x186>
 8003848:	9b03      	ldr	r3, [sp, #12]
 800384a:	3402      	adds	r4, #2
 800384c:	1d1a      	adds	r2, r3, #4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	9203      	str	r2, [sp, #12]
 8003852:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003856:	9305      	str	r3, [sp, #20]
 8003858:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003910 <_svfiprintf_r+0x1e8>
 800385c:	2203      	movs	r2, #3
 800385e:	4650      	mov	r0, sl
 8003860:	7821      	ldrb	r1, [r4, #0]
 8003862:	f000 faf3 	bl	8003e4c <memchr>
 8003866:	b138      	cbz	r0, 8003878 <_svfiprintf_r+0x150>
 8003868:	2240      	movs	r2, #64	@ 0x40
 800386a:	9b04      	ldr	r3, [sp, #16]
 800386c:	eba0 000a 	sub.w	r0, r0, sl
 8003870:	4082      	lsls	r2, r0
 8003872:	4313      	orrs	r3, r2
 8003874:	3401      	adds	r4, #1
 8003876:	9304      	str	r3, [sp, #16]
 8003878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800387c:	2206      	movs	r2, #6
 800387e:	4825      	ldr	r0, [pc, #148]	@ (8003914 <_svfiprintf_r+0x1ec>)
 8003880:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003884:	f000 fae2 	bl	8003e4c <memchr>
 8003888:	2800      	cmp	r0, #0
 800388a:	d036      	beq.n	80038fa <_svfiprintf_r+0x1d2>
 800388c:	4b22      	ldr	r3, [pc, #136]	@ (8003918 <_svfiprintf_r+0x1f0>)
 800388e:	bb1b      	cbnz	r3, 80038d8 <_svfiprintf_r+0x1b0>
 8003890:	9b03      	ldr	r3, [sp, #12]
 8003892:	3307      	adds	r3, #7
 8003894:	f023 0307 	bic.w	r3, r3, #7
 8003898:	3308      	adds	r3, #8
 800389a:	9303      	str	r3, [sp, #12]
 800389c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800389e:	4433      	add	r3, r6
 80038a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80038a2:	e76a      	b.n	800377a <_svfiprintf_r+0x52>
 80038a4:	460c      	mov	r4, r1
 80038a6:	2001      	movs	r0, #1
 80038a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80038ac:	e7a8      	b.n	8003800 <_svfiprintf_r+0xd8>
 80038ae:	2300      	movs	r3, #0
 80038b0:	f04f 0c0a 	mov.w	ip, #10
 80038b4:	4619      	mov	r1, r3
 80038b6:	3401      	adds	r4, #1
 80038b8:	9305      	str	r3, [sp, #20]
 80038ba:	4620      	mov	r0, r4
 80038bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038c0:	3a30      	subs	r2, #48	@ 0x30
 80038c2:	2a09      	cmp	r2, #9
 80038c4:	d903      	bls.n	80038ce <_svfiprintf_r+0x1a6>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d0c6      	beq.n	8003858 <_svfiprintf_r+0x130>
 80038ca:	9105      	str	r1, [sp, #20]
 80038cc:	e7c4      	b.n	8003858 <_svfiprintf_r+0x130>
 80038ce:	4604      	mov	r4, r0
 80038d0:	2301      	movs	r3, #1
 80038d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80038d6:	e7f0      	b.n	80038ba <_svfiprintf_r+0x192>
 80038d8:	ab03      	add	r3, sp, #12
 80038da:	9300      	str	r3, [sp, #0]
 80038dc:	462a      	mov	r2, r5
 80038de:	4638      	mov	r0, r7
 80038e0:	4b0e      	ldr	r3, [pc, #56]	@ (800391c <_svfiprintf_r+0x1f4>)
 80038e2:	a904      	add	r1, sp, #16
 80038e4:	f3af 8000 	nop.w
 80038e8:	1c42      	adds	r2, r0, #1
 80038ea:	4606      	mov	r6, r0
 80038ec:	d1d6      	bne.n	800389c <_svfiprintf_r+0x174>
 80038ee:	89ab      	ldrh	r3, [r5, #12]
 80038f0:	065b      	lsls	r3, r3, #25
 80038f2:	f53f af2d 	bmi.w	8003750 <_svfiprintf_r+0x28>
 80038f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80038f8:	e72c      	b.n	8003754 <_svfiprintf_r+0x2c>
 80038fa:	ab03      	add	r3, sp, #12
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	462a      	mov	r2, r5
 8003900:	4638      	mov	r0, r7
 8003902:	4b06      	ldr	r3, [pc, #24]	@ (800391c <_svfiprintf_r+0x1f4>)
 8003904:	a904      	add	r1, sp, #16
 8003906:	f000 f91f 	bl	8003b48 <_printf_i>
 800390a:	e7ed      	b.n	80038e8 <_svfiprintf_r+0x1c0>
 800390c:	0800546e 	.word	0x0800546e
 8003910:	08005474 	.word	0x08005474
 8003914:	08005478 	.word	0x08005478
 8003918:	00000000 	.word	0x00000000
 800391c:	08003671 	.word	0x08003671

08003920 <sbrk_aligned>:
 8003920:	b570      	push	{r4, r5, r6, lr}
 8003922:	4e0f      	ldr	r6, [pc, #60]	@ (8003960 <sbrk_aligned+0x40>)
 8003924:	460c      	mov	r4, r1
 8003926:	6831      	ldr	r1, [r6, #0]
 8003928:	4605      	mov	r5, r0
 800392a:	b911      	cbnz	r1, 8003932 <sbrk_aligned+0x12>
 800392c:	f000 fa7e 	bl	8003e2c <_sbrk_r>
 8003930:	6030      	str	r0, [r6, #0]
 8003932:	4621      	mov	r1, r4
 8003934:	4628      	mov	r0, r5
 8003936:	f000 fa79 	bl	8003e2c <_sbrk_r>
 800393a:	1c43      	adds	r3, r0, #1
 800393c:	d103      	bne.n	8003946 <sbrk_aligned+0x26>
 800393e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003942:	4620      	mov	r0, r4
 8003944:	bd70      	pop	{r4, r5, r6, pc}
 8003946:	1cc4      	adds	r4, r0, #3
 8003948:	f024 0403 	bic.w	r4, r4, #3
 800394c:	42a0      	cmp	r0, r4
 800394e:	d0f8      	beq.n	8003942 <sbrk_aligned+0x22>
 8003950:	1a21      	subs	r1, r4, r0
 8003952:	4628      	mov	r0, r5
 8003954:	f000 fa6a 	bl	8003e2c <_sbrk_r>
 8003958:	3001      	adds	r0, #1
 800395a:	d1f2      	bne.n	8003942 <sbrk_aligned+0x22>
 800395c:	e7ef      	b.n	800393e <sbrk_aligned+0x1e>
 800395e:	bf00      	nop
 8003960:	200006c0 	.word	0x200006c0

08003964 <_malloc_r>:
 8003964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003968:	1ccd      	adds	r5, r1, #3
 800396a:	f025 0503 	bic.w	r5, r5, #3
 800396e:	3508      	adds	r5, #8
 8003970:	2d0c      	cmp	r5, #12
 8003972:	bf38      	it	cc
 8003974:	250c      	movcc	r5, #12
 8003976:	2d00      	cmp	r5, #0
 8003978:	4606      	mov	r6, r0
 800397a:	db01      	blt.n	8003980 <_malloc_r+0x1c>
 800397c:	42a9      	cmp	r1, r5
 800397e:	d904      	bls.n	800398a <_malloc_r+0x26>
 8003980:	230c      	movs	r3, #12
 8003982:	6033      	str	r3, [r6, #0]
 8003984:	2000      	movs	r0, #0
 8003986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800398a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a60 <_malloc_r+0xfc>
 800398e:	f000 f9f9 	bl	8003d84 <__malloc_lock>
 8003992:	f8d8 3000 	ldr.w	r3, [r8]
 8003996:	461c      	mov	r4, r3
 8003998:	bb44      	cbnz	r4, 80039ec <_malloc_r+0x88>
 800399a:	4629      	mov	r1, r5
 800399c:	4630      	mov	r0, r6
 800399e:	f7ff ffbf 	bl	8003920 <sbrk_aligned>
 80039a2:	1c43      	adds	r3, r0, #1
 80039a4:	4604      	mov	r4, r0
 80039a6:	d158      	bne.n	8003a5a <_malloc_r+0xf6>
 80039a8:	f8d8 4000 	ldr.w	r4, [r8]
 80039ac:	4627      	mov	r7, r4
 80039ae:	2f00      	cmp	r7, #0
 80039b0:	d143      	bne.n	8003a3a <_malloc_r+0xd6>
 80039b2:	2c00      	cmp	r4, #0
 80039b4:	d04b      	beq.n	8003a4e <_malloc_r+0xea>
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	4639      	mov	r1, r7
 80039ba:	4630      	mov	r0, r6
 80039bc:	eb04 0903 	add.w	r9, r4, r3
 80039c0:	f000 fa34 	bl	8003e2c <_sbrk_r>
 80039c4:	4581      	cmp	r9, r0
 80039c6:	d142      	bne.n	8003a4e <_malloc_r+0xea>
 80039c8:	6821      	ldr	r1, [r4, #0]
 80039ca:	4630      	mov	r0, r6
 80039cc:	1a6d      	subs	r5, r5, r1
 80039ce:	4629      	mov	r1, r5
 80039d0:	f7ff ffa6 	bl	8003920 <sbrk_aligned>
 80039d4:	3001      	adds	r0, #1
 80039d6:	d03a      	beq.n	8003a4e <_malloc_r+0xea>
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	442b      	add	r3, r5
 80039dc:	6023      	str	r3, [r4, #0]
 80039de:	f8d8 3000 	ldr.w	r3, [r8]
 80039e2:	685a      	ldr	r2, [r3, #4]
 80039e4:	bb62      	cbnz	r2, 8003a40 <_malloc_r+0xdc>
 80039e6:	f8c8 7000 	str.w	r7, [r8]
 80039ea:	e00f      	b.n	8003a0c <_malloc_r+0xa8>
 80039ec:	6822      	ldr	r2, [r4, #0]
 80039ee:	1b52      	subs	r2, r2, r5
 80039f0:	d420      	bmi.n	8003a34 <_malloc_r+0xd0>
 80039f2:	2a0b      	cmp	r2, #11
 80039f4:	d917      	bls.n	8003a26 <_malloc_r+0xc2>
 80039f6:	1961      	adds	r1, r4, r5
 80039f8:	42a3      	cmp	r3, r4
 80039fa:	6025      	str	r5, [r4, #0]
 80039fc:	bf18      	it	ne
 80039fe:	6059      	strne	r1, [r3, #4]
 8003a00:	6863      	ldr	r3, [r4, #4]
 8003a02:	bf08      	it	eq
 8003a04:	f8c8 1000 	streq.w	r1, [r8]
 8003a08:	5162      	str	r2, [r4, r5]
 8003a0a:	604b      	str	r3, [r1, #4]
 8003a0c:	4630      	mov	r0, r6
 8003a0e:	f000 f9bf 	bl	8003d90 <__malloc_unlock>
 8003a12:	f104 000b 	add.w	r0, r4, #11
 8003a16:	1d23      	adds	r3, r4, #4
 8003a18:	f020 0007 	bic.w	r0, r0, #7
 8003a1c:	1ac2      	subs	r2, r0, r3
 8003a1e:	bf1c      	itt	ne
 8003a20:	1a1b      	subne	r3, r3, r0
 8003a22:	50a3      	strne	r3, [r4, r2]
 8003a24:	e7af      	b.n	8003986 <_malloc_r+0x22>
 8003a26:	6862      	ldr	r2, [r4, #4]
 8003a28:	42a3      	cmp	r3, r4
 8003a2a:	bf0c      	ite	eq
 8003a2c:	f8c8 2000 	streq.w	r2, [r8]
 8003a30:	605a      	strne	r2, [r3, #4]
 8003a32:	e7eb      	b.n	8003a0c <_malloc_r+0xa8>
 8003a34:	4623      	mov	r3, r4
 8003a36:	6864      	ldr	r4, [r4, #4]
 8003a38:	e7ae      	b.n	8003998 <_malloc_r+0x34>
 8003a3a:	463c      	mov	r4, r7
 8003a3c:	687f      	ldr	r7, [r7, #4]
 8003a3e:	e7b6      	b.n	80039ae <_malloc_r+0x4a>
 8003a40:	461a      	mov	r2, r3
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	42a3      	cmp	r3, r4
 8003a46:	d1fb      	bne.n	8003a40 <_malloc_r+0xdc>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	6053      	str	r3, [r2, #4]
 8003a4c:	e7de      	b.n	8003a0c <_malloc_r+0xa8>
 8003a4e:	230c      	movs	r3, #12
 8003a50:	4630      	mov	r0, r6
 8003a52:	6033      	str	r3, [r6, #0]
 8003a54:	f000 f99c 	bl	8003d90 <__malloc_unlock>
 8003a58:	e794      	b.n	8003984 <_malloc_r+0x20>
 8003a5a:	6005      	str	r5, [r0, #0]
 8003a5c:	e7d6      	b.n	8003a0c <_malloc_r+0xa8>
 8003a5e:	bf00      	nop
 8003a60:	200006c4 	.word	0x200006c4

08003a64 <_printf_common>:
 8003a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a68:	4616      	mov	r6, r2
 8003a6a:	4698      	mov	r8, r3
 8003a6c:	688a      	ldr	r2, [r1, #8]
 8003a6e:	690b      	ldr	r3, [r1, #16]
 8003a70:	4607      	mov	r7, r0
 8003a72:	4293      	cmp	r3, r2
 8003a74:	bfb8      	it	lt
 8003a76:	4613      	movlt	r3, r2
 8003a78:	6033      	str	r3, [r6, #0]
 8003a7a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a7e:	460c      	mov	r4, r1
 8003a80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a84:	b10a      	cbz	r2, 8003a8a <_printf_common+0x26>
 8003a86:	3301      	adds	r3, #1
 8003a88:	6033      	str	r3, [r6, #0]
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	0699      	lsls	r1, r3, #26
 8003a8e:	bf42      	ittt	mi
 8003a90:	6833      	ldrmi	r3, [r6, #0]
 8003a92:	3302      	addmi	r3, #2
 8003a94:	6033      	strmi	r3, [r6, #0]
 8003a96:	6825      	ldr	r5, [r4, #0]
 8003a98:	f015 0506 	ands.w	r5, r5, #6
 8003a9c:	d106      	bne.n	8003aac <_printf_common+0x48>
 8003a9e:	f104 0a19 	add.w	sl, r4, #25
 8003aa2:	68e3      	ldr	r3, [r4, #12]
 8003aa4:	6832      	ldr	r2, [r6, #0]
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	42ab      	cmp	r3, r5
 8003aaa:	dc2b      	bgt.n	8003b04 <_printf_common+0xa0>
 8003aac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ab0:	6822      	ldr	r2, [r4, #0]
 8003ab2:	3b00      	subs	r3, #0
 8003ab4:	bf18      	it	ne
 8003ab6:	2301      	movne	r3, #1
 8003ab8:	0692      	lsls	r2, r2, #26
 8003aba:	d430      	bmi.n	8003b1e <_printf_common+0xba>
 8003abc:	4641      	mov	r1, r8
 8003abe:	4638      	mov	r0, r7
 8003ac0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ac4:	47c8      	blx	r9
 8003ac6:	3001      	adds	r0, #1
 8003ac8:	d023      	beq.n	8003b12 <_printf_common+0xae>
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	6922      	ldr	r2, [r4, #16]
 8003ace:	f003 0306 	and.w	r3, r3, #6
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	bf14      	ite	ne
 8003ad6:	2500      	movne	r5, #0
 8003ad8:	6833      	ldreq	r3, [r6, #0]
 8003ada:	f04f 0600 	mov.w	r6, #0
 8003ade:	bf08      	it	eq
 8003ae0:	68e5      	ldreq	r5, [r4, #12]
 8003ae2:	f104 041a 	add.w	r4, r4, #26
 8003ae6:	bf08      	it	eq
 8003ae8:	1aed      	subeq	r5, r5, r3
 8003aea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003aee:	bf08      	it	eq
 8003af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003af4:	4293      	cmp	r3, r2
 8003af6:	bfc4      	itt	gt
 8003af8:	1a9b      	subgt	r3, r3, r2
 8003afa:	18ed      	addgt	r5, r5, r3
 8003afc:	42b5      	cmp	r5, r6
 8003afe:	d11a      	bne.n	8003b36 <_printf_common+0xd2>
 8003b00:	2000      	movs	r0, #0
 8003b02:	e008      	b.n	8003b16 <_printf_common+0xb2>
 8003b04:	2301      	movs	r3, #1
 8003b06:	4652      	mov	r2, sl
 8003b08:	4641      	mov	r1, r8
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	47c8      	blx	r9
 8003b0e:	3001      	adds	r0, #1
 8003b10:	d103      	bne.n	8003b1a <_printf_common+0xb6>
 8003b12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b1a:	3501      	adds	r5, #1
 8003b1c:	e7c1      	b.n	8003aa2 <_printf_common+0x3e>
 8003b1e:	2030      	movs	r0, #48	@ 0x30
 8003b20:	18e1      	adds	r1, r4, r3
 8003b22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b2c:	4422      	add	r2, r4
 8003b2e:	3302      	adds	r3, #2
 8003b30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b34:	e7c2      	b.n	8003abc <_printf_common+0x58>
 8003b36:	2301      	movs	r3, #1
 8003b38:	4622      	mov	r2, r4
 8003b3a:	4641      	mov	r1, r8
 8003b3c:	4638      	mov	r0, r7
 8003b3e:	47c8      	blx	r9
 8003b40:	3001      	adds	r0, #1
 8003b42:	d0e6      	beq.n	8003b12 <_printf_common+0xae>
 8003b44:	3601      	adds	r6, #1
 8003b46:	e7d9      	b.n	8003afc <_printf_common+0x98>

08003b48 <_printf_i>:
 8003b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b4c:	7e0f      	ldrb	r7, [r1, #24]
 8003b4e:	4691      	mov	r9, r2
 8003b50:	2f78      	cmp	r7, #120	@ 0x78
 8003b52:	4680      	mov	r8, r0
 8003b54:	460c      	mov	r4, r1
 8003b56:	469a      	mov	sl, r3
 8003b58:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b5e:	d807      	bhi.n	8003b70 <_printf_i+0x28>
 8003b60:	2f62      	cmp	r7, #98	@ 0x62
 8003b62:	d80a      	bhi.n	8003b7a <_printf_i+0x32>
 8003b64:	2f00      	cmp	r7, #0
 8003b66:	f000 80d1 	beq.w	8003d0c <_printf_i+0x1c4>
 8003b6a:	2f58      	cmp	r7, #88	@ 0x58
 8003b6c:	f000 80b8 	beq.w	8003ce0 <_printf_i+0x198>
 8003b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b78:	e03a      	b.n	8003bf0 <_printf_i+0xa8>
 8003b7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b7e:	2b15      	cmp	r3, #21
 8003b80:	d8f6      	bhi.n	8003b70 <_printf_i+0x28>
 8003b82:	a101      	add	r1, pc, #4	@ (adr r1, 8003b88 <_printf_i+0x40>)
 8003b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b88:	08003be1 	.word	0x08003be1
 8003b8c:	08003bf5 	.word	0x08003bf5
 8003b90:	08003b71 	.word	0x08003b71
 8003b94:	08003b71 	.word	0x08003b71
 8003b98:	08003b71 	.word	0x08003b71
 8003b9c:	08003b71 	.word	0x08003b71
 8003ba0:	08003bf5 	.word	0x08003bf5
 8003ba4:	08003b71 	.word	0x08003b71
 8003ba8:	08003b71 	.word	0x08003b71
 8003bac:	08003b71 	.word	0x08003b71
 8003bb0:	08003b71 	.word	0x08003b71
 8003bb4:	08003cf3 	.word	0x08003cf3
 8003bb8:	08003c1f 	.word	0x08003c1f
 8003bbc:	08003cad 	.word	0x08003cad
 8003bc0:	08003b71 	.word	0x08003b71
 8003bc4:	08003b71 	.word	0x08003b71
 8003bc8:	08003d15 	.word	0x08003d15
 8003bcc:	08003b71 	.word	0x08003b71
 8003bd0:	08003c1f 	.word	0x08003c1f
 8003bd4:	08003b71 	.word	0x08003b71
 8003bd8:	08003b71 	.word	0x08003b71
 8003bdc:	08003cb5 	.word	0x08003cb5
 8003be0:	6833      	ldr	r3, [r6, #0]
 8003be2:	1d1a      	adds	r2, r3, #4
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6032      	str	r2, [r6, #0]
 8003be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e09c      	b.n	8003d2e <_printf_i+0x1e6>
 8003bf4:	6833      	ldr	r3, [r6, #0]
 8003bf6:	6820      	ldr	r0, [r4, #0]
 8003bf8:	1d19      	adds	r1, r3, #4
 8003bfa:	6031      	str	r1, [r6, #0]
 8003bfc:	0606      	lsls	r6, r0, #24
 8003bfe:	d501      	bpl.n	8003c04 <_printf_i+0xbc>
 8003c00:	681d      	ldr	r5, [r3, #0]
 8003c02:	e003      	b.n	8003c0c <_printf_i+0xc4>
 8003c04:	0645      	lsls	r5, r0, #25
 8003c06:	d5fb      	bpl.n	8003c00 <_printf_i+0xb8>
 8003c08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c0c:	2d00      	cmp	r5, #0
 8003c0e:	da03      	bge.n	8003c18 <_printf_i+0xd0>
 8003c10:	232d      	movs	r3, #45	@ 0x2d
 8003c12:	426d      	negs	r5, r5
 8003c14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c18:	230a      	movs	r3, #10
 8003c1a:	4858      	ldr	r0, [pc, #352]	@ (8003d7c <_printf_i+0x234>)
 8003c1c:	e011      	b.n	8003c42 <_printf_i+0xfa>
 8003c1e:	6821      	ldr	r1, [r4, #0]
 8003c20:	6833      	ldr	r3, [r6, #0]
 8003c22:	0608      	lsls	r0, r1, #24
 8003c24:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c28:	d402      	bmi.n	8003c30 <_printf_i+0xe8>
 8003c2a:	0649      	lsls	r1, r1, #25
 8003c2c:	bf48      	it	mi
 8003c2e:	b2ad      	uxthmi	r5, r5
 8003c30:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c32:	6033      	str	r3, [r6, #0]
 8003c34:	bf14      	ite	ne
 8003c36:	230a      	movne	r3, #10
 8003c38:	2308      	moveq	r3, #8
 8003c3a:	4850      	ldr	r0, [pc, #320]	@ (8003d7c <_printf_i+0x234>)
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c42:	6866      	ldr	r6, [r4, #4]
 8003c44:	2e00      	cmp	r6, #0
 8003c46:	60a6      	str	r6, [r4, #8]
 8003c48:	db05      	blt.n	8003c56 <_printf_i+0x10e>
 8003c4a:	6821      	ldr	r1, [r4, #0]
 8003c4c:	432e      	orrs	r6, r5
 8003c4e:	f021 0104 	bic.w	r1, r1, #4
 8003c52:	6021      	str	r1, [r4, #0]
 8003c54:	d04b      	beq.n	8003cee <_printf_i+0x1a6>
 8003c56:	4616      	mov	r6, r2
 8003c58:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c5c:	fb03 5711 	mls	r7, r3, r1, r5
 8003c60:	5dc7      	ldrb	r7, [r0, r7]
 8003c62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c66:	462f      	mov	r7, r5
 8003c68:	42bb      	cmp	r3, r7
 8003c6a:	460d      	mov	r5, r1
 8003c6c:	d9f4      	bls.n	8003c58 <_printf_i+0x110>
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d10b      	bne.n	8003c8a <_printf_i+0x142>
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	07df      	lsls	r7, r3, #31
 8003c76:	d508      	bpl.n	8003c8a <_printf_i+0x142>
 8003c78:	6923      	ldr	r3, [r4, #16]
 8003c7a:	6861      	ldr	r1, [r4, #4]
 8003c7c:	4299      	cmp	r1, r3
 8003c7e:	bfde      	ittt	le
 8003c80:	2330      	movle	r3, #48	@ 0x30
 8003c82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c86:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003c8a:	1b92      	subs	r2, r2, r6
 8003c8c:	6122      	str	r2, [r4, #16]
 8003c8e:	464b      	mov	r3, r9
 8003c90:	4621      	mov	r1, r4
 8003c92:	4640      	mov	r0, r8
 8003c94:	f8cd a000 	str.w	sl, [sp]
 8003c98:	aa03      	add	r2, sp, #12
 8003c9a:	f7ff fee3 	bl	8003a64 <_printf_common>
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	d14a      	bne.n	8003d38 <_printf_i+0x1f0>
 8003ca2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ca6:	b004      	add	sp, #16
 8003ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cac:	6823      	ldr	r3, [r4, #0]
 8003cae:	f043 0320 	orr.w	r3, r3, #32
 8003cb2:	6023      	str	r3, [r4, #0]
 8003cb4:	2778      	movs	r7, #120	@ 0x78
 8003cb6:	4832      	ldr	r0, [pc, #200]	@ (8003d80 <_printf_i+0x238>)
 8003cb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	6831      	ldr	r1, [r6, #0]
 8003cc0:	061f      	lsls	r7, r3, #24
 8003cc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003cc6:	d402      	bmi.n	8003cce <_printf_i+0x186>
 8003cc8:	065f      	lsls	r7, r3, #25
 8003cca:	bf48      	it	mi
 8003ccc:	b2ad      	uxthmi	r5, r5
 8003cce:	6031      	str	r1, [r6, #0]
 8003cd0:	07d9      	lsls	r1, r3, #31
 8003cd2:	bf44      	itt	mi
 8003cd4:	f043 0320 	orrmi.w	r3, r3, #32
 8003cd8:	6023      	strmi	r3, [r4, #0]
 8003cda:	b11d      	cbz	r5, 8003ce4 <_printf_i+0x19c>
 8003cdc:	2310      	movs	r3, #16
 8003cde:	e7ad      	b.n	8003c3c <_printf_i+0xf4>
 8003ce0:	4826      	ldr	r0, [pc, #152]	@ (8003d7c <_printf_i+0x234>)
 8003ce2:	e7e9      	b.n	8003cb8 <_printf_i+0x170>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	f023 0320 	bic.w	r3, r3, #32
 8003cea:	6023      	str	r3, [r4, #0]
 8003cec:	e7f6      	b.n	8003cdc <_printf_i+0x194>
 8003cee:	4616      	mov	r6, r2
 8003cf0:	e7bd      	b.n	8003c6e <_printf_i+0x126>
 8003cf2:	6833      	ldr	r3, [r6, #0]
 8003cf4:	6825      	ldr	r5, [r4, #0]
 8003cf6:	1d18      	adds	r0, r3, #4
 8003cf8:	6961      	ldr	r1, [r4, #20]
 8003cfa:	6030      	str	r0, [r6, #0]
 8003cfc:	062e      	lsls	r6, r5, #24
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	d501      	bpl.n	8003d06 <_printf_i+0x1be>
 8003d02:	6019      	str	r1, [r3, #0]
 8003d04:	e002      	b.n	8003d0c <_printf_i+0x1c4>
 8003d06:	0668      	lsls	r0, r5, #25
 8003d08:	d5fb      	bpl.n	8003d02 <_printf_i+0x1ba>
 8003d0a:	8019      	strh	r1, [r3, #0]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	4616      	mov	r6, r2
 8003d10:	6123      	str	r3, [r4, #16]
 8003d12:	e7bc      	b.n	8003c8e <_printf_i+0x146>
 8003d14:	6833      	ldr	r3, [r6, #0]
 8003d16:	2100      	movs	r1, #0
 8003d18:	1d1a      	adds	r2, r3, #4
 8003d1a:	6032      	str	r2, [r6, #0]
 8003d1c:	681e      	ldr	r6, [r3, #0]
 8003d1e:	6862      	ldr	r2, [r4, #4]
 8003d20:	4630      	mov	r0, r6
 8003d22:	f000 f893 	bl	8003e4c <memchr>
 8003d26:	b108      	cbz	r0, 8003d2c <_printf_i+0x1e4>
 8003d28:	1b80      	subs	r0, r0, r6
 8003d2a:	6060      	str	r0, [r4, #4]
 8003d2c:	6863      	ldr	r3, [r4, #4]
 8003d2e:	6123      	str	r3, [r4, #16]
 8003d30:	2300      	movs	r3, #0
 8003d32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d36:	e7aa      	b.n	8003c8e <_printf_i+0x146>
 8003d38:	4632      	mov	r2, r6
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	4640      	mov	r0, r8
 8003d3e:	6923      	ldr	r3, [r4, #16]
 8003d40:	47d0      	blx	sl
 8003d42:	3001      	adds	r0, #1
 8003d44:	d0ad      	beq.n	8003ca2 <_printf_i+0x15a>
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	079b      	lsls	r3, r3, #30
 8003d4a:	d413      	bmi.n	8003d74 <_printf_i+0x22c>
 8003d4c:	68e0      	ldr	r0, [r4, #12]
 8003d4e:	9b03      	ldr	r3, [sp, #12]
 8003d50:	4298      	cmp	r0, r3
 8003d52:	bfb8      	it	lt
 8003d54:	4618      	movlt	r0, r3
 8003d56:	e7a6      	b.n	8003ca6 <_printf_i+0x15e>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	4632      	mov	r2, r6
 8003d5c:	4649      	mov	r1, r9
 8003d5e:	4640      	mov	r0, r8
 8003d60:	47d0      	blx	sl
 8003d62:	3001      	adds	r0, #1
 8003d64:	d09d      	beq.n	8003ca2 <_printf_i+0x15a>
 8003d66:	3501      	adds	r5, #1
 8003d68:	68e3      	ldr	r3, [r4, #12]
 8003d6a:	9903      	ldr	r1, [sp, #12]
 8003d6c:	1a5b      	subs	r3, r3, r1
 8003d6e:	42ab      	cmp	r3, r5
 8003d70:	dcf2      	bgt.n	8003d58 <_printf_i+0x210>
 8003d72:	e7eb      	b.n	8003d4c <_printf_i+0x204>
 8003d74:	2500      	movs	r5, #0
 8003d76:	f104 0619 	add.w	r6, r4, #25
 8003d7a:	e7f5      	b.n	8003d68 <_printf_i+0x220>
 8003d7c:	0800547f 	.word	0x0800547f
 8003d80:	08005490 	.word	0x08005490

08003d84 <__malloc_lock>:
 8003d84:	4801      	ldr	r0, [pc, #4]	@ (8003d8c <__malloc_lock+0x8>)
 8003d86:	f7ff bc71 	b.w	800366c <__retarget_lock_acquire_recursive>
 8003d8a:	bf00      	nop
 8003d8c:	200006bc 	.word	0x200006bc

08003d90 <__malloc_unlock>:
 8003d90:	4801      	ldr	r0, [pc, #4]	@ (8003d98 <__malloc_unlock+0x8>)
 8003d92:	f7ff bc6c 	b.w	800366e <__retarget_lock_release_recursive>
 8003d96:	bf00      	nop
 8003d98:	200006bc 	.word	0x200006bc

08003d9c <_realloc_r>:
 8003d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da0:	4607      	mov	r7, r0
 8003da2:	4614      	mov	r4, r2
 8003da4:	460d      	mov	r5, r1
 8003da6:	b921      	cbnz	r1, 8003db2 <_realloc_r+0x16>
 8003da8:	4611      	mov	r1, r2
 8003daa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dae:	f7ff bdd9 	b.w	8003964 <_malloc_r>
 8003db2:	b92a      	cbnz	r2, 8003dc0 <_realloc_r+0x24>
 8003db4:	f000 f866 	bl	8003e84 <_free_r>
 8003db8:	4625      	mov	r5, r4
 8003dba:	4628      	mov	r0, r5
 8003dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dc0:	f000 f8a8 	bl	8003f14 <_malloc_usable_size_r>
 8003dc4:	4284      	cmp	r4, r0
 8003dc6:	4606      	mov	r6, r0
 8003dc8:	d802      	bhi.n	8003dd0 <_realloc_r+0x34>
 8003dca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003dce:	d8f4      	bhi.n	8003dba <_realloc_r+0x1e>
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	4638      	mov	r0, r7
 8003dd4:	f7ff fdc6 	bl	8003964 <_malloc_r>
 8003dd8:	4680      	mov	r8, r0
 8003dda:	b908      	cbnz	r0, 8003de0 <_realloc_r+0x44>
 8003ddc:	4645      	mov	r5, r8
 8003dde:	e7ec      	b.n	8003dba <_realloc_r+0x1e>
 8003de0:	42b4      	cmp	r4, r6
 8003de2:	4622      	mov	r2, r4
 8003de4:	4629      	mov	r1, r5
 8003de6:	bf28      	it	cs
 8003de8:	4632      	movcs	r2, r6
 8003dea:	f000 f83d 	bl	8003e68 <memcpy>
 8003dee:	4629      	mov	r1, r5
 8003df0:	4638      	mov	r0, r7
 8003df2:	f000 f847 	bl	8003e84 <_free_r>
 8003df6:	e7f1      	b.n	8003ddc <_realloc_r+0x40>

08003df8 <memmove>:
 8003df8:	4288      	cmp	r0, r1
 8003dfa:	b510      	push	{r4, lr}
 8003dfc:	eb01 0402 	add.w	r4, r1, r2
 8003e00:	d902      	bls.n	8003e08 <memmove+0x10>
 8003e02:	4284      	cmp	r4, r0
 8003e04:	4623      	mov	r3, r4
 8003e06:	d807      	bhi.n	8003e18 <memmove+0x20>
 8003e08:	1e43      	subs	r3, r0, #1
 8003e0a:	42a1      	cmp	r1, r4
 8003e0c:	d008      	beq.n	8003e20 <memmove+0x28>
 8003e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e16:	e7f8      	b.n	8003e0a <memmove+0x12>
 8003e18:	4601      	mov	r1, r0
 8003e1a:	4402      	add	r2, r0
 8003e1c:	428a      	cmp	r2, r1
 8003e1e:	d100      	bne.n	8003e22 <memmove+0x2a>
 8003e20:	bd10      	pop	{r4, pc}
 8003e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e2a:	e7f7      	b.n	8003e1c <memmove+0x24>

08003e2c <_sbrk_r>:
 8003e2c:	b538      	push	{r3, r4, r5, lr}
 8003e2e:	2300      	movs	r3, #0
 8003e30:	4d05      	ldr	r5, [pc, #20]	@ (8003e48 <_sbrk_r+0x1c>)
 8003e32:	4604      	mov	r4, r0
 8003e34:	4608      	mov	r0, r1
 8003e36:	602b      	str	r3, [r5, #0]
 8003e38:	f7fd f80e 	bl	8000e58 <_sbrk>
 8003e3c:	1c43      	adds	r3, r0, #1
 8003e3e:	d102      	bne.n	8003e46 <_sbrk_r+0x1a>
 8003e40:	682b      	ldr	r3, [r5, #0]
 8003e42:	b103      	cbz	r3, 8003e46 <_sbrk_r+0x1a>
 8003e44:	6023      	str	r3, [r4, #0]
 8003e46:	bd38      	pop	{r3, r4, r5, pc}
 8003e48:	200006c8 	.word	0x200006c8

08003e4c <memchr>:
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	b510      	push	{r4, lr}
 8003e50:	b2c9      	uxtb	r1, r1
 8003e52:	4402      	add	r2, r0
 8003e54:	4293      	cmp	r3, r2
 8003e56:	4618      	mov	r0, r3
 8003e58:	d101      	bne.n	8003e5e <memchr+0x12>
 8003e5a:	2000      	movs	r0, #0
 8003e5c:	e003      	b.n	8003e66 <memchr+0x1a>
 8003e5e:	7804      	ldrb	r4, [r0, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	428c      	cmp	r4, r1
 8003e64:	d1f6      	bne.n	8003e54 <memchr+0x8>
 8003e66:	bd10      	pop	{r4, pc}

08003e68 <memcpy>:
 8003e68:	440a      	add	r2, r1
 8003e6a:	4291      	cmp	r1, r2
 8003e6c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003e70:	d100      	bne.n	8003e74 <memcpy+0xc>
 8003e72:	4770      	bx	lr
 8003e74:	b510      	push	{r4, lr}
 8003e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e7a:	4291      	cmp	r1, r2
 8003e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e80:	d1f9      	bne.n	8003e76 <memcpy+0xe>
 8003e82:	bd10      	pop	{r4, pc}

08003e84 <_free_r>:
 8003e84:	b538      	push	{r3, r4, r5, lr}
 8003e86:	4605      	mov	r5, r0
 8003e88:	2900      	cmp	r1, #0
 8003e8a:	d040      	beq.n	8003f0e <_free_r+0x8a>
 8003e8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e90:	1f0c      	subs	r4, r1, #4
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	bfb8      	it	lt
 8003e96:	18e4      	addlt	r4, r4, r3
 8003e98:	f7ff ff74 	bl	8003d84 <__malloc_lock>
 8003e9c:	4a1c      	ldr	r2, [pc, #112]	@ (8003f10 <_free_r+0x8c>)
 8003e9e:	6813      	ldr	r3, [r2, #0]
 8003ea0:	b933      	cbnz	r3, 8003eb0 <_free_r+0x2c>
 8003ea2:	6063      	str	r3, [r4, #4]
 8003ea4:	6014      	str	r4, [r2, #0]
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003eac:	f7ff bf70 	b.w	8003d90 <__malloc_unlock>
 8003eb0:	42a3      	cmp	r3, r4
 8003eb2:	d908      	bls.n	8003ec6 <_free_r+0x42>
 8003eb4:	6820      	ldr	r0, [r4, #0]
 8003eb6:	1821      	adds	r1, r4, r0
 8003eb8:	428b      	cmp	r3, r1
 8003eba:	bf01      	itttt	eq
 8003ebc:	6819      	ldreq	r1, [r3, #0]
 8003ebe:	685b      	ldreq	r3, [r3, #4]
 8003ec0:	1809      	addeq	r1, r1, r0
 8003ec2:	6021      	streq	r1, [r4, #0]
 8003ec4:	e7ed      	b.n	8003ea2 <_free_r+0x1e>
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	b10b      	cbz	r3, 8003ed0 <_free_r+0x4c>
 8003ecc:	42a3      	cmp	r3, r4
 8003ece:	d9fa      	bls.n	8003ec6 <_free_r+0x42>
 8003ed0:	6811      	ldr	r1, [r2, #0]
 8003ed2:	1850      	adds	r0, r2, r1
 8003ed4:	42a0      	cmp	r0, r4
 8003ed6:	d10b      	bne.n	8003ef0 <_free_r+0x6c>
 8003ed8:	6820      	ldr	r0, [r4, #0]
 8003eda:	4401      	add	r1, r0
 8003edc:	1850      	adds	r0, r2, r1
 8003ede:	4283      	cmp	r3, r0
 8003ee0:	6011      	str	r1, [r2, #0]
 8003ee2:	d1e0      	bne.n	8003ea6 <_free_r+0x22>
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4408      	add	r0, r1
 8003eea:	6010      	str	r0, [r2, #0]
 8003eec:	6053      	str	r3, [r2, #4]
 8003eee:	e7da      	b.n	8003ea6 <_free_r+0x22>
 8003ef0:	d902      	bls.n	8003ef8 <_free_r+0x74>
 8003ef2:	230c      	movs	r3, #12
 8003ef4:	602b      	str	r3, [r5, #0]
 8003ef6:	e7d6      	b.n	8003ea6 <_free_r+0x22>
 8003ef8:	6820      	ldr	r0, [r4, #0]
 8003efa:	1821      	adds	r1, r4, r0
 8003efc:	428b      	cmp	r3, r1
 8003efe:	bf01      	itttt	eq
 8003f00:	6819      	ldreq	r1, [r3, #0]
 8003f02:	685b      	ldreq	r3, [r3, #4]
 8003f04:	1809      	addeq	r1, r1, r0
 8003f06:	6021      	streq	r1, [r4, #0]
 8003f08:	6063      	str	r3, [r4, #4]
 8003f0a:	6054      	str	r4, [r2, #4]
 8003f0c:	e7cb      	b.n	8003ea6 <_free_r+0x22>
 8003f0e:	bd38      	pop	{r3, r4, r5, pc}
 8003f10:	200006c4 	.word	0x200006c4

08003f14 <_malloc_usable_size_r>:
 8003f14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f18:	1f18      	subs	r0, r3, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bfbc      	itt	lt
 8003f1e:	580b      	ldrlt	r3, [r1, r0]
 8003f20:	18c0      	addlt	r0, r0, r3
 8003f22:	4770      	bx	lr

08003f24 <_init>:
 8003f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f26:	bf00      	nop
 8003f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	469e      	mov	lr, r3
 8003f2e:	4770      	bx	lr

08003f30 <_fini>:
 8003f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f32:	bf00      	nop
 8003f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f36:	bc08      	pop	{r3}
 8003f38:	469e      	mov	lr, r3
 8003f3a:	4770      	bx	lr
