
spi_fnd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080020fc  080020fc  000030fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002134  08002134  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002134  08002134  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002134  08002134  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002134  08002134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002138  08002138  00003138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800213c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002148  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002148  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007273  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015cb  00000000  00000000  0000b2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000688  00000000  00000000  0000c878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004fe  00000000  00000000  0000cf00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015ff6  00000000  00000000  0000d3fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007964  00000000  00000000  000233f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e721  00000000  00000000  0002ad58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9479  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000193c  00000000  00000000  000a94bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000aadf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080020e4 	.word	0x080020e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080020e4 	.word	0x080020e4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa55 	bl	8000600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f827 	bl	80001a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f895 	bl	8000288 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015e:	f000 f869 	bl	8000234 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000162:	2200      	movs	r2, #0
 8000164:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000168:	480d      	ldr	r0, [pc, #52]	@ (80001a0 <main+0x54>)
 800016a:	f000 fe13 	bl	8000d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SRCLR_GPIO_Port, SRCLR_Pin, GPIO_PIN_SET);
 800016e:	2201      	movs	r2, #1
 8000170:	2104      	movs	r1, #4
 8000172:	480b      	ldr	r0, [pc, #44]	@ (80001a0 <main+0x54>)
 8000174:	f000 fe0e 	bl	8000d94 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for (uint8_t num = 0; num < 10; num++)
 8000178:	2300      	movs	r3, #0
 800017a:	71fb      	strb	r3, [r7, #7]
 800017c:	e00c      	b.n	8000198 <main+0x4c>
	  {
		  ShiftReg_Write(digitCode[num]);
 800017e:	79fb      	ldrb	r3, [r7, #7]
 8000180:	4a08      	ldr	r2, [pc, #32]	@ (80001a4 <main+0x58>)
 8000182:	5cd3      	ldrb	r3, [r2, r3]
 8000184:	4618      	mov	r0, r3
 8000186:	f000 f909 	bl	800039c <ShiftReg_Write>
		  HAL_Delay(500);
 800018a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800018e:	f000 fa99 	bl	80006c4 <HAL_Delay>
	  for (uint8_t num = 0; num < 10; num++)
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	3301      	adds	r3, #1
 8000196:	71fb      	strb	r3, [r7, #7]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	2b09      	cmp	r3, #9
 800019c:	d9ef      	bls.n	800017e <main+0x32>
 800019e:	e7eb      	b.n	8000178 <main+0x2c>
 80001a0:	40010c00 	.word	0x40010c00
 80001a4:	080020fc 	.word	0x080020fc

080001a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	b090      	sub	sp, #64	@ 0x40
 80001ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ae:	f107 0318 	add.w	r3, r7, #24
 80001b2:	2228      	movs	r2, #40	@ 0x28
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f001 ff68 	bl	800208c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001bc:	1d3b      	adds	r3, r7, #4
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
 80001c2:	605a      	str	r2, [r3, #4]
 80001c4:	609a      	str	r2, [r3, #8]
 80001c6:	60da      	str	r2, [r3, #12]
 80001c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ca:	2301      	movs	r3, #1
 80001cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001d4:	2300      	movs	r3, #0
 80001d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d8:	2301      	movs	r3, #1
 80001da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001dc:	2302      	movs	r3, #2
 80001de:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001e6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80001ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ec:	f107 0318 	add.w	r3, r7, #24
 80001f0:	4618      	mov	r0, r3
 80001f2:	f000 fe09 	bl	8000e08 <HAL_RCC_OscConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001fc:	f000 f90c 	bl	8000418 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000200:	230f      	movs	r3, #15
 8000202:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000204:	2302      	movs	r3, #2
 8000206:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000208:	2300      	movs	r3, #0
 800020a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800020c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000210:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000212:	2300      	movs	r3, #0
 8000214:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	2102      	movs	r1, #2
 800021a:	4618      	mov	r0, r3
 800021c:	f001 f876 	bl	800130c <HAL_RCC_ClockConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000226:	f000 f8f7 	bl	8000418 <Error_Handler>
  }
}
 800022a:	bf00      	nop
 800022c:	3740      	adds	r7, #64	@ 0x40
 800022e:	46bd      	mov	sp, r7
 8000230:	bd80      	pop	{r7, pc}
	...

08000234 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000238:	4b11      	ldr	r3, [pc, #68]	@ (8000280 <MX_USART2_UART_Init+0x4c>)
 800023a:	4a12      	ldr	r2, [pc, #72]	@ (8000284 <MX_USART2_UART_Init+0x50>)
 800023c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800023e:	4b10      	ldr	r3, [pc, #64]	@ (8000280 <MX_USART2_UART_Init+0x4c>)
 8000240:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000244:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000246:	4b0e      	ldr	r3, [pc, #56]	@ (8000280 <MX_USART2_UART_Init+0x4c>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800024c:	4b0c      	ldr	r3, [pc, #48]	@ (8000280 <MX_USART2_UART_Init+0x4c>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000252:	4b0b      	ldr	r3, [pc, #44]	@ (8000280 <MX_USART2_UART_Init+0x4c>)
 8000254:	2200      	movs	r2, #0
 8000256:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000258:	4b09      	ldr	r3, [pc, #36]	@ (8000280 <MX_USART2_UART_Init+0x4c>)
 800025a:	220c      	movs	r2, #12
 800025c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800025e:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <MX_USART2_UART_Init+0x4c>)
 8000260:	2200      	movs	r2, #0
 8000262:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000264:	4b06      	ldr	r3, [pc, #24]	@ (8000280 <MX_USART2_UART_Init+0x4c>)
 8000266:	2200      	movs	r2, #0
 8000268:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800026a:	4805      	ldr	r0, [pc, #20]	@ (8000280 <MX_USART2_UART_Init+0x4c>)
 800026c:	f001 f9dc 	bl	8001628 <HAL_UART_Init>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d001      	beq.n	800027a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000276:	f000 f8cf 	bl	8000418 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	20000028 	.word	0x20000028
 8000284:	40004400 	.word	0x40004400

08000288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b088      	sub	sp, #32
 800028c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028e:	f107 0310 	add.w	r3, r7, #16
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800029c:	4b3a      	ldr	r3, [pc, #232]	@ (8000388 <MX_GPIO_Init+0x100>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a39      	ldr	r2, [pc, #228]	@ (8000388 <MX_GPIO_Init+0x100>)
 80002a2:	f043 0310 	orr.w	r3, r3, #16
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b37      	ldr	r3, [pc, #220]	@ (8000388 <MX_GPIO_Init+0x100>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0310 	and.w	r3, r3, #16
 80002b0:	60fb      	str	r3, [r7, #12]
 80002b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b4:	4b34      	ldr	r3, [pc, #208]	@ (8000388 <MX_GPIO_Init+0x100>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a33      	ldr	r2, [pc, #204]	@ (8000388 <MX_GPIO_Init+0x100>)
 80002ba:	f043 0320 	orr.w	r3, r3, #32
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b31      	ldr	r3, [pc, #196]	@ (8000388 <MX_GPIO_Init+0x100>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0320 	and.w	r3, r3, #32
 80002c8:	60bb      	str	r3, [r7, #8]
 80002ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000388 <MX_GPIO_Init+0x100>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a2d      	ldr	r2, [pc, #180]	@ (8000388 <MX_GPIO_Init+0x100>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000388 <MX_GPIO_Init+0x100>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0304 	and.w	r3, r3, #4
 80002e0:	607b      	str	r3, [r7, #4]
 80002e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e4:	4b28      	ldr	r3, [pc, #160]	@ (8000388 <MX_GPIO_Init+0x100>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a27      	ldr	r2, [pc, #156]	@ (8000388 <MX_GPIO_Init+0x100>)
 80002ea:	f043 0308 	orr.w	r3, r3, #8
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b25      	ldr	r3, [pc, #148]	@ (8000388 <MX_GPIO_Init+0x100>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0308 	and.w	r3, r3, #8
 80002f8:	603b      	str	r3, [r7, #0]
 80002fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	2120      	movs	r1, #32
 8000300:	4822      	ldr	r0, [pc, #136]	@ (800038c <MX_GPIO_Init+0x104>)
 8000302:	f000 fd47 	bl	8000d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SRCLK_Pin|SER_Pin|OE_Pin|RCLK_Pin, GPIO_PIN_RESET);
 8000306:	2200      	movs	r2, #0
 8000308:	f24e 0102 	movw	r1, #57346	@ 0xe002
 800030c:	4820      	ldr	r0, [pc, #128]	@ (8000390 <MX_GPIO_Init+0x108>)
 800030e:	f000 fd41 	bl	8000d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SRCLR_GPIO_Port, SRCLR_Pin, GPIO_PIN_SET);
 8000312:	2201      	movs	r2, #1
 8000314:	2104      	movs	r1, #4
 8000316:	481e      	ldr	r0, [pc, #120]	@ (8000390 <MX_GPIO_Init+0x108>)
 8000318:	f000 fd3c 	bl	8000d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800031c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000320:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000322:	4b1c      	ldr	r3, [pc, #112]	@ (8000394 <MX_GPIO_Init+0x10c>)
 8000324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000326:	2300      	movs	r3, #0
 8000328:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	4619      	mov	r1, r3
 8000330:	4819      	ldr	r0, [pc, #100]	@ (8000398 <MX_GPIO_Init+0x110>)
 8000332:	f000 fbab 	bl	8000a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000336:	2320      	movs	r3, #32
 8000338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033a:	2301      	movs	r3, #1
 800033c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000342:	2302      	movs	r3, #2
 8000344:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000346:	f107 0310 	add.w	r3, r7, #16
 800034a:	4619      	mov	r1, r3
 800034c:	480f      	ldr	r0, [pc, #60]	@ (800038c <MX_GPIO_Init+0x104>)
 800034e:	f000 fb9d 	bl	8000a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : SRCLK_Pin SRCLR_Pin SER_Pin OE_Pin
                           RCLK_Pin */
  GPIO_InitStruct.Pin = SRCLK_Pin|SRCLR_Pin|SER_Pin|OE_Pin
 8000352:	f24e 0306 	movw	r3, #57350	@ 0xe006
 8000356:	613b      	str	r3, [r7, #16]
                          |RCLK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000358:	2301      	movs	r3, #1
 800035a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800035c:	2300      	movs	r3, #0
 800035e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000360:	2302      	movs	r3, #2
 8000362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000364:	f107 0310 	add.w	r3, r7, #16
 8000368:	4619      	mov	r1, r3
 800036a:	4809      	ldr	r0, [pc, #36]	@ (8000390 <MX_GPIO_Init+0x108>)
 800036c:	f000 fb8e 	bl	8000a8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000370:	2200      	movs	r2, #0
 8000372:	2100      	movs	r1, #0
 8000374:	2028      	movs	r0, #40	@ 0x28
 8000376:	f000 faa0 	bl	80008ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800037a:	2028      	movs	r0, #40	@ 0x28
 800037c:	f000 fab9 	bl	80008f2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000380:	bf00      	nop
 8000382:	3720      	adds	r7, #32
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40021000 	.word	0x40021000
 800038c:	40010800 	.word	0x40010800
 8000390:	40010c00 	.word	0x40010c00
 8000394:	10110000 	.word	0x10110000
 8000398:	40011000 	.word	0x40011000

0800039c <ShiftReg_Write>:

/* USER CODE BEGIN 4 */
void ShiftReg_Write(uint8_t data)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
  for (int8_t bit = 7; bit >= 0; bit--)
 80003a6:	2307      	movs	r3, #7
 80003a8:	73fb      	strb	r3, [r7, #15]
 80003aa:	e01e      	b.n	80003ea <ShiftReg_Write+0x4e>
  {
    HAL_GPIO_WritePin(SER_GPIO_Port, SER_Pin,
      (data & (1 << bit)) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003ac:	79fa      	ldrb	r2, [r7, #7]
 80003ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003b2:	fa42 f303 	asr.w	r3, r2, r3
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	f003 0301 	and.w	r3, r3, #1
 80003bc:	b2db      	uxtb	r3, r3
    HAL_GPIO_WritePin(SER_GPIO_Port, SER_Pin,
 80003be:	461a      	mov	r2, r3
 80003c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c4:	4813      	ldr	r0, [pc, #76]	@ (8000414 <ShiftReg_Write+0x78>)
 80003c6:	f000 fce5 	bl	8000d94 <HAL_GPIO_WritePin>

    /* Shift clock */
    HAL_GPIO_WritePin(SRCLK_GPIO_Port, SRCLK_Pin, GPIO_PIN_SET);
 80003ca:	2201      	movs	r2, #1
 80003cc:	2102      	movs	r1, #2
 80003ce:	4811      	ldr	r0, [pc, #68]	@ (8000414 <ShiftReg_Write+0x78>)
 80003d0:	f000 fce0 	bl	8000d94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SRCLK_GPIO_Port, SRCLK_Pin, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2102      	movs	r1, #2
 80003d8:	480e      	ldr	r0, [pc, #56]	@ (8000414 <ShiftReg_Write+0x78>)
 80003da:	f000 fcdb 	bl	8000d94 <HAL_GPIO_WritePin>
  for (int8_t bit = 7; bit >= 0; bit--)
 80003de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	3b01      	subs	r3, #1
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	73fb      	strb	r3, [r7, #15]
 80003ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	dadc      	bge.n	80003ac <ShiftReg_Write+0x10>
  }
  /* Latch */
  HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin, GPIO_PIN_SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003f8:	4806      	ldr	r0, [pc, #24]	@ (8000414 <ShiftReg_Write+0x78>)
 80003fa:	f000 fccb 	bl	8000d94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000404:	4803      	ldr	r0, [pc, #12]	@ (8000414 <ShiftReg_Write+0x78>)
 8000406:	f000 fcc5 	bl	8000d94 <HAL_GPIO_WritePin>
}
 800040a:	bf00      	nop
 800040c:	3710      	adds	r7, #16
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40010c00 	.word	0x40010c00

08000418 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041c:	b672      	cpsid	i
}
 800041e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <Error_Handler+0x8>

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b480      	push	{r7}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800042a:	4b15      	ldr	r3, [pc, #84]	@ (8000480 <HAL_MspInit+0x5c>)
 800042c:	699b      	ldr	r3, [r3, #24]
 800042e:	4a14      	ldr	r2, [pc, #80]	@ (8000480 <HAL_MspInit+0x5c>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6193      	str	r3, [r2, #24]
 8000436:	4b12      	ldr	r3, [pc, #72]	@ (8000480 <HAL_MspInit+0x5c>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	f003 0301 	and.w	r3, r3, #1
 800043e:	60bb      	str	r3, [r7, #8]
 8000440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <HAL_MspInit+0x5c>)
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	4a0e      	ldr	r2, [pc, #56]	@ (8000480 <HAL_MspInit+0x5c>)
 8000448:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800044c:	61d3      	str	r3, [r2, #28]
 800044e:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <HAL_MspInit+0x5c>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800045a:	4b0a      	ldr	r3, [pc, #40]	@ (8000484 <HAL_MspInit+0x60>)
 800045c:	685b      	ldr	r3, [r3, #4]
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	4a04      	ldr	r2, [pc, #16]	@ (8000484 <HAL_MspInit+0x60>)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	bf00      	nop
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr
 8000480:	40021000 	.word	0x40021000
 8000484:	40010000 	.word	0x40010000

08000488 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000490:	f107 0310 	add.w	r3, r7, #16
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a1f      	ldr	r2, [pc, #124]	@ (8000520 <HAL_UART_MspInit+0x98>)
 80004a4:	4293      	cmp	r3, r2
 80004a6:	d137      	bne.n	8000518 <HAL_UART_MspInit+0x90>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000524 <HAL_UART_MspInit+0x9c>)
 80004aa:	69db      	ldr	r3, [r3, #28]
 80004ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000524 <HAL_UART_MspInit+0x9c>)
 80004ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004b2:	61d3      	str	r3, [r2, #28]
 80004b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000524 <HAL_UART_MspInit+0x9c>)
 80004b6:	69db      	ldr	r3, [r3, #28]
 80004b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004bc:	60fb      	str	r3, [r7, #12]
 80004be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	4b18      	ldr	r3, [pc, #96]	@ (8000524 <HAL_UART_MspInit+0x9c>)
 80004c2:	699b      	ldr	r3, [r3, #24]
 80004c4:	4a17      	ldr	r2, [pc, #92]	@ (8000524 <HAL_UART_MspInit+0x9c>)
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6193      	str	r3, [r2, #24]
 80004cc:	4b15      	ldr	r3, [pc, #84]	@ (8000524 <HAL_UART_MspInit+0x9c>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	f003 0304 	and.w	r3, r3, #4
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin;
 80004d8:	2304      	movs	r3, #4
 80004da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004dc:	2302      	movs	r3, #2
 80004de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e0:	2302      	movs	r3, #2
 80004e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USART_TX_GPIO_Port, &GPIO_InitStruct);
 80004e4:	f107 0310 	add.w	r3, r7, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	480f      	ldr	r0, [pc, #60]	@ (8000528 <HAL_UART_MspInit+0xa0>)
 80004ec:	f000 face 	bl	8000a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80004f0:	2308      	movs	r3, #8
 80004f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f8:	2300      	movs	r3, #0
 80004fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004fc:	f107 0310 	add.w	r3, r7, #16
 8000500:	4619      	mov	r1, r3
 8000502:	4809      	ldr	r0, [pc, #36]	@ (8000528 <HAL_UART_MspInit+0xa0>)
 8000504:	f000 fac2 	bl	8000a8c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2100      	movs	r1, #0
 800050c:	2026      	movs	r0, #38	@ 0x26
 800050e:	f000 f9d4 	bl	80008ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000512:	2026      	movs	r0, #38	@ 0x26
 8000514:	f000 f9ed 	bl	80008f2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000518:	bf00      	nop
 800051a:	3720      	adds	r7, #32
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40004400 	.word	0x40004400
 8000524:	40021000 	.word	0x40021000
 8000528:	40010800 	.word	0x40010800

0800052c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <NMI_Handler+0x4>

08000534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <MemManage_Handler+0x4>

08000544 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <BusFault_Handler+0x4>

0800054c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <UsageFault_Handler+0x4>

08000554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr

0800056c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800057c:	f000 f886 	bl	800068c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}

08000584 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000588:	4802      	ldr	r0, [pc, #8]	@ (8000594 <USART2_IRQHandler+0x10>)
 800058a:	f001 f89d 	bl	80016c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000028 	.word	0x20000028

08000598 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN_Pin);
 800059c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80005a0:	f000 fc10 	bl	8000dc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b4:	f7ff fff8 	bl	80005a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480b      	ldr	r0, [pc, #44]	@ (80005e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ba:	490c      	ldr	r1, [pc, #48]	@ (80005ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005bc:	4a0c      	ldr	r2, [pc, #48]	@ (80005f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a09      	ldr	r2, [pc, #36]	@ (80005f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005d0:	4c09      	ldr	r4, [pc, #36]	@ (80005f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005de:	f001 fd5d 	bl	800209c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff fdb3 	bl	800014c <main>
  bx lr
 80005e6:	4770      	bx	lr
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005f0:	0800213c 	.word	0x0800213c
  ldr r2, =_sbss
 80005f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005f8:	20000074 	.word	0x20000074

080005fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC1_2_IRQHandler>
	...

08000600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000604:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <HAL_Init+0x28>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a07      	ldr	r2, [pc, #28]	@ (8000628 <HAL_Init+0x28>)
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000610:	2003      	movs	r0, #3
 8000612:	f000 f947 	bl	80008a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000616:	2000      	movs	r0, #0
 8000618:	f000 f808 	bl	800062c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800061c:	f7ff ff02 	bl	8000424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40022000 	.word	0x40022000

0800062c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000634:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <HAL_InitTick+0x54>)
 8000636:	681a      	ldr	r2, [r3, #0]
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <HAL_InitTick+0x58>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4619      	mov	r1, r3
 800063e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000642:	fbb3 f3f1 	udiv	r3, r3, r1
 8000646:	fbb2 f3f3 	udiv	r3, r2, r3
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f95f 	bl	800090e <HAL_SYSTICK_Config>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000656:	2301      	movs	r3, #1
 8000658:	e00e      	b.n	8000678 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b0f      	cmp	r3, #15
 800065e:	d80a      	bhi.n	8000676 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000660:	2200      	movs	r2, #0
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000668:	f000 f927 	bl	80008ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800066c:	4a06      	ldr	r2, [pc, #24]	@ (8000688 <HAL_InitTick+0x5c>)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000672:	2300      	movs	r3, #0
 8000674:	e000      	b.n	8000678 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000676:	2301      	movs	r3, #1
}
 8000678:	4618      	mov	r0, r3
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000000 	.word	0x20000000
 8000684:	20000008 	.word	0x20000008
 8000688:	20000004 	.word	0x20000004

0800068c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <HAL_IncTick+0x1c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <HAL_IncTick+0x20>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4413      	add	r3, r2
 800069c:	4a03      	ldr	r2, [pc, #12]	@ (80006ac <HAL_IncTick+0x20>)
 800069e:	6013      	str	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000070 	.word	0x20000070

080006b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return uwTick;
 80006b4:	4b02      	ldr	r3, [pc, #8]	@ (80006c0 <HAL_GetTick+0x10>)
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	20000070 	.word	0x20000070

080006c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006cc:	f7ff fff0 	bl	80006b0 <HAL_GetTick>
 80006d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80006dc:	d005      	beq.n	80006ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006de:	4b0a      	ldr	r3, [pc, #40]	@ (8000708 <HAL_Delay+0x44>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	4413      	add	r3, r2
 80006e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ea:	bf00      	nop
 80006ec:	f7ff ffe0 	bl	80006b0 <HAL_GetTick>
 80006f0:	4602      	mov	r2, r0
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	429a      	cmp	r2, r3
 80006fa:	d8f7      	bhi.n	80006ec <HAL_Delay+0x28>
  {
  }
}
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	3710      	adds	r7, #16
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000008 	.word	0x20000008

0800070c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	f003 0307 	and.w	r3, r3, #7
 800071a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800071c:	4b0c      	ldr	r3, [pc, #48]	@ (8000750 <__NVIC_SetPriorityGrouping+0x44>)
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000722:	68ba      	ldr	r2, [r7, #8]
 8000724:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000728:	4013      	ands	r3, r2
 800072a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000734:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800073c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800073e:	4a04      	ldr	r2, [pc, #16]	@ (8000750 <__NVIC_SetPriorityGrouping+0x44>)
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	60d3      	str	r3, [r2, #12]
}
 8000744:	bf00      	nop
 8000746:	3714      	adds	r7, #20
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000758:	4b04      	ldr	r3, [pc, #16]	@ (800076c <__NVIC_GetPriorityGrouping+0x18>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	f003 0307 	and.w	r3, r3, #7
}
 8000762:	4618      	mov	r0, r3
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	2b00      	cmp	r3, #0
 8000780:	db0b      	blt.n	800079a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	f003 021f 	and.w	r2, r3, #31
 8000788:	4906      	ldr	r1, [pc, #24]	@ (80007a4 <__NVIC_EnableIRQ+0x34>)
 800078a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078e:	095b      	lsrs	r3, r3, #5
 8000790:	2001      	movs	r0, #1
 8000792:	fa00 f202 	lsl.w	r2, r0, r2
 8000796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800079a:	bf00      	nop
 800079c:	370c      	adds	r7, #12
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr
 80007a4:	e000e100 	.word	0xe000e100

080007a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	4603      	mov	r3, r0
 80007b0:	6039      	str	r1, [r7, #0]
 80007b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	db0a      	blt.n	80007d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007bc:	683b      	ldr	r3, [r7, #0]
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	490c      	ldr	r1, [pc, #48]	@ (80007f4 <__NVIC_SetPriority+0x4c>)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	0112      	lsls	r2, r2, #4
 80007c8:	b2d2      	uxtb	r2, r2
 80007ca:	440b      	add	r3, r1
 80007cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007d0:	e00a      	b.n	80007e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4908      	ldr	r1, [pc, #32]	@ (80007f8 <__NVIC_SetPriority+0x50>)
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	f003 030f 	and.w	r3, r3, #15
 80007de:	3b04      	subs	r3, #4
 80007e0:	0112      	lsls	r2, r2, #4
 80007e2:	b2d2      	uxtb	r2, r2
 80007e4:	440b      	add	r3, r1
 80007e6:	761a      	strb	r2, [r3, #24]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000e100 	.word	0xe000e100
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b089      	sub	sp, #36	@ 0x24
 8000800:	af00      	add	r7, sp, #0
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f003 0307 	and.w	r3, r3, #7
 800080e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000810:	69fb      	ldr	r3, [r7, #28]
 8000812:	f1c3 0307 	rsb	r3, r3, #7
 8000816:	2b04      	cmp	r3, #4
 8000818:	bf28      	it	cs
 800081a:	2304      	movcs	r3, #4
 800081c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800081e:	69fb      	ldr	r3, [r7, #28]
 8000820:	3304      	adds	r3, #4
 8000822:	2b06      	cmp	r3, #6
 8000824:	d902      	bls.n	800082c <NVIC_EncodePriority+0x30>
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3b03      	subs	r3, #3
 800082a:	e000      	b.n	800082e <NVIC_EncodePriority+0x32>
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	43da      	mvns	r2, r3
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	401a      	ands	r2, r3
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000844:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	fa01 f303 	lsl.w	r3, r1, r3
 800084e:	43d9      	mvns	r1, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000854:	4313      	orrs	r3, r2
         );
}
 8000856:	4618      	mov	r0, r3
 8000858:	3724      	adds	r7, #36	@ 0x24
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000870:	d301      	bcc.n	8000876 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000872:	2301      	movs	r3, #1
 8000874:	e00f      	b.n	8000896 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000876:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <SysTick_Config+0x40>)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3b01      	subs	r3, #1
 800087c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800087e:	210f      	movs	r1, #15
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000884:	f7ff ff90 	bl	80007a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000888:	4b05      	ldr	r3, [pc, #20]	@ (80008a0 <SysTick_Config+0x40>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800088e:	4b04      	ldr	r3, [pc, #16]	@ (80008a0 <SysTick_Config+0x40>)
 8000890:	2207      	movs	r2, #7
 8000892:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	e000e010 	.word	0xe000e010

080008a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008ac:	6878      	ldr	r0, [r7, #4]
 80008ae:	f7ff ff2d 	bl	800070c <__NVIC_SetPriorityGrouping>
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}

080008ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af00      	add	r7, sp, #0
 80008c0:	4603      	mov	r3, r0
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
 80008c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008cc:	f7ff ff42 	bl	8000754 <__NVIC_GetPriorityGrouping>
 80008d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	68b9      	ldr	r1, [r7, #8]
 80008d6:	6978      	ldr	r0, [r7, #20]
 80008d8:	f7ff ff90 	bl	80007fc <NVIC_EncodePriority>
 80008dc:	4602      	mov	r2, r0
 80008de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff ff5f 	bl	80007a8 <__NVIC_SetPriority>
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	4603      	mov	r3, r0
 80008fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff ff35 	bl	8000770 <__NVIC_EnableIRQ>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff ffa2 	bl	8000860 <SysTick_Config>
 800091c:	4603      	mov	r3, r0
}
 800091e:	4618      	mov	r0, r3
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000926:	b480      	push	{r7}
 8000928:	b085      	sub	sp, #20
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b02      	cmp	r3, #2
 800093c:	d008      	beq.n	8000950 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	2204      	movs	r2, #4
 8000942:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	e020      	b.n	8000992 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	f022 020e 	bic.w	r2, r2, #14
 800095e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f022 0201 	bic.w	r2, r2, #1
 800096e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000978:	2101      	movs	r1, #1
 800097a:	fa01 f202 	lsl.w	r2, r1, r2
 800097e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2201      	movs	r2, #1
 8000984:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000990:	7bfb      	ldrb	r3, [r7, #15]
}
 8000992:	4618      	mov	r0, r3
 8000994:	3714      	adds	r7, #20
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr

0800099c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009a4:	2300      	movs	r3, #0
 80009a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b02      	cmp	r3, #2
 80009b2:	d005      	beq.n	80009c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2204      	movs	r2, #4
 80009b8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
 80009be:	e051      	b.n	8000a64 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f022 020e 	bic.w	r2, r2, #14
 80009ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f022 0201 	bic.w	r2, r2, #1
 80009de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a22      	ldr	r2, [pc, #136]	@ (8000a70 <HAL_DMA_Abort_IT+0xd4>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d029      	beq.n	8000a3e <HAL_DMA_Abort_IT+0xa2>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a21      	ldr	r2, [pc, #132]	@ (8000a74 <HAL_DMA_Abort_IT+0xd8>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d022      	beq.n	8000a3a <HAL_DMA_Abort_IT+0x9e>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a1f      	ldr	r2, [pc, #124]	@ (8000a78 <HAL_DMA_Abort_IT+0xdc>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d01a      	beq.n	8000a34 <HAL_DMA_Abort_IT+0x98>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a1e      	ldr	r2, [pc, #120]	@ (8000a7c <HAL_DMA_Abort_IT+0xe0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d012      	beq.n	8000a2e <HAL_DMA_Abort_IT+0x92>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a80 <HAL_DMA_Abort_IT+0xe4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d00a      	beq.n	8000a28 <HAL_DMA_Abort_IT+0x8c>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a1b      	ldr	r2, [pc, #108]	@ (8000a84 <HAL_DMA_Abort_IT+0xe8>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d102      	bne.n	8000a22 <HAL_DMA_Abort_IT+0x86>
 8000a1c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a20:	e00e      	b.n	8000a40 <HAL_DMA_Abort_IT+0xa4>
 8000a22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a26:	e00b      	b.n	8000a40 <HAL_DMA_Abort_IT+0xa4>
 8000a28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a2c:	e008      	b.n	8000a40 <HAL_DMA_Abort_IT+0xa4>
 8000a2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a32:	e005      	b.n	8000a40 <HAL_DMA_Abort_IT+0xa4>
 8000a34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a38:	e002      	b.n	8000a40 <HAL_DMA_Abort_IT+0xa4>
 8000a3a:	2310      	movs	r3, #16
 8000a3c:	e000      	b.n	8000a40 <HAL_DMA_Abort_IT+0xa4>
 8000a3e:	2301      	movs	r3, #1
 8000a40:	4a11      	ldr	r2, [pc, #68]	@ (8000a88 <HAL_DMA_Abort_IT+0xec>)
 8000a42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	4798      	blx	r3
    } 
  }
  return status;
 8000a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40020008 	.word	0x40020008
 8000a74:	4002001c 	.word	0x4002001c
 8000a78:	40020030 	.word	0x40020030
 8000a7c:	40020044 	.word	0x40020044
 8000a80:	40020058 	.word	0x40020058
 8000a84:	4002006c 	.word	0x4002006c
 8000a88:	40020000 	.word	0x40020000

08000a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b08b      	sub	sp, #44	@ 0x2c
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9e:	e169      	b.n	8000d74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	f040 8158 	bne.w	8000d6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	4a9a      	ldr	r2, [pc, #616]	@ (8000d2c <HAL_GPIO_Init+0x2a0>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d05e      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
 8000ac8:	4a98      	ldr	r2, [pc, #608]	@ (8000d2c <HAL_GPIO_Init+0x2a0>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d875      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000ace:	4a98      	ldr	r2, [pc, #608]	@ (8000d30 <HAL_GPIO_Init+0x2a4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d058      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
 8000ad4:	4a96      	ldr	r2, [pc, #600]	@ (8000d30 <HAL_GPIO_Init+0x2a4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d86f      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000ada:	4a96      	ldr	r2, [pc, #600]	@ (8000d34 <HAL_GPIO_Init+0x2a8>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d052      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
 8000ae0:	4a94      	ldr	r2, [pc, #592]	@ (8000d34 <HAL_GPIO_Init+0x2a8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d869      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000ae6:	4a94      	ldr	r2, [pc, #592]	@ (8000d38 <HAL_GPIO_Init+0x2ac>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d04c      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
 8000aec:	4a92      	ldr	r2, [pc, #584]	@ (8000d38 <HAL_GPIO_Init+0x2ac>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d863      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000af2:	4a92      	ldr	r2, [pc, #584]	@ (8000d3c <HAL_GPIO_Init+0x2b0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d046      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
 8000af8:	4a90      	ldr	r2, [pc, #576]	@ (8000d3c <HAL_GPIO_Init+0x2b0>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d85d      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000afe:	2b12      	cmp	r3, #18
 8000b00:	d82a      	bhi.n	8000b58 <HAL_GPIO_Init+0xcc>
 8000b02:	2b12      	cmp	r3, #18
 8000b04:	d859      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000b06:	a201      	add	r2, pc, #4	@ (adr r2, 8000b0c <HAL_GPIO_Init+0x80>)
 8000b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0c:	08000b87 	.word	0x08000b87
 8000b10:	08000b61 	.word	0x08000b61
 8000b14:	08000b73 	.word	0x08000b73
 8000b18:	08000bb5 	.word	0x08000bb5
 8000b1c:	08000bbb 	.word	0x08000bbb
 8000b20:	08000bbb 	.word	0x08000bbb
 8000b24:	08000bbb 	.word	0x08000bbb
 8000b28:	08000bbb 	.word	0x08000bbb
 8000b2c:	08000bbb 	.word	0x08000bbb
 8000b30:	08000bbb 	.word	0x08000bbb
 8000b34:	08000bbb 	.word	0x08000bbb
 8000b38:	08000bbb 	.word	0x08000bbb
 8000b3c:	08000bbb 	.word	0x08000bbb
 8000b40:	08000bbb 	.word	0x08000bbb
 8000b44:	08000bbb 	.word	0x08000bbb
 8000b48:	08000bbb 	.word	0x08000bbb
 8000b4c:	08000bbb 	.word	0x08000bbb
 8000b50:	08000b69 	.word	0x08000b69
 8000b54:	08000b7d 	.word	0x08000b7d
 8000b58:	4a79      	ldr	r2, [pc, #484]	@ (8000d40 <HAL_GPIO_Init+0x2b4>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d013      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b5e:	e02c      	b.n	8000bba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	623b      	str	r3, [r7, #32]
          break;
 8000b66:	e029      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	623b      	str	r3, [r7, #32]
          break;
 8000b70:	e024      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	3308      	adds	r3, #8
 8000b78:	623b      	str	r3, [r7, #32]
          break;
 8000b7a:	e01f      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	330c      	adds	r3, #12
 8000b82:	623b      	str	r3, [r7, #32]
          break;
 8000b84:	e01a      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d102      	bne.n	8000b94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	623b      	str	r3, [r7, #32]
          break;
 8000b92:	e013      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d105      	bne.n	8000ba8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69fa      	ldr	r2, [r7, #28]
 8000ba4:	611a      	str	r2, [r3, #16]
          break;
 8000ba6:	e009      	b.n	8000bbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	69fa      	ldr	r2, [r7, #28]
 8000bb0:	615a      	str	r2, [r3, #20]
          break;
 8000bb2:	e003      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
          break;
 8000bb8:	e000      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          break;
 8000bba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	2bff      	cmp	r3, #255	@ 0xff
 8000bc0:	d801      	bhi.n	8000bc6 <HAL_GPIO_Init+0x13a>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	e001      	b.n	8000bca <HAL_GPIO_Init+0x13e>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	2bff      	cmp	r3, #255	@ 0xff
 8000bd0:	d802      	bhi.n	8000bd8 <HAL_GPIO_Init+0x14c>
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	e002      	b.n	8000bde <HAL_GPIO_Init+0x152>
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bda:	3b08      	subs	r3, #8
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	210f      	movs	r1, #15
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	401a      	ands	r2, r3
 8000bf0:	6a39      	ldr	r1, [r7, #32]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a4c      	ldr	r2, [pc, #304]	@ (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b4a      	ldr	r3, [pc, #296]	@ (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c24:	4a48      	ldr	r2, [pc, #288]	@ (8000d48 <HAL_GPIO_Init+0x2bc>)
 8000c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c34:	f003 0303 	and.w	r3, r3, #3
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	220f      	movs	r2, #15
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	4013      	ands	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a40      	ldr	r2, [pc, #256]	@ (8000d4c <HAL_GPIO_Init+0x2c0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d013      	beq.n	8000c78 <HAL_GPIO_Init+0x1ec>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a3f      	ldr	r2, [pc, #252]	@ (8000d50 <HAL_GPIO_Init+0x2c4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d00d      	beq.n	8000c74 <HAL_GPIO_Init+0x1e8>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d54 <HAL_GPIO_Init+0x2c8>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d007      	beq.n	8000c70 <HAL_GPIO_Init+0x1e4>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a3d      	ldr	r2, [pc, #244]	@ (8000d58 <HAL_GPIO_Init+0x2cc>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d101      	bne.n	8000c6c <HAL_GPIO_Init+0x1e0>
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e006      	b.n	8000c7a <HAL_GPIO_Init+0x1ee>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	e004      	b.n	8000c7a <HAL_GPIO_Init+0x1ee>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e002      	b.n	8000c7a <HAL_GPIO_Init+0x1ee>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <HAL_GPIO_Init+0x1ee>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c7c:	f002 0203 	and.w	r2, r2, #3
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	4093      	lsls	r3, r2
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c8a:	492f      	ldr	r1, [pc, #188]	@ (8000d48 <HAL_GPIO_Init+0x2bc>)
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	3302      	adds	r3, #2
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d006      	beq.n	8000cb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	492c      	ldr	r1, [pc, #176]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	608b      	str	r3, [r1, #8]
 8000cb0:	e006      	b.n	8000cc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	4928      	ldr	r1, [pc, #160]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d006      	beq.n	8000cda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ccc:	4b23      	ldr	r3, [pc, #140]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	4922      	ldr	r1, [pc, #136]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	60cb      	str	r3, [r1, #12]
 8000cd8:	e006      	b.n	8000ce8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cda:	4b20      	ldr	r3, [pc, #128]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	491e      	ldr	r1, [pc, #120]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d006      	beq.n	8000d02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cf4:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	4918      	ldr	r1, [pc, #96]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	604b      	str	r3, [r1, #4]
 8000d00:	e006      	b.n	8000d10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d02:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	4914      	ldr	r1, [pc, #80]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d021      	beq.n	8000d60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	490e      	ldr	r1, [pc, #56]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	600b      	str	r3, [r1, #0]
 8000d28:	e021      	b.n	8000d6e <HAL_GPIO_Init+0x2e2>
 8000d2a:	bf00      	nop
 8000d2c:	10320000 	.word	0x10320000
 8000d30:	10310000 	.word	0x10310000
 8000d34:	10220000 	.word	0x10220000
 8000d38:	10210000 	.word	0x10210000
 8000d3c:	10120000 	.word	0x10120000
 8000d40:	10110000 	.word	0x10110000
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40010000 	.word	0x40010000
 8000d4c:	40010800 	.word	0x40010800
 8000d50:	40010c00 	.word	0x40010c00
 8000d54:	40011000 	.word	0x40011000
 8000d58:	40011400 	.word	0x40011400
 8000d5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <HAL_GPIO_Init+0x304>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	4909      	ldr	r1, [pc, #36]	@ (8000d90 <HAL_GPIO_Init+0x304>)
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	3301      	adds	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f47f ae8e 	bne.w	8000aa0 <HAL_GPIO_Init+0x14>
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	372c      	adds	r7, #44	@ 0x2c
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40010400 	.word	0x40010400

08000d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	807b      	strh	r3, [r7, #2]
 8000da0:	4613      	mov	r3, r2
 8000da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da4:	787b      	ldrb	r3, [r7, #1]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000daa:	887a      	ldrh	r2, [r7, #2]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000db0:	e003      	b.n	8000dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000db2:	887b      	ldrh	r3, [r7, #2]
 8000db4:	041a      	lsls	r2, r3, #16
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	611a      	str	r2, [r3, #16]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000dd0:	695a      	ldr	r2, [r3, #20]
 8000dd2:	88fb      	ldrh	r3, [r7, #6]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d006      	beq.n	8000de8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000dda:	4a05      	ldr	r2, [pc, #20]	@ (8000df0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ddc:	88fb      	ldrh	r3, [r7, #6]
 8000dde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 f806 	bl	8000df4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40010400 	.word	0x40010400

08000df4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d101      	bne.n	8000e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e272      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 8087 	beq.w	8000f36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e28:	4b92      	ldr	r3, [pc, #584]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 030c 	and.w	r3, r3, #12
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d00c      	beq.n	8000e4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e34:	4b8f      	ldr	r3, [pc, #572]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 030c 	and.w	r3, r3, #12
 8000e3c:	2b08      	cmp	r3, #8
 8000e3e:	d112      	bne.n	8000e66 <HAL_RCC_OscConfig+0x5e>
 8000e40:	4b8c      	ldr	r3, [pc, #560]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e4c:	d10b      	bne.n	8000e66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e4e:	4b89      	ldr	r3, [pc, #548]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d06c      	beq.n	8000f34 <HAL_RCC_OscConfig+0x12c>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d168      	bne.n	8000f34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e24c      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e6e:	d106      	bne.n	8000e7e <HAL_RCC_OscConfig+0x76>
 8000e70:	4b80      	ldr	r3, [pc, #512]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a7f      	ldr	r2, [pc, #508]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	e02e      	b.n	8000edc <HAL_RCC_OscConfig+0xd4>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10c      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x98>
 8000e86:	4b7b      	ldr	r3, [pc, #492]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a7a      	ldr	r2, [pc, #488]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	4b78      	ldr	r3, [pc, #480]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a77      	ldr	r2, [pc, #476]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e01d      	b.n	8000edc <HAL_RCC_OscConfig+0xd4>
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0xbc>
 8000eaa:	4b72      	ldr	r3, [pc, #456]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a71      	ldr	r2, [pc, #452]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000eb4:	6013      	str	r3, [r2, #0]
 8000eb6:	4b6f      	ldr	r3, [pc, #444]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a6e      	ldr	r2, [pc, #440]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ec0:	6013      	str	r3, [r2, #0]
 8000ec2:	e00b      	b.n	8000edc <HAL_RCC_OscConfig+0xd4>
 8000ec4:	4b6b      	ldr	r3, [pc, #428]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a6a      	ldr	r2, [pc, #424]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b68      	ldr	r3, [pc, #416]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a67      	ldr	r2, [pc, #412]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d013      	beq.n	8000f0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee4:	f7ff fbe4 	bl	80006b0 <HAL_GetTick>
 8000ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eea:	e008      	b.n	8000efe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000eec:	f7ff fbe0 	bl	80006b0 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	2b64      	cmp	r3, #100	@ 0x64
 8000ef8:	d901      	bls.n	8000efe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e200      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000efe:	4b5d      	ldr	r3, [pc, #372]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d0f0      	beq.n	8000eec <HAL_RCC_OscConfig+0xe4>
 8000f0a:	e014      	b.n	8000f36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fbd0 	bl	80006b0 <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f14:	f7ff fbcc 	bl	80006b0 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b64      	cmp	r3, #100	@ 0x64
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e1ec      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f26:	4b53      	ldr	r3, [pc, #332]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1f0      	bne.n	8000f14 <HAL_RCC_OscConfig+0x10c>
 8000f32:	e000      	b.n	8000f36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d063      	beq.n	800100a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f42:	4b4c      	ldr	r3, [pc, #304]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 030c 	and.w	r3, r3, #12
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d00b      	beq.n	8000f66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f4e:	4b49      	ldr	r3, [pc, #292]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b08      	cmp	r3, #8
 8000f58:	d11c      	bne.n	8000f94 <HAL_RCC_OscConfig+0x18c>
 8000f5a:	4b46      	ldr	r3, [pc, #280]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d116      	bne.n	8000f94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f66:	4b43      	ldr	r3, [pc, #268]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 0302 	and.w	r3, r3, #2
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d005      	beq.n	8000f7e <HAL_RCC_OscConfig+0x176>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	691b      	ldr	r3, [r3, #16]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d001      	beq.n	8000f7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e1c0      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4939      	ldr	r1, [pc, #228]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f92:	e03a      	b.n	800100a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d020      	beq.n	8000fde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f9c:	4b36      	ldr	r3, [pc, #216]	@ (8001078 <HAL_RCC_OscConfig+0x270>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa2:	f7ff fb85 	bl	80006b0 <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa8:	e008      	b.n	8000fbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000faa:	f7ff fb81 	bl	80006b0 <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e1a1      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f0      	beq.n	8000faa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	695b      	ldr	r3, [r3, #20]
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	4927      	ldr	r1, [pc, #156]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	600b      	str	r3, [r1, #0]
 8000fdc:	e015      	b.n	800100a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fde:	4b26      	ldr	r3, [pc, #152]	@ (8001078 <HAL_RCC_OscConfig+0x270>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fb64 	bl	80006b0 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fec:	f7ff fb60 	bl	80006b0 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e180      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0302 	and.w	r3, r3, #2
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0308 	and.w	r3, r3, #8
 8001012:	2b00      	cmp	r3, #0
 8001014:	d03a      	beq.n	800108c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d019      	beq.n	8001052 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800101e:	4b17      	ldr	r3, [pc, #92]	@ (800107c <HAL_RCC_OscConfig+0x274>)
 8001020:	2201      	movs	r2, #1
 8001022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001024:	f7ff fb44 	bl	80006b0 <HAL_GetTick>
 8001028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800102c:	f7ff fb40 	bl	80006b0 <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e160      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800103e:	4b0d      	ldr	r3, [pc, #52]	@ (8001074 <HAL_RCC_OscConfig+0x26c>)
 8001040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	2b00      	cmp	r3, #0
 8001048:	d0f0      	beq.n	800102c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f000 face 	bl	80015ec <RCC_Delay>
 8001050:	e01c      	b.n	800108c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001052:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <HAL_RCC_OscConfig+0x274>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001058:	f7ff fb2a 	bl	80006b0 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800105e:	e00f      	b.n	8001080 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001060:	f7ff fb26 	bl	80006b0 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d908      	bls.n	8001080 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e146      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000
 8001078:	42420000 	.word	0x42420000
 800107c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001080:	4b92      	ldr	r3, [pc, #584]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001084:	f003 0302 	and.w	r3, r3, #2
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e9      	bne.n	8001060 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f003 0304 	and.w	r3, r3, #4
 8001094:	2b00      	cmp	r3, #0
 8001096:	f000 80a6 	beq.w	80011e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800109e:	4b8b      	ldr	r3, [pc, #556]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d10d      	bne.n	80010c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4b88      	ldr	r3, [pc, #544]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4a87      	ldr	r2, [pc, #540]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 80010b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010b4:	61d3      	str	r3, [r2, #28]
 80010b6:	4b85      	ldr	r3, [pc, #532]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010c2:	2301      	movs	r3, #1
 80010c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c6:	4b82      	ldr	r3, [pc, #520]	@ (80012d0 <HAL_RCC_OscConfig+0x4c8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d118      	bne.n	8001104 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010d2:	4b7f      	ldr	r3, [pc, #508]	@ (80012d0 <HAL_RCC_OscConfig+0x4c8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a7e      	ldr	r2, [pc, #504]	@ (80012d0 <HAL_RCC_OscConfig+0x4c8>)
 80010d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010de:	f7ff fae7 	bl	80006b0 <HAL_GetTick>
 80010e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010e6:	f7ff fae3 	bl	80006b0 <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b64      	cmp	r3, #100	@ 0x64
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e103      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f8:	4b75      	ldr	r3, [pc, #468]	@ (80012d0 <HAL_RCC_OscConfig+0x4c8>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001100:	2b00      	cmp	r3, #0
 8001102:	d0f0      	beq.n	80010e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	2b01      	cmp	r3, #1
 800110a:	d106      	bne.n	800111a <HAL_RCC_OscConfig+0x312>
 800110c:	4b6f      	ldr	r3, [pc, #444]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	4a6e      	ldr	r2, [pc, #440]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6213      	str	r3, [r2, #32]
 8001118:	e02d      	b.n	8001176 <HAL_RCC_OscConfig+0x36e>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d10c      	bne.n	800113c <HAL_RCC_OscConfig+0x334>
 8001122:	4b6a      	ldr	r3, [pc, #424]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001124:	6a1b      	ldr	r3, [r3, #32]
 8001126:	4a69      	ldr	r2, [pc, #420]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001128:	f023 0301 	bic.w	r3, r3, #1
 800112c:	6213      	str	r3, [r2, #32]
 800112e:	4b67      	ldr	r3, [pc, #412]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001130:	6a1b      	ldr	r3, [r3, #32]
 8001132:	4a66      	ldr	r2, [pc, #408]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001134:	f023 0304 	bic.w	r3, r3, #4
 8001138:	6213      	str	r3, [r2, #32]
 800113a:	e01c      	b.n	8001176 <HAL_RCC_OscConfig+0x36e>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2b05      	cmp	r3, #5
 8001142:	d10c      	bne.n	800115e <HAL_RCC_OscConfig+0x356>
 8001144:	4b61      	ldr	r3, [pc, #388]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001146:	6a1b      	ldr	r3, [r3, #32]
 8001148:	4a60      	ldr	r2, [pc, #384]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	6213      	str	r3, [r2, #32]
 8001150:	4b5e      	ldr	r3, [pc, #376]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	4a5d      	ldr	r2, [pc, #372]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	6213      	str	r3, [r2, #32]
 800115c:	e00b      	b.n	8001176 <HAL_RCC_OscConfig+0x36e>
 800115e:	4b5b      	ldr	r3, [pc, #364]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001160:	6a1b      	ldr	r3, [r3, #32]
 8001162:	4a5a      	ldr	r2, [pc, #360]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001164:	f023 0301 	bic.w	r3, r3, #1
 8001168:	6213      	str	r3, [r2, #32]
 800116a:	4b58      	ldr	r3, [pc, #352]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 800116c:	6a1b      	ldr	r3, [r3, #32]
 800116e:	4a57      	ldr	r2, [pc, #348]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001170:	f023 0304 	bic.w	r3, r3, #4
 8001174:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d015      	beq.n	80011aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117e:	f7ff fa97 	bl	80006b0 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001184:	e00a      	b.n	800119c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001186:	f7ff fa93 	bl	80006b0 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001194:	4293      	cmp	r3, r2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e0b1      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800119c:	4b4b      	ldr	r3, [pc, #300]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0ee      	beq.n	8001186 <HAL_RCC_OscConfig+0x37e>
 80011a8:	e014      	b.n	80011d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011aa:	f7ff fa81 	bl	80006b0 <HAL_GetTick>
 80011ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011b0:	e00a      	b.n	80011c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011b2:	f7ff fa7d 	bl	80006b0 <HAL_GetTick>
 80011b6:	4602      	mov	r2, r0
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d901      	bls.n	80011c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011c4:	2303      	movs	r3, #3
 80011c6:	e09b      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011c8:	4b40      	ldr	r3, [pc, #256]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 80011ca:	6a1b      	ldr	r3, [r3, #32]
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1ee      	bne.n	80011b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d105      	bne.n	80011e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011da:	4b3c      	ldr	r3, [pc, #240]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	4a3b      	ldr	r2, [pc, #236]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	69db      	ldr	r3, [r3, #28]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 8087 	beq.w	80012fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011f0:	4b36      	ldr	r3, [pc, #216]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 030c 	and.w	r3, r3, #12
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	d061      	beq.n	80012c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d146      	bne.n	8001292 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001204:	4b33      	ldr	r3, [pc, #204]	@ (80012d4 <HAL_RCC_OscConfig+0x4cc>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120a:	f7ff fa51 	bl	80006b0 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001212:	f7ff fa4d 	bl	80006b0 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e06d      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001224:	4b29      	ldr	r3, [pc, #164]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f0      	bne.n	8001212 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001238:	d108      	bne.n	800124c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800123a:	4b24      	ldr	r3, [pc, #144]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	4921      	ldr	r1, [pc, #132]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800124c:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6a19      	ldr	r1, [r3, #32]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800125c:	430b      	orrs	r3, r1
 800125e:	491b      	ldr	r1, [pc, #108]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001260:	4313      	orrs	r3, r2
 8001262:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <HAL_RCC_OscConfig+0x4cc>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126a:	f7ff fa21 	bl	80006b0 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001272:	f7ff fa1d 	bl	80006b0 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e03d      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001284:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x46a>
 8001290:	e035      	b.n	80012fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <HAL_RCC_OscConfig+0x4cc>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fa0a 	bl	80006b0 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a0:	f7ff fa06 	bl	80006b0 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e026      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_RCC_OscConfig+0x4c4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x498>
 80012be:	e01e      	b.n	80012fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69db      	ldr	r3, [r3, #28]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d107      	bne.n	80012d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e019      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40007000 	.word	0x40007000
 80012d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001308 <HAL_RCC_OscConfig+0x500>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a1b      	ldr	r3, [r3, #32]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d106      	bne.n	80012fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d001      	beq.n	80012fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40021000 	.word	0x40021000

0800130c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e0d0      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001320:	4b6a      	ldr	r3, [pc, #424]	@ (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	683a      	ldr	r2, [r7, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d910      	bls.n	8001350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800132e:	4b67      	ldr	r3, [pc, #412]	@ (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 0207 	bic.w	r2, r3, #7
 8001336:	4965      	ldr	r1, [pc, #404]	@ (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	4313      	orrs	r3, r2
 800133c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800133e:	4b63      	ldr	r3, [pc, #396]	@ (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	683a      	ldr	r2, [r7, #0]
 8001348:	429a      	cmp	r2, r3
 800134a:	d001      	beq.n	8001350 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e0b8      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d020      	beq.n	800139e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	d005      	beq.n	8001374 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001368:	4b59      	ldr	r3, [pc, #356]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	4a58      	ldr	r2, [pc, #352]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001372:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	2b00      	cmp	r3, #0
 800137e:	d005      	beq.n	800138c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001380:	4b53      	ldr	r3, [pc, #332]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	4a52      	ldr	r2, [pc, #328]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800138a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800138c:	4b50      	ldr	r3, [pc, #320]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	494d      	ldr	r1, [pc, #308]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d040      	beq.n	800142c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d107      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	4b47      	ldr	r3, [pc, #284]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d115      	bne.n	80013ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e07f      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d107      	bne.n	80013da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ca:	4b41      	ldr	r3, [pc, #260]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d109      	bne.n	80013ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e073      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013da:	4b3d      	ldr	r3, [pc, #244]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e06b      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ea:	4b39      	ldr	r3, [pc, #228]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f023 0203 	bic.w	r2, r3, #3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	4936      	ldr	r1, [pc, #216]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013fc:	f7ff f958 	bl	80006b0 <HAL_GetTick>
 8001400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001402:	e00a      	b.n	800141a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001404:	f7ff f954 	bl	80006b0 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001412:	4293      	cmp	r3, r2
 8001414:	d901      	bls.n	800141a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e053      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141a:	4b2d      	ldr	r3, [pc, #180]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 020c 	and.w	r2, r3, #12
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	429a      	cmp	r2, r3
 800142a:	d1eb      	bne.n	8001404 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800142c:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d210      	bcs.n	800145c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143a:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 0207 	bic.w	r2, r3, #7
 8001442:	4922      	ldr	r1, [pc, #136]	@ (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	4313      	orrs	r3, r2
 8001448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800144a:	4b20      	ldr	r3, [pc, #128]	@ (80014cc <HAL_RCC_ClockConfig+0x1c0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	429a      	cmp	r2, r3
 8001456:	d001      	beq.n	800145c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e032      	b.n	80014c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	d008      	beq.n	800147a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001468:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	4916      	ldr	r1, [pc, #88]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	4313      	orrs	r3, r2
 8001478:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0308 	and.w	r3, r3, #8
 8001482:	2b00      	cmp	r3, #0
 8001484:	d009      	beq.n	800149a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001486:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	490e      	ldr	r1, [pc, #56]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800149a:	f000 f821 	bl	80014e0 <HAL_RCC_GetSysClockFreq>
 800149e:	4602      	mov	r2, r0
 80014a0:	4b0b      	ldr	r3, [pc, #44]	@ (80014d0 <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	091b      	lsrs	r3, r3, #4
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	490a      	ldr	r1, [pc, #40]	@ (80014d4 <HAL_RCC_ClockConfig+0x1c8>)
 80014ac:	5ccb      	ldrb	r3, [r1, r3]
 80014ae:	fa22 f303 	lsr.w	r3, r2, r3
 80014b2:	4a09      	ldr	r2, [pc, #36]	@ (80014d8 <HAL_RCC_ClockConfig+0x1cc>)
 80014b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HAL_RCC_ClockConfig+0x1d0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f8b6 	bl	800062c <HAL_InitTick>

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40022000 	.word	0x40022000
 80014d0:	40021000 	.word	0x40021000
 80014d4:	08002108 	.word	0x08002108
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000004 	.word	0x20000004

080014e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b087      	sub	sp, #28
 80014e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]
 80014f2:	2300      	movs	r3, #0
 80014f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <HAL_RCC_GetSysClockFreq+0x94>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 030c 	and.w	r3, r3, #12
 8001506:	2b04      	cmp	r3, #4
 8001508:	d002      	beq.n	8001510 <HAL_RCC_GetSysClockFreq+0x30>
 800150a:	2b08      	cmp	r3, #8
 800150c:	d003      	beq.n	8001516 <HAL_RCC_GetSysClockFreq+0x36>
 800150e:	e027      	b.n	8001560 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001510:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <HAL_RCC_GetSysClockFreq+0x98>)
 8001512:	613b      	str	r3, [r7, #16]
      break;
 8001514:	e027      	b.n	8001566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	0c9b      	lsrs	r3, r3, #18
 800151a:	f003 030f 	and.w	r3, r3, #15
 800151e:	4a17      	ldr	r2, [pc, #92]	@ (800157c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001520:	5cd3      	ldrb	r3, [r2, r3]
 8001522:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d010      	beq.n	8001550 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800152e:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <HAL_RCC_GetSysClockFreq+0x94>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	0c5b      	lsrs	r3, r3, #17
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	4a11      	ldr	r2, [pc, #68]	@ (8001580 <HAL_RCC_GetSysClockFreq+0xa0>)
 800153a:	5cd3      	ldrb	r3, [r2, r3]
 800153c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a0d      	ldr	r2, [pc, #52]	@ (8001578 <HAL_RCC_GetSysClockFreq+0x98>)
 8001542:	fb03 f202 	mul.w	r2, r3, r2
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	fbb2 f3f3 	udiv	r3, r2, r3
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	e004      	b.n	800155a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a0c      	ldr	r2, [pc, #48]	@ (8001584 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	613b      	str	r3, [r7, #16]
      break;
 800155e:	e002      	b.n	8001566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001560:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <HAL_RCC_GetSysClockFreq+0x98>)
 8001562:	613b      	str	r3, [r7, #16]
      break;
 8001564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001566:	693b      	ldr	r3, [r7, #16]
}
 8001568:	4618      	mov	r0, r3
 800156a:	371c      	adds	r7, #28
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	40021000 	.word	0x40021000
 8001578:	007a1200 	.word	0x007a1200
 800157c:	08002120 	.word	0x08002120
 8001580:	08002130 	.word	0x08002130
 8001584:	003d0900 	.word	0x003d0900

08001588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800158c:	4b02      	ldr	r3, [pc, #8]	@ (8001598 <HAL_RCC_GetHCLKFreq+0x10>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr
 8001598:	20000000 	.word	0x20000000

0800159c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015a0:	f7ff fff2 	bl	8001588 <HAL_RCC_GetHCLKFreq>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	4903      	ldr	r1, [pc, #12]	@ (80015c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015b2:	5ccb      	ldrb	r3, [r1, r3]
 80015b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	08002118 	.word	0x08002118

080015c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015c8:	f7ff ffde 	bl	8001588 <HAL_RCC_GetHCLKFreq>
 80015cc:	4602      	mov	r2, r0
 80015ce:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	0adb      	lsrs	r3, r3, #11
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	4903      	ldr	r1, [pc, #12]	@ (80015e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015da:	5ccb      	ldrb	r3, [r1, r3]
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40021000 	.word	0x40021000
 80015e8:	08002118 	.word	0x08002118

080015ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <RCC_Delay+0x34>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <RCC_Delay+0x38>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	0a5b      	lsrs	r3, r3, #9
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	fb02 f303 	mul.w	r3, r2, r3
 8001606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001608:	bf00      	nop
  }
  while (Delay --);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	1e5a      	subs	r2, r3, #1
 800160e:	60fa      	str	r2, [r7, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f9      	bne.n	8001608 <RCC_Delay+0x1c>
}
 8001614:	bf00      	nop
 8001616:	bf00      	nop
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000000 	.word	0x20000000
 8001624:	10624dd3 	.word	0x10624dd3

08001628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e042      	b.n	80016c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d106      	bne.n	8001654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7fe ff1a 	bl	8000488 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2224      	movs	r2, #36	@ 0x24
 8001658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800166a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f000 fc7f 	bl	8001f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	691a      	ldr	r2, [r3, #16]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	695a      	ldr	r2, [r3, #20]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80016a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2220      	movs	r2, #32
 80016ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2220      	movs	r2, #32
 80016b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0ba      	sub	sp, #232	@ 0xe8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80016fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10f      	bne.n	800172e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800170e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001712:	f003 0320 	and.w	r3, r3, #32
 8001716:	2b00      	cmp	r3, #0
 8001718:	d009      	beq.n	800172e <HAL_UART_IRQHandler+0x66>
 800171a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800171e:	f003 0320 	and.w	r3, r3, #32
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 fb63 	bl	8001df2 <UART_Receive_IT>
      return;
 800172c:	e25b      	b.n	8001be6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800172e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 80de 	beq.w	80018f4 <HAL_UART_IRQHandler+0x22c>
 8001738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d106      	bne.n	8001752 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001748:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80d1 	beq.w	80018f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00b      	beq.n	8001776 <HAL_UART_IRQHandler+0xae>
 800175e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	f043 0201 	orr.w	r2, r3, #1
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00b      	beq.n	800179a <HAL_UART_IRQHandler+0xd2>
 8001782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d005      	beq.n	800179a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	f043 0202 	orr.w	r2, r3, #2
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800179a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00b      	beq.n	80017be <HAL_UART_IRQHandler+0xf6>
 80017a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d005      	beq.n	80017be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	f043 0204 	orr.w	r2, r3, #4
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80017be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d011      	beq.n	80017ee <HAL_UART_IRQHandler+0x126>
 80017ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80017ce:	f003 0320 	and.w	r3, r3, #32
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d105      	bne.n	80017e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80017d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d005      	beq.n	80017ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e6:	f043 0208 	orr.w	r2, r3, #8
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 81f2 	beq.w	8001bdc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <HAL_UART_IRQHandler+0x14e>
 8001804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001808:	f003 0320 	and.w	r3, r3, #32
 800180c:	2b00      	cmp	r3, #0
 800180e:	d002      	beq.n	8001816 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 faee 	bl	8001df2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001820:	2b00      	cmp	r3, #0
 8001822:	bf14      	ite	ne
 8001824:	2301      	movne	r3, #1
 8001826:	2300      	moveq	r3, #0
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d103      	bne.n	8001842 <HAL_UART_IRQHandler+0x17a>
 800183a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800183e:	2b00      	cmp	r3, #0
 8001840:	d04f      	beq.n	80018e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f000 f9f8 	bl	8001c38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001852:	2b00      	cmp	r3, #0
 8001854:	d041      	beq.n	80018da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	3314      	adds	r3, #20
 800185c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001860:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001864:	e853 3f00 	ldrex	r3, [r3]
 8001868:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800186c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001870:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001874:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	3314      	adds	r3, #20
 800187e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001882:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001886:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800188a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800188e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001892:	e841 2300 	strex	r3, r2, [r1]
 8001896:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800189a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1d9      	bne.n	8001856 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d013      	beq.n	80018d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018ae:	4a7e      	ldr	r2, [pc, #504]	@ (8001aa8 <HAL_UART_IRQHandler+0x3e0>)
 80018b0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f870 	bl	800099c <HAL_DMA_Abort_IT>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d016      	beq.n	80018f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80018cc:	4610      	mov	r0, r2
 80018ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018d0:	e00e      	b.n	80018f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f99c 	bl	8001c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018d8:	e00a      	b.n	80018f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f000 f998 	bl	8001c10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018e0:	e006      	b.n	80018f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f994 	bl	8001c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80018ee:	e175      	b.n	8001bdc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80018f0:	bf00      	nop
    return;
 80018f2:	e173      	b.n	8001bdc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	f040 814f 	bne.w	8001b9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80018fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 8148 	beq.w	8001b9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800190c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001910:	f003 0310 	and.w	r3, r3, #16
 8001914:	2b00      	cmp	r3, #0
 8001916:	f000 8141 	beq.w	8001b9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800191a:	2300      	movs	r3, #0
 800191c:	60bb      	str	r3, [r7, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 80b6 	beq.w	8001aac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800194c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001950:	2b00      	cmp	r3, #0
 8001952:	f000 8145 	beq.w	8001be0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800195a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800195e:	429a      	cmp	r2, r3
 8001960:	f080 813e 	bcs.w	8001be0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800196a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	2b20      	cmp	r3, #32
 8001974:	f000 8088 	beq.w	8001a88 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	330c      	adds	r3, #12
 800197e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001982:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001986:	e853 3f00 	ldrex	r3, [r3]
 800198a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800198e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001992:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001996:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	330c      	adds	r3, #12
 80019a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80019a4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80019a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80019b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80019b4:	e841 2300 	strex	r3, r2, [r1]
 80019b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80019bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1d9      	bne.n	8001978 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	3314      	adds	r3, #20
 80019ca:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80019ce:	e853 3f00 	ldrex	r3, [r3]
 80019d2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80019d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80019d6:	f023 0301 	bic.w	r3, r3, #1
 80019da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	3314      	adds	r3, #20
 80019e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019e8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80019ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019ee:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80019f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80019f4:	e841 2300 	strex	r3, r2, [r1]
 80019f8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80019fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1e1      	bne.n	80019c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3314      	adds	r3, #20
 8001a06:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a0a:	e853 3f00 	ldrex	r3, [r3]
 8001a0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001a10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001a16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	3314      	adds	r3, #20
 8001a20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001a24:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a26:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a28:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001a2a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001a2c:	e841 2300 	strex	r3, r2, [r1]
 8001a30:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001a32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1e3      	bne.n	8001a00 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	330c      	adds	r3, #12
 8001a4c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001a50:	e853 3f00 	ldrex	r3, [r3]
 8001a54:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001a56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a58:	f023 0310 	bic.w	r3, r3, #16
 8001a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	330c      	adds	r3, #12
 8001a66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001a6a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001a6c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a6e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001a70:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001a72:	e841 2300 	strex	r3, r2, [r1]
 8001a76:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1e3      	bne.n	8001a46 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe ff4f 	bl	8000926 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2202      	movs	r2, #2
 8001a8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f8bf 	bl	8001c22 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001aa4:	e09c      	b.n	8001be0 <HAL_UART_IRQHandler+0x518>
 8001aa6:	bf00      	nop
 8001aa8:	08001cfd 	.word	0x08001cfd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 808e 	beq.w	8001be4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 8089 	beq.w	8001be4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	330c      	adds	r3, #12
 8001ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001adc:	e853 3f00 	ldrex	r3, [r3]
 8001ae0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ae4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	330c      	adds	r3, #12
 8001af2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001af6:	647a      	str	r2, [r7, #68]	@ 0x44
 8001af8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001afa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001afc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001afe:	e841 2300 	strex	r3, r2, [r1]
 8001b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001b04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1e3      	bne.n	8001ad2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	3314      	adds	r3, #20
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b14:	e853 3f00 	ldrex	r3, [r3]
 8001b18:	623b      	str	r3, [r7, #32]
   return(result);
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	f023 0301 	bic.w	r3, r3, #1
 8001b20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	3314      	adds	r3, #20
 8001b2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001b2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8001b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b36:	e841 2300 	strex	r3, r2, [r1]
 8001b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1e3      	bne.n	8001b0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2220      	movs	r2, #32
 8001b46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	330c      	adds	r3, #12
 8001b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	e853 3f00 	ldrex	r3, [r3]
 8001b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f023 0310 	bic.w	r3, r3, #16
 8001b66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	330c      	adds	r3, #12
 8001b70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001b74:	61fa      	str	r2, [r7, #28]
 8001b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b78:	69b9      	ldr	r1, [r7, #24]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	e841 2300 	strex	r3, r2, [r1]
 8001b80:	617b      	str	r3, [r7, #20]
   return(result);
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1e3      	bne.n	8001b50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001b8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001b92:	4619      	mov	r1, r3
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f000 f844 	bl	8001c22 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001b9a:	e023      	b.n	8001be4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d009      	beq.n	8001bbc <HAL_UART_IRQHandler+0x4f4>
 8001ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f8b5 	bl	8001d24 <UART_Transmit_IT>
    return;
 8001bba:	e014      	b.n	8001be6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00e      	beq.n	8001be6 <HAL_UART_IRQHandler+0x51e>
 8001bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 f8f4 	bl	8001dc2 <UART_EndTransmit_IT>
    return;
 8001bda:	e004      	b.n	8001be6 <HAL_UART_IRQHandler+0x51e>
    return;
 8001bdc:	bf00      	nop
 8001bde:	e002      	b.n	8001be6 <HAL_UART_IRQHandler+0x51e>
      return;
 8001be0:	bf00      	nop
 8001be2:	e000      	b.n	8001be6 <HAL_UART_IRQHandler+0x51e>
      return;
 8001be4:	bf00      	nop
  }
}
 8001be6:	37e8      	adds	r7, #232	@ 0xe8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b083      	sub	sp, #12
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001c06:	bf00      	nop
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bc80      	pop	{r7}
 8001c20:	4770      	bx	lr

08001c22 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b095      	sub	sp, #84	@ 0x54
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	330c      	adds	r3, #12
 8001c46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c4a:	e853 3f00 	ldrex	r3, [r3]
 8001c4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	330c      	adds	r3, #12
 8001c5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c60:	643a      	str	r2, [r7, #64]	@ 0x40
 8001c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c68:	e841 2300 	strex	r3, r2, [r1]
 8001c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e5      	bne.n	8001c40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3314      	adds	r3, #20
 8001c7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	e853 3f00 	ldrex	r3, [r3]
 8001c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f023 0301 	bic.w	r3, r3, #1
 8001c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3314      	adds	r3, #20
 8001c92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c9c:	e841 2300 	strex	r3, r2, [r1]
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1e5      	bne.n	8001c74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d119      	bne.n	8001ce4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	330c      	adds	r3, #12
 8001cb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	e853 3f00 	ldrex	r3, [r3]
 8001cbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	f023 0310 	bic.w	r3, r3, #16
 8001cc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	330c      	adds	r3, #12
 8001cce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001cd0:	61ba      	str	r2, [r7, #24]
 8001cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cd4:	6979      	ldr	r1, [r7, #20]
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	e841 2300 	strex	r3, r2, [r1]
 8001cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1e5      	bne.n	8001cb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001cf2:	bf00      	nop
 8001cf4:	3754      	adds	r7, #84	@ 0x54
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f7ff ff7a 	bl	8001c10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001d1c:	bf00      	nop
 8001d1e:	3710      	adds	r7, #16
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b21      	cmp	r3, #33	@ 0x21
 8001d36:	d13e      	bne.n	8001db6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d40:	d114      	bne.n	8001d6c <UART_Transmit_IT+0x48>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d110      	bne.n	8001d6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	1c9a      	adds	r2, r3, #2
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	621a      	str	r2, [r3, #32]
 8001d6a:	e008      	b.n	8001d7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	1c59      	adds	r1, r3, #1
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6211      	str	r1, [r2, #32]
 8001d76:	781a      	ldrb	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10f      	bne.n	8001db2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001da0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001db0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001db2:	2300      	movs	r3, #0
 8001db4:	e000      	b.n	8001db8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001db6:	2302      	movs	r3, #2
  }
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr

08001dc2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b082      	sub	sp, #8
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001dd8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ff02 	bl	8001bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b08c      	sub	sp, #48	@ 0x30
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b22      	cmp	r3, #34	@ 0x22
 8001e04:	f040 80ae 	bne.w	8001f64 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e10:	d117      	bne.n	8001e42 <UART_Receive_IT+0x50>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d113      	bne.n	8001e42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e22:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e3a:	1c9a      	adds	r2, r3, #2
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001e40:	e026      	b.n	8001e90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e54:	d007      	beq.n	8001e66 <UART_Receive_IT+0x74>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10a      	bne.n	8001e74 <UART_Receive_IT+0x82>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691b      	ldr	r3, [r3, #16]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e008      	b.n	8001e86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e8a:	1c5a      	adds	r2, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3b01      	subs	r3, #1
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d15d      	bne.n	8001f60 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68da      	ldr	r2, [r3, #12]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0220 	bic.w	r2, r2, #32
 8001eb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ec2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d135      	bne.n	8001f56 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	330c      	adds	r3, #12
 8001ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	e853 3f00 	ldrex	r3, [r3]
 8001efe:	613b      	str	r3, [r7, #16]
   return(result);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	f023 0310 	bic.w	r3, r3, #16
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	330c      	adds	r3, #12
 8001f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f10:	623a      	str	r2, [r7, #32]
 8001f12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f14:	69f9      	ldr	r1, [r7, #28]
 8001f16:	6a3a      	ldr	r2, [r7, #32]
 8001f18:	e841 2300 	strex	r3, r2, [r1]
 8001f1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1e5      	bne.n	8001ef0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	2b10      	cmp	r3, #16
 8001f30:	d10a      	bne.n	8001f48 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff fe67 	bl	8001c22 <HAL_UARTEx_RxEventCallback>
 8001f54:	e002      	b.n	8001f5c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fe51 	bl	8001bfe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e002      	b.n	8001f66 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8001f60:	2300      	movs	r3, #0
 8001f62:	e000      	b.n	8001f66 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8001f64:	2302      	movs	r3, #2
  }
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3730      	adds	r7, #48	@ 0x30
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
	...

08001f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001faa:	f023 030c 	bic.w	r3, r3, #12
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	68b9      	ldr	r1, [r7, #8]
 8001fb4:	430b      	orrs	r3, r1
 8001fb6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a2c      	ldr	r2, [pc, #176]	@ (8002084 <UART_SetConfig+0x114>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d103      	bne.n	8001fe0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001fd8:	f7ff faf4 	bl	80015c4 <HAL_RCC_GetPCLK2Freq>
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	e002      	b.n	8001fe6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001fe0:	f7ff fadc 	bl	800159c <HAL_RCC_GetPCLK1Freq>
 8001fe4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	009a      	lsls	r2, r3, #2
 8001ff0:	441a      	add	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	4a22      	ldr	r2, [pc, #136]	@ (8002088 <UART_SetConfig+0x118>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	095b      	lsrs	r3, r3, #5
 8002004:	0119      	lsls	r1, r3, #4
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	009a      	lsls	r2, r3, #2
 8002010:	441a      	add	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	fbb2 f2f3 	udiv	r2, r2, r3
 800201c:	4b1a      	ldr	r3, [pc, #104]	@ (8002088 <UART_SetConfig+0x118>)
 800201e:	fba3 0302 	umull	r0, r3, r3, r2
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	2064      	movs	r0, #100	@ 0x64
 8002026:	fb00 f303 	mul.w	r3, r0, r3
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	3332      	adds	r3, #50	@ 0x32
 8002030:	4a15      	ldr	r2, [pc, #84]	@ (8002088 <UART_SetConfig+0x118>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800203c:	4419      	add	r1, r3
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	009a      	lsls	r2, r3, #2
 8002048:	441a      	add	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	fbb2 f2f3 	udiv	r2, r2, r3
 8002054:	4b0c      	ldr	r3, [pc, #48]	@ (8002088 <UART_SetConfig+0x118>)
 8002056:	fba3 0302 	umull	r0, r3, r3, r2
 800205a:	095b      	lsrs	r3, r3, #5
 800205c:	2064      	movs	r0, #100	@ 0x64
 800205e:	fb00 f303 	mul.w	r3, r0, r3
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	3332      	adds	r3, #50	@ 0x32
 8002068:	4a07      	ldr	r2, [pc, #28]	@ (8002088 <UART_SetConfig+0x118>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	f003 020f 	and.w	r2, r3, #15
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	440a      	add	r2, r1
 800207a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40013800 	.word	0x40013800
 8002088:	51eb851f 	.word	0x51eb851f

0800208c <memset>:
 800208c:	4603      	mov	r3, r0
 800208e:	4402      	add	r2, r0
 8002090:	4293      	cmp	r3, r2
 8002092:	d100      	bne.n	8002096 <memset+0xa>
 8002094:	4770      	bx	lr
 8002096:	f803 1b01 	strb.w	r1, [r3], #1
 800209a:	e7f9      	b.n	8002090 <memset+0x4>

0800209c <__libc_init_array>:
 800209c:	b570      	push	{r4, r5, r6, lr}
 800209e:	2600      	movs	r6, #0
 80020a0:	4d0c      	ldr	r5, [pc, #48]	@ (80020d4 <__libc_init_array+0x38>)
 80020a2:	4c0d      	ldr	r4, [pc, #52]	@ (80020d8 <__libc_init_array+0x3c>)
 80020a4:	1b64      	subs	r4, r4, r5
 80020a6:	10a4      	asrs	r4, r4, #2
 80020a8:	42a6      	cmp	r6, r4
 80020aa:	d109      	bne.n	80020c0 <__libc_init_array+0x24>
 80020ac:	f000 f81a 	bl	80020e4 <_init>
 80020b0:	2600      	movs	r6, #0
 80020b2:	4d0a      	ldr	r5, [pc, #40]	@ (80020dc <__libc_init_array+0x40>)
 80020b4:	4c0a      	ldr	r4, [pc, #40]	@ (80020e0 <__libc_init_array+0x44>)
 80020b6:	1b64      	subs	r4, r4, r5
 80020b8:	10a4      	asrs	r4, r4, #2
 80020ba:	42a6      	cmp	r6, r4
 80020bc:	d105      	bne.n	80020ca <__libc_init_array+0x2e>
 80020be:	bd70      	pop	{r4, r5, r6, pc}
 80020c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80020c4:	4798      	blx	r3
 80020c6:	3601      	adds	r6, #1
 80020c8:	e7ee      	b.n	80020a8 <__libc_init_array+0xc>
 80020ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ce:	4798      	blx	r3
 80020d0:	3601      	adds	r6, #1
 80020d2:	e7f2      	b.n	80020ba <__libc_init_array+0x1e>
 80020d4:	08002134 	.word	0x08002134
 80020d8:	08002134 	.word	0x08002134
 80020dc:	08002134 	.word	0x08002134
 80020e0:	08002138 	.word	0x08002138

080020e4 <_init>:
 80020e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e6:	bf00      	nop
 80020e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ea:	bc08      	pop	{r3}
 80020ec:	469e      	mov	lr, r3
 80020ee:	4770      	bx	lr

080020f0 <_fini>:
 80020f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020f2:	bf00      	nop
 80020f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020f6:	bc08      	pop	{r3}
 80020f8:	469e      	mov	lr, r3
 80020fa:	4770      	bx	lr
